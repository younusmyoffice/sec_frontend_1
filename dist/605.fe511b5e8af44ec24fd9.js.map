{"version":3,"file":"605.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/Clinic/ClinicProfile/ClinicProfessionalInformation/ClinicProfessionalInformation.js"],"sourcesContent":["import { Box, Typography, Skeleton } from \"@mui/material\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport \"./ClinicProfessionalInformation.scss\";\nimport { NavLink, Outlet } from \"react-router-dom\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { DemoContainer } from \"@mui/x-date-pickers/internals/demo\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport CustomDropdown from \"../../../../components/CustomDropdown\";\nimport CustomTextField from \"../../../../components/CustomTextField/custom-text-field\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport CustomModal from \"../../../../components/CustomModal\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport WorkExperience from \"../../../../DoctorModule/DoctorProfile/DoctorProfessionalInfo/WorkExperience\";\nimport Awards from \"../../../../DoctorModule/DoctorProfile/DoctorProfessionalInfo/Awards\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport License from \"../../../../DoctorModule/DoctorProfile/DoctorProfessionalInfo/License\";\nimport dayjs from \"dayjs\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar\";\n\nconst ClinicProfessionalInformation = () => {\n    const [loading, setLoading] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [isEditing1, setIsEditing1] = useState(false);\n    const [data, setData] = useState({\n        suid: localStorage.getItem(\"clinic_suid\"),\n        email: localStorage.getItem(\"clinic_Email\"),\n        qualification: null,\n        qualified_year: null,\n        university_name: null,\n        degree: null,\n        speciality_id: null,\n    });\n    const [professional, setProfessional] = useState({\n        suid: localStorage.getItem(\"clinic_suid\"),\n        email: localStorage.getItem(\"clinic_Email\"),\n        state_reg_number: null, //unique\n        country_reg_number: null, //unique\n        state_reg_date: \"null\",\n        country_reg_date: \"null\",\n    });\n    const [selectedDepartment, setSelectedDepartment] = useState(\"\"); // State for Department dropdown\n    const [labDepartments, setLabDepartments] = useState([]);\n    const [experience, setExperience] = useState([]);\n    const [award, setAward] = useState([]);\n    const [licenses, setLicenses] = useState([]);\n    const doctor_id = localStorage.getItem(\"clinic_suid\");\n    const [profileData, setProfileData] = useState([]);\n    const [snackType, setSnackType] = useState(\"\");\n    const [snackMessage, setSnackMessage] = useState(\"\");\n    const [snackOpen, setSnackOpen] = useState(false);\n\n    const fetchProfileInfo = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`sec/hcf/getClinicProfile/${doctor_id}`);\n            if (response?.data?.response && response.data.response.length > 0) {\n                const profileData = response.data.response[0];\n\n                // Log the entire response to verify the data\n                console.log(\"Full Profile Response:\", profileData);\n\n                setData((prevData) => ({\n                    ...prevData,\n                    qualification: profileData?.qualification || \"\",\n                    qualified_year: profileData?.qualified_year || \"\",\n                    university_name: profileData?.university_name || \"\",\n                    degree: profileData?.degree || \"\",\n                    speciality_id: profileData?.speciality_id || \"\",\n                    \n                }));\n\n                setProfessional((prevData) => ({\n                    ...prevData,\n                    state_reg_number: profileData?.state_reg_number || \"\", //unique\n                    country_reg_number: profileData?.country_reg_number || \"\", //unique\n                    state_reg_date: profileData?.state_reg_date || \"\",\n                    country_reg_date: profileData?.country_reg_date || \"\",\n\n                }));\n            }\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n    useEffect(() => {\n        fetchProfileInfo();\n    }, []);\n\n    const fetchData = async () => {\n        try {\n            const response = await axiosInstance.post(\n                `/sec/hcf/updateDoctorEducation`,\n                JSON.stringify(data),\n            );\n            console.log(response);\n            setSnackMessage(\"Education Updated Successfully\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n        } catch (error) {\n            console.log(error.response);\n            setSnackMessage(\"error during updating profile\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n        }\n    };\n    const fetchProfessional = async () => {\n        try {\n            const response = await axiosInstance.post(\n                `/sec/hcf/updateDoctorProfession`,\n                JSON.stringify(professional),\n            );\n            setSnackMessage(\"Professional Details Updated Successfully\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n            console.log(response);\n        } catch (error) {\n            setSnackMessage(\"error during updating profile\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n            console.log(error.response);\n        }\n    };\n    //specilization list fetch api\n    const fetchLabs = async () => {\n        try {\n            const response = await axiosInstance.get(`/sec/departments`);\n            setLabDepartments(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        }\n    };\n\n    useEffect(() => {\n        fetchLabs();\n    }, []);\n    const departmentItems = labDepartments.map((department) => ({\n        id: department.department_id,\n        name: department.department_name,\n    }));\n    const handleDropdownChange = (selectedDepartment) => {\n        const departmentId = departmentItems.find((item) => item.name === selectedDepartment)?.id;\n        setSelectedDepartment(selectedDepartment);\n\n        setData((prevState) => ({\n            ...prevState,\n            speciality_id: String(departmentId), // Ensure lab_dept_id is stored as a string\n        }));\n    };\n\n    const getexprience = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(\n                `sec/hcf/getDoctorExperience?doctor_id=${doctor_id}`,\n            );\n            setExperience(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const getawards = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(\n                `sec/hcf/getDoctorAwards?doctor_id=${doctor_id}`,\n            );\n            setAward(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const getlicenses = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(\n                `sec/hcf/getDoctorLicense?doctor_id=${doctor_id}`,\n            );\n            setLicenses(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n    useEffect(() => {\n        getawards();\n        getexprience();\n        getlicenses();\n    }, []);\n    const toggleEditMode = () => {\n        setIsEditing(!isEditing);\n    };\n    const EditMode = () => {\n        setIsEditing1(!isEditing1);\n    };\n\n    // add and update exprience start here\n    const [openDialog, setOpenDialog] = useState(false);\n    const [isEditMode, setIsEditMode] = useState(false); // Tracks whether modal is for editing or adding\n\n    const [experienceData, setExperienceData] = useState({\n        jobTitle: \"\",\n        organization: \"\",\n        startDate: null,\n        endDate: null,\n        exp_id: \"\",\n    });\n\n    const handleAdd = () => {\n        setExperienceData({\n            jobTitle: \"\",\n            organization: \"\",\n            startDate: null,\n            endDate: null,\n            exp_id: \"\",\n        });\n        setIsEditMode(false);\n        setOpenDialog(true);\n    };\n    const dates =\n        experience.to_date === \"present\"\n            ? `${dayjs(experience.from_date).format(\"DD/MM/YYYY\")} - Present`\n            : `${dayjs(experience.from_date).format(\"DD/MM/YYYY\")} - ${dayjs(\n                  experience.to_date,\n              ).format(\"DD/MM/YYYY\")}`;\n\n    const handleEdit = (index) => {\n        setExperienceData({\n            jobTitle: experience[index]?.job,\n            organization: experience[index]?.organisation,\n            startDate: dates[index] ? dayjs(dates.from_date) : null,\n            endDate: dates[index] && dates.to_date === \"present\" ? null : dayjs(dates.to_date),\n            exp_id: experience[index]?.doctor_experience_id,\n        });\n        setIsEditMode(true);\n        setOpenDialog(true);\n    };\n\n    const handleSave = async (exp_id) => {\n        const payload = {\n            suid: localStorage.getItem(\"clinic_suid\"),\n            email: localStorage.getItem(\"clinic_Email\"),\n            job: experienceData.jobTitle,\n            organisation: experienceData.organization,\n            from_date: dayjs(experienceData.startDate).format(\"YYYY-MM-DD\"),\n            to_date: experienceData.endDate\n                ? dayjs(experienceData.endDate).format(\"YYYY-MM-DD\")\n                : \"present\",\n        };\n\n        if (isEditMode) {\n            payload.doctor_experience_id = exp_id; // Add ID for editing\n        }\n\n        try {\n            const response = await axiosInstance.post(\n                `/sec/hcf/updateDoctorExperience`,\n                JSON.stringify(payload),\n            );\n\n            if (response.status === 200 || response.status === 201) {\n                console.log(\"Success:\", response.data);\n                setSnackMessage(isEditMode ? \"Work Experience Updated\" : \"Work Experience Added\");\n                setSnackType(\"success\");\n                setSnackOpen(true);\n                setOpenDialog(false); // Close modal on success\n            } else {\n                setSnackMessage(\"Failed to save work experience.\");\n                setSnackType(\"error\");\n                setSnackOpen(true);\n                console.error(\"Error:\", response.data);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error.response || error);\n            alert(\"An error occurred while saving work experience.\");\n        }\n    };\n\n    const handleChange = (field, value) => {\n        setExperienceData((prev) => ({\n            ...prev,\n            [field]: value ? dayjs(value) : null, // Ensure value is a dayjs object or null\n        }));\n    };\n\n    const getModalTitle = () => {\n        const action = isEditMode ? \"Edit\" : \"Add\";\n        return `${action} ${\"Work Exprience\"}`;\n    };\n    // add and edit licence\n    const [openDialog1, setOpenDialog1] = useState(false);\n    const [isEditMode1, setIsEditMode1] = useState(false); // Tracks whether modal is for editing or adding\n\n    const [licenseData, setLicenseData] = useState({\n        lic_title: \"\",\n        lic_certificate_no: \"\",\n        lic_issuedby: \"\",\n        lic_date: null,\n        lic_description: \"\",\n        license_id: \"\",\n    });\n\n    const handleAddLic = () => {\n        setLicenseData({\n            lic_title: \"\",\n            lic_certificate_no: \"\",\n            lic_issuedby: \"\",\n            lic_date: null,\n            lic_description: \"\",\n            license_id: \"\",\n        });\n        setIsEditMode1(false);\n        setOpenDialog1(true);\n    };\n\n    const handleEditLic = (index) => {\n        setLicenseData({\n            lic_title: licenses[index]?.lic_title,\n            lic_certificate_no: licenses[index]?.lic_certificate_no,\n            lic_issuedby: licenses[index]?.lic_issuedby,\n            lic_date: dayjs(licenses[index]?.lic_date),\n            lic_description: licenses[index]?.lic_description,\n            license_id: licenses[index]?.doctor_license_id,\n        });\n        setTimeout(() => {\n            setIsEditMode1(true);\n            setOpenDialog1(true);\n        }, 0);\n    };\n\n    const handleSaveLic = async (lic_id) => {\n        const payload = {\n            suid: localStorage.getItem(\"clinic_suid\"),\n            email: localStorage.getItem(\"clinic_Email\"),\n            lic_title: licenseData.lic_title,\n            lic_certificate_no: licenseData.lic_certificate_no,\n            lic_issuedby: licenseData.lic_issuedby,\n            lic_date: dayjs(licenseData.lic_date).format(\"YYYY-MM-DD\"),\n            lic_description: licenseData.lic_description,\n        };\n\n        if (isEditMode1) {\n            payload.doctor_license_id = lic_id; // Add ID for editing\n        }\n\n        try {\n            const response = await axiosInstance.post(\n                `/sec/hcf/updateDoctorLicense`,\n                JSON.stringify(payload),\n            );\n\n            if (response.status === 200 || response.status === 201) {\n                console.log(\"Success:\", response.data);\n                alert();\n                setOpenDialog1(false);\n                setSnackMessage(isEditMode1 ? \"License Details Updated\" : \"License Details Added\");\n                setSnackType(\"success\");\n                setSnackOpen(true);\n            } else {\n                console.error(\"Error:\", response.data);\n                setSnackMessage(\"error during updating License Details\");\n                setSnackType(\"error\");\n                setSnackOpen(true);            }\n        } catch (error) {\n            console.error(\"Error:\", error.response || error);\n            alert(\"An error occurred while saving License Details.\");\n        }\n    };\n\n    const handleChangeLic = (field, value) => {\n        setLicenseData((prev) => ({\n            ...prev,\n            [field]: value ? dayjs(value) : null, // Ensure `value` is converted to `dayjs`\n        }));\n    };\n\n    const getLicModalTitle = () => {\n        const action = isEditMode1 ? \"Edit\" : \"Add\";\n        return `${action} ${\"License & Certificates\"}`;\n    };\n\n    //add and edit awards\n    const [openDialog2, setopenDialog22] = useState(false);\n    const [isEditMode2, setisEditMode2] = useState(false); // Tracks whether modal is for editing or adding\n\n    const [awardData, setAwardData] = useState({\n        award_title: \"\",\n        award_issuedby: \"\",\n        award_date: null,\n        award_description: \"\",\n        award_id: \"\",\n    });\n\n    const handleAddAwa = () => {\n        setAwardData({\n            award_title: \"\",\n            award_issuedby: \"\",\n            award_date: null,\n            award_description: \"\",\n            award_id: \"\",\n        });\n        setisEditMode2(false);\n        setopenDialog22(true);\n    };\n\n    const handleEditAwa = (index) => {\n        setAwardData({\n            award_title: award[index]?.award_title,\n            award_issuedby: award[index]?.award_issuedby,\n            award_date: dayjs(award[index]?.award_date), // Example start date\n            award_description: award[index]?.award_description, // Example end date\n            award_id: award[index]?.doctor_awards_id,\n        });\n        setisEditMode2(true);\n        setopenDialog22(true);\n        console.log(index);\n    };\n    const handleSaveAwa = async (id) => {\n        const payload = {\n            suid: localStorage.getItem(\"clinic_suid\"),\n            email: localStorage.getItem(\"clinic_Email\"),\n            award_title: awardData.award_title,\n            award_issuedby: awardData.award_issuedby,\n            award_date: dayjs(awardData.award_date).format(\"YYYY-MM-DD\"),\n            award_description: awardData.award_description,\n        };\n\n        if (isEditMode2) {\n            payload.doctor_awards_id = id; // Add ID for editing\n        }\n\n        try {\n            const response = await axiosInstance.post(\n                `/sec/hcf/updateDoctorAwards`,\n                JSON.stringify(payload),\n            );\n\n            if (response.status === 200 || response.status === 201) {\n                console.log(\"Success:\", response.data);\n                setSnackMessage(isEditMode2 ? \"Award Updated\" : \"Award Added\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n                setopenDialog22(false); // Close modal on success\n            } else {\n                console.error(\"Error:\", response.data);\n                setSnackMessage(\"error during updating Award\");\n                setSnackType(\"error\");\n                setSnackOpen(true);            }\n        } catch (error) {\n            console.error(\"Error:\", error.response || error);\n            alert(\"An error occurred while saving award details.\");\n        }\n\n        console.log(\"edit id\", id);\n    };\n\n    const handleChangeAwa = (field, value) => {\n        setAwardData((prev) => ({\n            ...prev,\n            [field]: value ? dayjs(value) : null, // Ensure value is a dayjs object or null\n        }));\n    };\n\n    const getAwaModalTitle = () => {\n        const action = isEditMode2 ? \"Edit\" : \"Add\";\n        return `${action} ${\"Awards\"}`;\n    };\n    return (\n        <>\n            <Box sx={{ width: \"98%\", display: \"flex\", flexDirection: \"column\" }}>\n                <CustomSnackBar type={snackType} message={snackMessage} isOpen={snackOpen} />\n                <Box className=\"NavBar-Box\" sx={{ marginLeft: 0, marginBottom: 0 }}>\n                    <NavLink to={\"/clinicDashboard/clinicprofile/profileinformation\"}>\n                        Profile Information\n                    </NavLink>\n\n                    <NavLink to={\"/clinicDashboard/clinicprofile/clinicprofessionalinformation\"}>\n                        Professional Information\n                    </NavLink>\n                </Box>\n            </Box>\n            <div className=\"Main-cont\">\n                <div className=\"Education-cont\">\n                    <Typography\n                        style={{\n                            color: \"#313033\",\n                            fontFamily: \"poppins\",\n                            fontSize: \"20px\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            fontHeight: \"30px\",\n                        }}\n                    >\n                        Education Details\n                    </Typography>\n                    <Box\n                        sx={{\n                            border: \"1px solid  #E6E1E5\",\n                            width: \"60%\",\n                            borderBottom: \"1px\",\n                        }}\n                    ></Box>\n                    <div className=\"Edit-session\">\n                        <EditIcon\n                            style={{\n                                color: \"#E72B4A\",\n                            }}\n                        />\n                        <CustomButton\n                            label={isEditing ? \"Cancel\" : \"Edit\"}\n                            isTransaprent={\"True\"}\n                            handleClick={toggleEditMode}\n                            buttonCss={{\n                                color: \"#E72B4A\",\n                                borderBottom: \"1px\",\n                                borderTop: \"1px\",\n                                borderRight: \"1px\",\n                                borderLeft: \"1px\",\n                            }}\n                        ></CustomButton>\n                    </div>\n                </div>\n                <div className=\"edu-textfields\">\n                    <div className=\"A-B-C\">\n                        <CustomTextField\n                            defaultValue={data?.qualification}\n                            CustomValue={data?.qualification}\n                            label=\"Qualification\"\n                            isDisabled={!isEditing}\n                            helperText={\"\"}\n                            textcss={{\n                                width: \"350px\",\n                            }}\n                            onInput={(event) => {\n                                const Copy = {\n                                    ...data,\n                                    qualification: event.target.value,\n                                };\n                                console.log(\"first name is entered :\", event.target.value);\n                                setData(Copy);\n                            }}\n                        ></CustomTextField>\n                        <CustomTextField\n                            defaultValue={data?.university_name}\n                            CustomValue={data?.university_name}\n                            label=\"University\"\n                            isDisabled={!isEditing}\n                            helperText={\"\"}\n                            textcss={{\n                                width: \"350px\",\n                            }}\n                            onInput={(event) => {\n                                const Copy = {\n                                    ...data,\n                                    university_name: event.target.value,\n                                };\n                                console.log(\"first name is entered :\", event.target.value);\n                                setData(Copy);\n                            }}\n                        ></CustomTextField>\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                            <DemoContainer components={[\"DatePicker\"]}>\n                                <DatePicker\n                                    value={\n                                        data.qualified_year ? dayjs(`${data.qualified_year}`) : null\n                                    }\n                                    disabled={!isEditing}\n                                    label=\"Year of Passing\"\n                                    views={[\"year\"]} // Focus only on year selection\n                                    style={{ width: \"300px\" }}\n                                    onChange={(newValue) => {\n                                        setData({\n                                            ...data,\n                                            qualified_year: newValue?.$y, // Extract only the year\n                                        });\n                                    }}\n                                />\n                            </DemoContainer>\n                        </LocalizationProvider>\n                    </div>\n                    <div className=\"deg-spe\">\n                        <CustomTextField\n                            defaultValue={data?.degree}\n                            CustomValue={data?.degree}\n                            label=\"Degree\"\n                            helperText={\"\"}\n                            isDisabled={!isEditing}\n                            textcss={{\n                                width: \"350px\",\n                            }}\n                            onInput={(event) => {\n                                setData({\n                                    ...data,\n                                    degree: event.target.value,\n                                });\n                            }}\n                        ></CustomTextField>\n\n                        <CustomDropdown\n                            label={\"Specialization\"}\n                            isDisabled={!isEditing}\n                            items={departmentItems.map((item) => item.name)} // Extract just names for display\n                            // activeItem={selectedDepartment} // State to hold active selected value\n                            activeItem={selectedDepartment} // State to hold active selected value\n                            handleChange={handleDropdownChange} // Function to handle dropdown changes\n                            dropdowncss={{\n                                width: \"360px\",\n                                color: \"#787579\",\n                            }}\n                        />\n                        {isEditing && (\n                            <CustomButton\n                                label={\"Save\"}\n                                isTransaprent={false}\n                                isElevated={false}\n                                handleClick={() => {\n                                    fetchData();\n                                }}\n                                buttonCss={{\n                                    MarginTop: \"200px\",\n                                    width: \"155px\",\n                                    height: \"41px\",\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"Education-cont1\">\n                    <Typography\n                        style={{\n                            color: \"#313033\",\n                            fontFamily: \"poppins\",\n                            fontSize: \"20px\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            fontHeight: \"30px\",\n                        }}\n                    >\n                        Professional Credentials\n                    </Typography>\n                    <Box\n                        sx={{\n                            border: \"1px solid  #E6E1E5\",\n                            width: \"60%\",\n                            borderBottom: \"1px\",\n                        }}\n                    ></Box>\n                    <div className=\"Edit-session\">\n                        <EditIcon\n                            style={{\n                                color: \"#E72B4A\",\n                            }}\n                        />\n                        <CustomButton\n                            label={isEditing1 ? \"Cancel\" : \"Edit\"}\n                            handleClick={EditMode}\n                            isTransaprent={\"True\"}\n                            buttonCss={{\n                                color: \"#E72B4A\",\n                                borderBottom: \"1px\",\n                                borderTop: \"1px\",\n                                borderRight: \"1px\",\n                                borderLeft: \"1px\",\n                            }}\n                        ></CustomButton>\n                    </div>\n                </div>\n                <div className=\"edu-textfields\">\n                    <div className=\"A-B-C1\">\n                        <CustomTextField\n                            defaultValue={professional?.state_reg_number}\n                            CustomValue={professional?.state_reg_number}\n                            label=\"State Registration No\"\n                            helperText={\"\"}\n                            isDisabled={!isEditing1}\n                            textcss={{\n                                width: \"350px\",\n                            }}\n                            onInput={(event) => {\n                                setProfessional({\n                                    ...professional,\n                                    state_reg_number: event.target.value,\n                                });\n                            }}\n                        ></CustomTextField>\n                        <CustomTextField\n                        ty\n                            defaultValue={professional?.country_reg_number}\n                            CustomValue={professional?.country_reg_number}\n                            label=\"Indian Registration No\"\n                            isDisabled={!isEditing1}\n                            helperText={\"\"}\n                            textcss={{\n                                width: \"350px\",\n                            }}\n                            onInput={(event) => {\n                                setProfessional({\n                                    ...professional,\n                                    country_reg_number: event.target.value,\n                                });\n                            }}\n                        ></CustomTextField>\n                    </div>\n\n                    <div className=\"deg-spe\">\n                        <CustomTextField\n                            defaultValue={professional?.state_reg_date}\n                            CustomValue={professional?.state_reg_date}\n                            label=\"Registration Date\"\n                            placeholder={\"yyyy-mm-dd\"}\n                            isDisabled={!isEditing1}\n                            helperText={\"\"}\n                            textcss={{\n                                width: \"350px\",\n                            }}\n                            onInput={(event) => {\n                                setProfessional({\n                                    ...professional,\n                                    state_reg_date: event.target.value,\n                                });\n                            }}\n                        ></CustomTextField>\n                        <CustomTextField\n                            defaultValue={professional?.country_reg_date}\n                            CustomValue={professional?.country_reg_date}\n                            label=\"Registration Date\"\n                            placeholder={\"yyyy-mm-dd\"}\n                            isDisabled={!isEditing1}\n                            helperText={\"\"}\n                            textcss={{\n                                width: \"350px\",\n                            }}\n                            onInput={(event) => {\n                                setProfessional({\n                                    ...professional,\n                                    country_reg_date: event.target.value,\n                                });\n                            }}\n                        ></CustomTextField>\n                        {isEditing1 && (\n                            <CustomButton\n                                label={\"Save\"}\n                                isTransaprent={false}\n                                isElevated={false}\n                                handleClick={() => {\n                                    setIsEditing1(false);\n                                    fetchProfessional();\n                                }}\n                                buttonCss={{\n                                    MarginTop: \"200px\",\n                                    width: \"155px\",\n                                    height: \"41px\",\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n                <div className=\"Education-cont1\">\n                    <Typography\n                        style={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"20px\",\n                            fontWeight: \"500\",\n                        }}\n                    >\n                        Work Experience{\" \"}\n                    </Typography>\n                    <Box\n                        sx={{\n                            border: \"1px solid #E6E1E5\",\n                            width: \"60%\",\n                        }}\n                    />\n                    <button\n                        onClick={handleAdd}\n                        style={{\n                            border: \"none\",\n                            background: \"transparent\",\n                            cursor: \"pointer\",\n                        }}\n                    >\n                        <AddIcon style={{ color: \"#E72B4A\" }} />\n                    </button>\n                </div>\n\n                {loading ? (\n                    // Skeleton loader for experience cards\n                    Array.from({ length: 3 }).map((_, index) => (\n                        <Box key={index} sx={{ marginBottom: \"16px\" }}>\n                            <Skeleton variant=\"rectangular\" width=\"100%\" height={120} />\n                            <Skeleton variant=\"text\" width=\"60%\" />\n                            <Skeleton variant=\"text\" width=\"40%\" />\n                        </Box>\n                    ))\n                ) : Array.isArray(experience) && experience.length > 0 ? (\n                    experience.map((exp, index) => (\n                        <WorkExperience\n                            key={index} // Unique key for each component\n                            index={index} // Pass the index here\n                            head={exp.job} // Pass the job title\n                            subhead={exp.organisation} // Pass the organisation name\n                            dates={\n                                exp.to_date === \"present\"\n                                    ? `${dayjs(exp.from_date).format(\"DD/MM/YYYY\")} - Present`\n                                    : `${dayjs(exp.from_date).format(\"DD/MM/YYYY\")} - ${dayjs(\n                                          exp.to_date,\n                                      ).format(\"DD/MM/YYYY\")}`\n                            }\n                            doctorExperienceId={exp.doctor_experience_id}\n                            handleEdit={() => handleEdit(index)} // Pass the unique ID (if exists)\n                        />\n                    ))\n                ) : (\n                    // No awards found card\n                    <Box\n                        sx={{\n                            padding: \"16px\",\n                            textAlign: \"center\",\n                            border: \"1px solid #ddd\",\n                            borderRadius: \"8px\",\n                        }}\n                    >\n                        <Typography variant=\"h6\" sx={{ marginBottom: \"8px\" }}>\n                            No Work Experience Found\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                            Add your first Experience to showcase your Work profile.\n                        </Typography>\n                    </Box>\n                )}\n                <div className=\"Education-cont1\">\n                    <Typography\n                        style={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"20px\",\n                            fontWeight: \"500\",\n                        }}\n                    >\n                        Awards\n                    </Typography>\n                    <Box\n                        sx={{\n                            border: \"1px solid #E6E1E5\",\n                            width: \"60%\",\n                        }}\n                    />\n                    <button\n                        onClick={handleAddAwa}\n                        style={{\n                            border: \"none\",\n                            background: \"transparent\",\n                            cursor: \"pointer\",\n                        }}\n                    >\n                        <AddIcon style={{ color: \"#E72B4A\" }} />\n                    </button>\n                </div>\n                {loading ? (\n                    // Skeleton loader for awards cards\n                    Array.from({ length: 3 }).map((_, index) => (\n                        <Box key={index} sx={{ marginBottom: \"16px\" }}>\n                            <Skeleton variant=\"rectangular\" width=\"100%\" height={120} />\n                            <Skeleton variant=\"text\" width=\"60%\" />\n                            <Skeleton variant=\"text\" width=\"40%\" />\n                        </Box>\n                    ))\n                ) : Array.isArray(award) && award.length > 0 ? (\n                    award.map((awa, index) => (\n                        <Awards\n                            key={index}\n                            index={index} // Pass the index here\n                            head={awa.award_title}\n                            subhead={awa.award_issuedby}\n                            dates={awa.award_date}\n                            description={awa.award_description}\n                            doctorAwardsId={awa.doctor_awards_id}\n                            handleEditAwa={() => handleEditAwa(index)}\n                        />\n                    ))\n                ) : (\n                    // No awards found card\n                    <Box\n                        sx={{\n                            padding: \"16px\",\n                            textAlign: \"center\",\n                            border: \"1px solid #ddd\",\n                            borderRadius: \"8px\",\n                        }}\n                    >\n                        <Typography variant=\"h6\" sx={{ marginBottom: \"8px\" }}>\n                            No Awards Found\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                            Add your first award to showcase your achievements.\n                        </Typography>\n                    </Box>\n                )}\n\n                <div className=\"Education-cont1\">\n                    <Typography\n                        style={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"20px\",\n                            fontWeight: \"500\",\n                        }}\n                    >\n                        License & Certificates\n                    </Typography>\n                    <Box\n                        sx={{\n                            border: \"1px solid #E6E1E5\",\n                            width: \"60%\",\n                        }}\n                    />\n                    <button\n                        onClick={handleAddLic}\n                        style={{\n                            border: \"none\",\n                            background: \"transparent\",\n                            cursor: \"pointer\",\n                        }}\n                    >\n                        <AddIcon style={{ color: \"#E72B4A\" }} />\n                    </button>\n                </div>\n                {loading ? (\n                    // Skeleton loader for licenses cards\n                    Array.from({ length: 3 }).map((_, index) => (\n                        <Box key={index} sx={{ marginBottom: \"16px\" }}>\n                            <Skeleton variant=\"rectangular\" width=\"100%\" height={120} />\n                            <Skeleton variant=\"text\" width=\"60%\" />\n                            <Skeleton variant=\"text\" width=\"40%\" />\n                        </Box>\n                    ))\n                ) : Array.isArray(licenses) && licenses.length > 0 ? (\n                    licenses.map((lic, index) => (\n                        <License\n                            key={index}\n                            index={index}\n                            head={lic.lic_title}\n                            certific_num={lic.lic_certificate_no}\n                            subhead={lic.lic_issuedby}\n                            dates={lic.lic_date}\n                            description={lic.lic_description}\n                            doctorLicensesId={lic.doctor_license_id}\n                            handleEditLic={() => handleEditLic(index)} // Pass the unique ID (if exists)\n                        />\n                    ))\n                ) : (\n                    // No awards found card\n                    <Box\n                        sx={{\n                            padding: \"16px\",\n                            textAlign: \"center\",\n                            border: \"1px solid #ddd\",\n                            borderRadius: \"8px\",\n                        }}\n                    >\n                        <Typography variant=\"h6\" sx={{ marginBottom: \"8px\" }}>\n                            No License Found\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                            Add your first License to showcase your License.\n                        </Typography>\n                    </Box>\n                )}\n            </div>\n            {openDialog && (\n                <CustomModal\n                    isOpen={openDialog}\n                    conditionOpen={setOpenDialog}\n                    title={\n                        <Typography variant=\"h6\" className=\"modal-title\">\n                            {getModalTitle()}\n                        </Typography>\n                    }\n                    modalCss={{\n                        width: \"400px\", // Set a constant width\n                        height: \"500px\", // Increase the height to make it taller\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\", // Distribute space evenly\n                        alignItems: \"center\",\n                    }}\n                >\n                    <div\n                        className=\"textfield-cont\"\n                        style={{\n                            display: \"flex\",\n                            flexWrap: \"wrap\", // Allows fields to wrap into rows\n                            gap: \"16px\", // Spacing between fields\n                            justifyContent: \"space-around\",\n                            width: \"100%\", // Ensure it spans the modal's width\n                            marginBottom: \"20px\", // Add spacing below the fields\n                        }}\n                    >\n                        <CustomTextField\n                            label=\"Job Title\"\n                            helperText=\"\"\n                            defaultValue={experienceData?.jobTitle}\n                            textcss={{ width: \"180px\" }}\n                            onInput={(event) => {\n                                setExperienceData({\n                                    ...experienceData,\n                                    jobTitle: event.target.value,\n                                });\n                            }}\n                        />\n\n                        <CustomTextField\n                            helperText=\"\"\n                            label=\"Hospital/Organization\"\n                            defaultValue={experienceData?.organization}\n                            textcss={{ width: \"180px\" }}\n                            onInput={(event) => {\n                                setExperienceData({\n                                    ...experienceData,\n                                    organization: event.target.value,\n                                });\n                            }}\n                        />\n\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                            <DatePicker\n                                label=\"Start Date\"\n                                value={experienceData?.startDate}\n                                onChange={(newValue) => handleChange(\"startDate\", newValue)}\n                                sx={{ width: \"180px\" }}\n                            />\n                            <DatePicker\n                                label=\"End Date\"\n                                value={experienceData?.endDate}\n                                onChange={(newValue) => handleChange(\"endDate\", newValue)}\n                                sx={{ width: \"180px\" }}\n                            />\n                        </LocalizationProvider>\n                    </div>\n                    <div\n                        className=\"save-btn\"\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"center\", // Center the button horizontally\n                            width: \"100%\", // Ensure it spans the width of the modal\n                        }}\n                    >\n                        <CustomButton\n                            label=\"Save\"\n                            handleClick={() => {\n                                handleSave(experienceData.exp_id);\n                            }}\n                            buttonCss={{ width: \"170px\", height: \"48px\", borderRadius: \"20px\" }}\n                        />\n                    </div>\n                </CustomModal>\n            )}\n            {openDialog1 && (\n                <CustomModal\n                    isOpen={openDialog1}\n                    conditionOpen={setOpenDialog1}\n                    title={\n                        <Typography variant=\"h6\" className=\"modal-title\">\n                            {getLicModalTitle()}\n                        </Typography>\n                    }\n                    modalCss={{\n                        width: \"400px\", // Set a constant width\n                        height: \"500px\", // Increase the height to make it taller\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\", // Distribute space evenly\n                        alignItems: \"center\",\n                    }}\n                >\n                    <div\n                        className=\"textfield-cont\"\n                        style={{\n                            display: \"flex\",\n                            flexWrap: \"wrap\", // Allows fields to wrap into rows\n                            gap: \"16px\", // Spacing between fields\n                            justifyContent: \"space-around\",\n                            width: \"100%\", // Ensure it spans the modal's width\n                            marginBottom: \"20px\", // Add spacing below the fields\n                        }}\n                    >\n                        <CustomTextField\n                            helperText={\"\"}\n                            label=\"License Title\"\n                            defaultValue={licenseData?.lic_title}\n                            onInput={(event) => {\n                                setLicenseData({\n                                    ...licenseData,\n                                    lic_title: event.target.value,\n                                });\n                            }}\n                            textcss={{ width: \"450px\" }}\n                        />\n                        <CustomTextField\n                            helperText={\"\"}\n                            label=\"License Number\"\n                            defaultValue={licenseData?.lic_certificate_no}\n                            value={licenseData?.lic_certificate_no}\n                            onInput={(event) => {\n                                setLicenseData({\n                                    ...licenseData,\n                                    lic_certificate_no: event.target.value,\n                                });\n                            }}\n                            textcss={{ width: \"180px\" }}\n                        />\n                        <CustomTextField\n                            helperText={\"\"}\n                            label=\"Issuing Authority\"\n                            defaultValue={licenseData?.lic_issuedby}\n                            onInput={(event) => {\n                                setLicenseData({\n                                    ...licenseData,\n                                    lic_issuedby: event.target.value,\n                                });\n                            }}\n                            textcss={{ width: \"180px\" }}\n                        />\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                            <DatePicker\n                                label=\"Issue Date\"\n                                value={licenseData?.lic_date}\n                                onChange={(newValue) => handleChangeLic(\"lic_date\", newValue)}\n                                sx={{ width: \"450px\" }}\n                            />\n                        </LocalizationProvider>\n                        <CustomTextField\n                            rows={3}\n                            multiline // Enable multiline input\n                            helperText={\"\"}\n                            label=\"Description\"\n                            defaultValue={licenseData?.lic_description}\n                            onInput={(event) => {\n                                setLicenseData({\n                                    ...licenseData,\n                                    lic_description: event.target.value,\n                                });\n                            }}\n                            textcss={{ width: \"450px\" }}\n                        />\n                    </div>\n                    <div\n                        className=\"save-btn\"\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"center\", // Center the button horizontally\n                            width: \"100%\", // Ensure it spans the width of the modal\n                        }}\n                    >\n                        <CustomButton\n                            label=\"Save\"\n                            handleClick={() => {\n                                handleSaveLic(licenseData.license_id);\n                            }}\n                            buttonCss={{ width: \"170px\", height: \"48px\", borderRadius: \"20px\" }}\n                        />\n                    </div>\n                </CustomModal>\n            )}\n            {openDialog2 && (\n                <CustomModal\n                    isOpen={openDialog2}\n                    conditionOpen={setopenDialog22}\n                    title={\n                        <Typography variant=\"h6\" className=\"modal-title\">\n                            {getAwaModalTitle()}\n                        </Typography>\n                    }\n                    modalCss={{\n                        width: \"400px\", // Set a constant width\n                        height: \"500px\", // Increase the height to make it taller\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\", // Distribute space evenly\n                        alignItems: \"center\",\n                    }}\n                >\n                    <div\n                        className=\"textfield-cont\"\n                        style={{\n                            display: \"flex\",\n                            flexWrap: \"wrap\", // Allows fields to wrap into rows\n                            gap: \"16px\", // Spacing between fields\n                            justifyContent: \"space-around\",\n                            width: \"100%\", // Ensure it spans the modal's width\n                            marginBottom: \"20px\", // Add spacing below the fields\n                        }}\n                    >\n                        <CustomTextField\n                            helperText={\"\"}\n                            label=\"Award Title\"\n                            defaultValue={awardData?.award_title}\n                            onInput={(event) => {\n                                setAwardData({\n                                    ...awardData,\n                                    award_title: event.target.value,\n                                });\n                            }}\n                            textcss={{ width: \"450px\" }}\n                        />\n                        <CustomTextField\n                            helperText={\"\"}\n                            label=\"Award IssuedBy\"\n                            defaultValue={awardData?.award_issuedby}\n                            onInput={(event) => {\n                                setAwardData({\n                                    ...awardData,\n                                    award_issuedby: event.target.value,\n                                });\n                            }}\n                            textcss={{ width: \"180px\" }}\n                        />\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                            <DatePicker\n                                label=\"Issue Date\"\n                                value={awardData.award_date}\n                                onChange={(newValue) => handleChangeAwa(\"award_date\", newValue)}\n                                sx={{ width: \"180px\" }}\n                            />\n                        </LocalizationProvider>\n                        <CustomTextField\n                            rows={3}\n                            multiline\n                            helperText={\"\"}\n                            label=\"Description\"\n                            defaultValue={awardData?.award_description}\n                            onInput={(event) => {\n                                setAwardData({\n                                    ...awardData,\n                                    award_description: event.target.value,\n                                });\n                            }}\n                            textcss={{ width: \"450px\" }}\n                        />\n                    </div>\n                    <div\n                        className=\"save-btn\"\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"center\", // Center the button horizontally\n                            width: \"100%\", // Ensure it spans the width of the modal\n                        }}\n                    >\n                        <CustomButton\n                            label=\"Save\"\n                            handleClick={() => {\n                                handleSaveAwa(awardData.award_id);\n                            }}\n                            buttonCss={{ width: \"170px\", height: \"48px\", borderRadius: \"20px\" }}\n                        />\n                    </div>\n                </CustomModal>\n            )}\n        </>\n    );\n};\n\nexport default ClinicProfessionalInformation;\n"],"names":["ClinicProfessionalInformation","loading","setLoading","useState","isEditing","setIsEditing","isEditing1","setIsEditing1","data","setData","suid","localStorage","getItem","email","qualification","qualified_year","university_name","degree","speciality_id","professional","setProfessional","state_reg_number","country_reg_number","state_reg_date","country_reg_date","selectedDepartment","setSelectedDepartment","labDepartments","setLabDepartments","experience","setExperience","award","setAward","licenses","setLicenses","doctor_id","profileData","setProfileData","snackType","setSnackType","snackMessage","setSnackMessage","snackOpen","setSnackOpen","useEffect","async","_response$data","response","axiosInstance","get","concat","length","prevData","_objectSpread","error","fetchProfileInfo","_response$data2","fetchLabs","departmentItems","map","department","id","department_id","name","department_name","_response$data4","getawards","_response$data3","getexprience","_response$data5","getlicenses","openDialog","setOpenDialog","isEditMode","setIsEditMode","experienceData","setExperienceData","jobTitle","organization","startDate","endDate","exp_id","dates","to_date","dayjs","from_date","format","handleChange","field","value","prev","openDialog1","setOpenDialog1","isEditMode1","setIsEditMode1","licenseData","setLicenseData","lic_title","lic_certificate_no","lic_issuedby","lic_date","lic_description","license_id","openDialog2","setopenDialog22","isEditMode2","setisEditMode2","awardData","setAwardData","award_title","award_issuedby","award_date","award_description","award_id","React","Box","sx","width","display","flexDirection","CustomSnackBar","type","message","isOpen","className","marginLeft","marginBottom","NavLink","to","Typography","style","color","fontFamily","fontSize","fontStyle","fontWeight","fontHeight","border","borderBottom","EditIcon","CustomButton","label","isTransaprent","handleClick","toggleEditMode","buttonCss","borderTop","borderRight","borderLeft","CustomTextField","defaultValue","CustomValue","isDisabled","helperText","textcss","onInput","event","Copy","target","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DatePicker","disabled","views","onChange","newValue","$y","CustomDropdown","items","item","activeItem","_departmentItems$find","departmentId","find","prevState","String","dropdowncss","isElevated","post","JSON","stringify","fetchData","MarginTop","height","EditMode","ty","placeholder","fetchProfessional","onClick","handleAdd","background","cursor","AddIcon","Array","from","_","index","key","Skeleton","variant","isArray","exp","WorkExperience","head","job","subhead","organisation","doctorExperienceId","doctor_experience_id","handleEdit","_experience$index","_experience$index2","_experience$index3","padding","textAlign","borderRadius","handleAddAwa","awa","Awards","description","doctorAwardsId","doctor_awards_id","handleEditAwa","_award$index","_award$index2","_award$index3","_award$index4","_award$index5","handleAddLic","lic","License","certific_num","doctorLicensesId","doctor_license_id","handleEditLic","_licenses$index","_licenses$index2","_licenses$index3","_licenses$index4","_licenses$index5","_licenses$index6","setTimeout","CustomModal","conditionOpen","title","modalCss","justifyContent","alignItems","flexWrap","gap","payload","status","alert","handleSave","handleChangeLic","rows","multiline","lic_id","handleSaveLic","handleChangeAwa","handleSaveAwa"],"sourceRoot":""}