{"version":3,"file":"279.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/components/DoctorProfileCard/DoctorProfileCard.js","webpack://sec-frontend/./src/components/ListingTabs/ListingTabs.js","webpack://sec-frontend/./src/DoctorModule/DoctorListing/DoctorListingDetails/DoctorListingDetails.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Typography, Avatar, Chip, Rating, Divider } from \"@mui/material\";\nimport { Edit as EditIcon, LocationOn, Phone, Email } from \"@mui/icons-material\";\nimport CustomButton from \"../CustomButton\";\nimport \"./DoctorProfileCard.scss\";\n\nconst DoctorProfileCard = ({\n    name = \"Dr. John Doe\",\n    specialty = \"General Practitioner\",\n    profileImage = null,\n    onEditClick = () => {},\n    className = \"\",\n    showEditButton = true,\n    rating = 4.5,\n    reviewCount = 128,\n    location = \"New York, NY\",\n    phone = \"+1 (555) 123-4567\",\n    email = \"doctor@example.com\",\n    experience = \"10+ years\",\n    variant = \"default\",\n    ...props\n}) => {\n    const getInitials = (name) => {\n        return name.split(' ').map(n => n[0]).join('').toUpperCase();\n    };\n\n    return (\n        <Box className={`doctor-profile-card doctor-profile-card--${variant} ${className}`} {...props}>\n            <div className=\"profile-content\">\n                <div className=\"profile-header\">\n                    <div className=\"profile-info\">\n                        <Avatar\n                            src={profileImage}\n                            alt={name}\n                            className=\"profile-avatar\"\n                            sx={{\n                                width: 100,\n                                height: 100,\n                                fontSize: '1.8rem',\n                                fontWeight: 700,\n                                backgroundColor: '#e72b4a',\n                                color: 'white',\n                                border: '4px solid #ffffff',\n                                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'\n                            }}\n                        >\n                            {!profileImage && getInitials(name)}\n                        </Avatar>\n                        \n                        <div className=\"profile-details\">\n                            <Typography variant=\"h5\" className=\"doctor-name\">\n                                {name}\n                            </Typography>\n                            <Typography variant=\"body1\" className=\"doctor-specialty\">\n                                {specialty}\n                            </Typography>\n                            \n                            {experience && (\n                                <Chip \n                                    label={`${experience} experience`}\n                                    size=\"small\"\n                                    sx={{\n                                        marginTop: '8px',\n                                        backgroundColor: '#e3f2fd',\n                                        color: '#1976d2',\n                                        fontWeight: 600,\n                                        fontSize: '11px'\n                                    }}\n                                />\n                            )}\n                            \n                            <div className=\"rating-section\">\n                                <Rating \n                                    value={rating} \n                                    readOnly \n                                    precision={0.1}\n                                    size=\"small\"\n                                    sx={{ marginTop: '8px' }}\n                                />\n                                <Typography variant=\"caption\" className=\"rating-text\">\n                                    {rating} ({reviewCount} reviews)\n                                </Typography>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    {showEditButton && (\n                        <CustomButton\n                            label=\"Edit Profile\"\n                            startIcon={<EditIcon />}\n                            isTransparent={true}\n                            buttonCss={{\n                                minWidth: \"140px\",\n                                height: \"44px\",\n                                borderRadius: \"12px\",\n                                fontSize: \"14px\",\n                                fontWeight: 600,\n                                textTransform: \"none\",\n                                border: \"2px solid #e72b4a\",\n                                color: \"#e72b4a\",\n                                backgroundColor: \"transparent\",\n                                transition: \"all 0.3s ease\",\n                                \"&:hover\": {\n                                    backgroundColor: \"#e72b4a\",\n                                    color: \"white\",\n                                    borderColor: \"#e72b4a\",\n                                    transform: \"translateY(-2px)\",\n                                    boxShadow: \"0 4px 12px rgba(231, 43, 74, 0.3)\"\n                                }\n                            }}\n                            handleClick={onEditClick}\n                        />\n                    )}\n                </div>\n                \n                {(location || phone || email) && (\n                    <>\n                        <Divider sx={{ margin: '1.5rem 0', opacity: 0.6 }} />\n                        <div className=\"contact-info\">\n                            {location && (\n                                <div className=\"contact-item\">\n                                    <LocationOn sx={{ fontSize: 18, color: '#666' }} />\n                                    <Typography variant=\"body2\" className=\"contact-text\">\n                                        {location}\n                                    </Typography>\n                                </div>\n                            )}\n                            {phone && (\n                                <div className=\"contact-item\">\n                                    <Phone sx={{ fontSize: 18, color: '#666' }} />\n                                    <Typography variant=\"body2\" className=\"contact-text\">\n                                        {phone}\n                                    </Typography>\n                                </div>\n                            )}\n                            {email && (\n                                <div className=\"contact-item\">\n                                    <Email sx={{ fontSize: 18, color: '#666' }} />\n                                    <Typography variant=\"body2\" className=\"contact-text\">\n                                        {email}\n                                    </Typography>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </div>\n        </Box>\n    );\n};\n\nDoctorProfileCard.propTypes = {\n    name: PropTypes.string,\n    specialty: PropTypes.string,\n    profileImage: PropTypes.string,\n    onEditClick: PropTypes.func,\n    className: PropTypes.string,\n    showEditButton: PropTypes.bool,\n    rating: PropTypes.number,\n    reviewCount: PropTypes.number,\n    location: PropTypes.string,\n    phone: PropTypes.string,\n    email: PropTypes.string,\n    experience: PropTypes.string,\n    variant: PropTypes.oneOf([\"default\", \"compact\", \"detailed\"]),\n};\n\nexport default DoctorProfileCard;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./ListingTabs.scss\";\n\nconst ListingTabs = ({\n    tabs = [],\n    className = \"\",\n    ...props\n}) => {\n    return (\n        <nav className={`listing-tabs ${className}`} {...props}>\n            {tabs.map((tab, index) => (\n                <NavLink\n                    key={index}\n                    to={tab.path}\n                    className={({ isActive }) => \n                        `tab-link ${isActive || tab.active ? 'active' : ''}`\n                    }\n                >\n                    {tab.label}\n                </NavLink>\n            ))}\n        </nav>\n    );\n};\n\nListingTabs.propTypes = {\n    tabs: PropTypes.arrayOf(PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        path: PropTypes.string.isRequired,\n        active: PropTypes.bool\n    })).isRequired,\n    className: PropTypes.string,\n};\n\nexport default ListingTabs;\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Typography, TextareaAutosize, IconButton, Skeleton, TextField } from \"@mui/material\";\nimport { Close as CloseIcon, Edit as EditIcon } from \"@mui/icons-material\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./DoctorListingDetails.scss\";\n\n// Reusable Components\nimport CustomTextField from \"../../../components/CustomTextField\";\nimport CustomButton from \"../../../components/CustomButton\";\nimport CustomDatePicker from \"../../../components/CustomDatePicker\";\nimport CustomTimePicker from \"../../../components/CustomTimePicker\";\nimport CustomSnackBar from \"../../../components/CustomSnackBar\";\nimport DoctorProfileCard from \"../../../components/DoctorProfileCard\";\nimport ListingTabs from \"../../../components/ListingTabs\";\n\n// API\nimport axiosInstance from \"../../../config/axiosInstance\";\n\nconst DoctorListingDetails = () => {\n    const navigate = useNavigate();\n    \n    // State management\n    const [inputValue, setInputValue] = useState(\"\");\n    const [isTyping, setIsTyping] = useState(false);\n    const [message, setMessage] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n    const [isFieldsFilled, setIsFieldsFilled] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [isLoadingListing, setIsLoadingListing] = useState(false);\n    \n    // Form data\n    const [data, setData] = useState({\n        doctor_id: localStorage.getItem('doctor_suid'),\n        listing_name: \"\",\n        working_days_start: null,\n        working_days_end: null,\n        working_time_start: null,\n        working_time_end: null,\n        about: \"\",\n        is_active: 0\n    });\n\n    // Doctor profile data (mock data - replace with actual API call)\n    const [doctorProfile, setDoctorProfile] = useState({\n        name: \"Dr. Maria Garcia\",\n        specialty: \"Neurologist\",\n        profileImage: \"/path/to/profile-image.jpg\" // Replace with actual image path\n    });\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"listing\");\n        localStorage.setItem(\"path\", \"listingdetails\");\n        \n        // Check if we're editing an existing listing\n        const editingListingId = localStorage.getItem(\"editing_listing_id\");\n        if (editingListingId) {\n            setIsEditing(true);\n            // Load existing listing data for editing\n            loadExistingListing(editingListingId);\n        } else {\n            // Clear any stale editing state when creating new\n            setIsEditing(false);\n            setIsLoadingListing(false);\n        }\n    }, []);\n\n    // Debug effect to monitor data changes\n    useEffect(() => {\n        console.log(\"Data state changed:\", data);\n        console.log(\"Listing name in state:\", data.listing_name);\n    }, [data]);\n\n    // Text area handlers\n    const handleTextAreaChange = (event) => {\n        setInputValue(event.target.value);\n        setIsTyping(true);\n        setData({...data, about: event.target.value});\n    };\n\n    const handleTextAreaBlur = () => {\n        setIsTyping(false);\n    };\n\n    // Form field handlers\n    const handleInputChange = (event) => {\n        const updatedData = { ...data, listing_name: event.target.value };\n        setData(updatedData);\n        checkFields(updatedData);\n    };\n\n    const handleDateChange = (field, newValue) => {\n        const updatedData = {\n            ...data,\n            [field]: newValue ? newValue.toISOString().split('T')[0] : null\n        };\n        setData(updatedData);\n        checkFields(updatedData);\n    };\n\n    const handleTimeChange = (field, newValue) => {\n        const timeString = newValue ? \n            `${newValue.getHours().toString().padStart(2, '0')}:${newValue.getMinutes().toString().padStart(2, '0')}:00` : \n            null;\n        \n        const updatedData = {\n            ...data,\n            [field]: timeString\n        };\n        setData(updatedData);\n        checkFields(updatedData);\n    };\n\n    // Validation\n    const checkFields = (formData) => {\n        const isFilled = \n            formData.listing_name &&\n            formData.working_days_start &&\n            formData.working_days_end &&\n            formData.working_time_start &&\n            formData.working_time_end;\n        \n        setIsFieldsFilled(isFilled);\n    };\n\n    // Load existing listing data for editing\n    const loadExistingListing = async (listingId) => {\n        setIsLoadingListing(true);\n        try {\n            console.log(\"Loading listing for editing:\", listingId);\n            const response = await axiosInstance.get(`/sec/doctor/DocListingPlanByDoctorListingId/${listingId}`);\n            \n            console.log(\"API Response:\", response.data);\n            \n            if (response.data?.response?.DocListingPlan && response.data.response.DocListingPlan.length > 0) {\n                const listingData = response.data.response.DocListingPlan[0]; // Get first item from array\n                console.log(\"Loaded listing data:\", listingData);\n                \n                // Convert date strings to proper format for date pickers\n                const formatDate = (dateString) => {\n                    if (!dateString) return null;\n                    const date = new Date(dateString);\n                    return date.toISOString().split('T')[0]; // Convert to YYYY-MM-DD format\n                };\n                \n                // Keep time as strings for database compatibility\n                const formatTimeForDisplay = (timeString) => {\n                    if (!timeString) return null;\n                    const [hours, minutes] = timeString.split(':');\n                    const date = new Date();\n                    date.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n                    return date;\n                };\n                \n                // Update form data with existing listing data\n                const updatedData = {\n                    ...data,\n                    listing_name: listingData.listing_name || \"\",\n                    working_days_start: formatDate(listingData.working_days_start),\n                    working_days_end: formatDate(listingData.working_days_end),\n                    working_time_start: listingData.working_time_start || null, // Keep as string\n                    working_time_end: listingData.working_time_end || null, // Keep as string\n                    about: listingData.about || \"\"\n                };\n                \n                setData(updatedData);\n                \n                // Update textarea value\n                setInputValue(listingData.about || \"\");\n                \n                // Check if all fields are filled for validation\n                checkFields(updatedData);\n                \n                console.log(\"Form data updated:\", updatedData);\n                console.log(\"Listing name specifically:\", updatedData.listing_name);\n            } else {\n                console.error(\"No listing data found in response\");\n                setMessage(\"No listing data found. Please try again.\");\n                setIsOpen(true);\n            }\n        } catch (error) {\n            console.error(\"Error loading existing listing:\", error);\n            setMessage(\"Error loading listing data. Please try again.\");\n            setIsOpen(true);\n        } finally {\n            setIsLoadingListing(false);\n        }\n    };\n\n    // API calls\n    const fetchData = async () => {\n        setIsOpen(false);\n        try {\n            const editingListingId = localStorage.getItem(\"editing_listing_id\");\n            \n            // Prepare payload with doctor_list_id for updates\n            const payload = {\n                ...data,\n                doctor_id: parseInt(data.doctor_id),\n                ...(editingListingId && { doctor_list_id: parseInt(editingListingId) })\n            };\n\n            console.log(\"Sending payload to API:\", payload);\n            console.log(\"API endpoint: /sec/createUpdatedoctorlisting/listing\");\n            console.log(\"Time values being sent:\", {\n                working_time_start: payload.working_time_start,\n                working_time_end: payload.working_time_end\n            });\n\n            // Use the same endpoint for both create and update\n            const response = await axiosInstance.post(\n                \"/sec/createUpdatedoctorlisting/listing\",\n                payload\n            );\n            \n            if (editingListingId) {\n                setMessage(\"Listing updated successfully!\");\n                // Keep the editing_listing_id for continuing to next tabs\n                // localStorage.removeItem(\"editing_listing_id\"); // Don't remove yet\n                // For editing, also go to next tab (Add Plans) to continue the flow\n                setIsOpen(true);\n                setTimeout(() => {\n                    navigate(\"/doctordashboard/doctorListing/addplans\", { replace: true });\n                }, 1500);\n            } else {\n                localStorage.setItem(\"listing_id\", response?.data?.response?.docListingCreate?.doctor_list_id);\n                setMessage(response?.data?.response?.message);\n                // For creating new, go to next tab (Add Plans)\n                setIsOpen(true);\n                setTimeout(() => {\n                    navigate(\"/doctordashboard/doctorListing/addplans\", { replace: true });\n                }, 1500);\n            }\n        } catch (error) {\n            console.error(\"Error saving listing:\", error);\n            console.error(\"Error response:\", error.response);\n            \n            let errorMessage = \"Error saving listing. Please try again.\";\n            if (error.response?.data?.error) {\n                errorMessage = error.response.data.error;\n            } else if (error.response?.data?.message) {\n                errorMessage = error.response.data.message;\n            }\n            \n            setMessage(errorMessage);\n            setIsOpen(true);\n        }\n    };\n\n    // Save as draft handler\n    const handleSaveAsDraft = async () => {\n        setIsOpen(false);\n        try {\n            const editingListingId = localStorage.getItem(\"editing_listing_id\");\n            \n            // Prepare payload with doctor_list_id for updates\n            const payload = {\n                ...data,\n                doctor_id: parseInt(data.doctor_id),\n                is_active: 0, // Set as draft\n                ...(editingListingId && { doctor_list_id: parseInt(editingListingId) })\n            };\n\n            // Use the same endpoint for both create and update\n            const response = await axiosInstance.post(\n                \"/sec/createUpdatedoctorlisting/listing\",\n                payload\n            );\n            \n            if (editingListingId) {\n                setMessage(\"Draft updated successfully!\");\n                // For editing, go back to active listing when saving as draft\n                localStorage.removeItem(\"editing_listing_id\");\n                setIsOpen(true);\n                setTimeout(() => {\n                    navigate(\"/doctordashboard/doctorListing/doctoractiveListing\", { replace: true });\n                }, 2500);\n            } else {\n                localStorage.setItem(\"listing_id\", response?.data?.response?.docListingCreate?.doctor_list_id);\n                setMessage(\"Draft saved successfully!\");\n                // For creating new, also go back to active listing when saving as draft\n                setIsOpen(true);\n                setTimeout(() => {\n                    navigate(\"/doctordashboard/doctorListing/doctoractiveListing\", { replace: true });\n                }, 2500);\n            }\n        } catch (error) {\n            console.error(\"Error saving draft:\", error);\n            setMessage(\"Error saving draft. Please try again.\");\n            setIsOpen(true);\n        }\n    };\n\n    // Navigation handlers\n    const handleClose = () => {\n        navigate(\"/doctordashboard/doctorListing/doctoractiveListing\");\n    };\n\n    const handleEditProfile = () => {\n        navigate(\"/doctordashboard/doctorpersonalinfo\");\n    };\n\n    // Tab configuration\n    const tabs = [\n        { label: \"Listing Details\", path: \"/doctordashboard/doctorListing/listingdetails\", active: true },\n        { label: \"Add Plan\", path: \"/doctordashboard/doctorListing/addplans\", active: false },\n        { label: \"Add Questioner\", path: \"/doctordashboard/doctorListing/addquestioner\", active: false },\n        { label: \"Term & Conditions\", path: \"/doctordashboard/doctorListing/termandcondition\", active: false }\n    ];\n\n    return (\n        <>\n            <CustomSnackBar \n                type=\"success\" \n                isOpen={isOpen} \n                message={message} \n            />\n            \n            <div className=\"doctor-listing-details\">\n                {/* Header */}\n                <div className=\"listing-header\">\n                    <Typography variant=\"h4\" className=\"page-title\">\n                        {isEditing ? \"Edit Listing\" : \"Create New Listing\"}\n                    </Typography>\n                    <IconButton \n                        onClick={handleClose}\n                        className=\"close-button\"\n                        aria-label=\"close\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </div>\n\n                {/* Navigation Tabs */}\n                <ListingTabs tabs={tabs} />\n\n                {/* Doctor Profile Card */}\n                <DoctorProfileCard\n                    name={doctorProfile.name}\n                    specialty={doctorProfile.specialty}\n                    profileImage={doctorProfile.profileImage}\n                    onEditClick={handleEditProfile}\n                />\n\n                {/* Form Section */}\n                <div className=\"form-section\">\n                    {isLoadingListing ? (\n                        <Box sx={{ textAlign: \"center\", padding: \"40px\" }}>\n                            <Typography variant=\"h6\" sx={{ marginBottom: \"16px\" }}>\n                                Loading listing data...\n                            </Typography>\n                            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n                                <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n                            </Box>\n                        </Box>\n                    ) : (\n                        <>\n                            <Box className=\"form-grid\">\n                        {/* Add Details */}\n                        <div className=\"form-group\">\n                            <Typography variant=\"h6\" className=\"form-label\">\n                                Add Details\n                            </Typography>\n                            <TextField\n                                label=\"Listing Name\"\n                                value={data.listing_name || \"\"}\n                                onChange={handleInputChange}\n                                variant=\"standard\"\n                                fullWidth\n                                placeholder=\"Enter listing name\"\n                                sx={{\n                                    width: \"100%\",\n                                    height: \"56px\",\n                                    marginBottom: \"1.5rem\"\n                                }}\n                            />\n                        </div>\n\n                        {/* Working Days */}\n                        <div className=\"form-group\">\n                            <Typography variant=\"h6\" className=\"form-label\">\n                                Working Days\n                            </Typography>\n                            <div className=\"date-range-container\">\n                                <CustomDatePicker\n                                    label=\"From\"\n                                    value={data.working_days_start ? new Date(data.working_days_start) : null}\n                                    onChange={(value) => handleDateChange('working_days_start', value)}\n                                    textcss={{ width: \"100%\" }}\n                                />\n                                <CustomDatePicker\n                                    label=\"To\"\n                                    value={data.working_days_end ? new Date(data.working_days_end) : null}\n                                    onChange={(value) => handleDateChange('working_days_end', value)}\n                                    textcss={{ width: \"100%\" }}\n                                />\n                            </div>\n                        </div>\n\n                        {/* Working Time */}\n                        <div className=\"form-group\">\n                            <Typography variant=\"h6\" className=\"form-label\">\n                                Working Time\n                            </Typography>\n                            <div className=\"time-range-container\">\n                                <CustomTimePicker\n                                    label=\"From\"\n                                    value={data.working_time_start ? \n                                        (() => {\n                                            const [hours, minutes] = data.working_time_start.split(':');\n                                            const date = new Date();\n                                            date.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n                                            return date;\n                                        })() : null}\n                                    onChange={(value) => handleTimeChange('working_time_start', value)}\n                                    textcss={{ width: \"100%\" }}\n                                />\n                                <CustomTimePicker\n                                    label=\"To\"\n                                    value={data.working_time_end ? \n                                        (() => {\n                                            const [hours, minutes] = data.working_time_end.split(':');\n                                            const date = new Date();\n                                            date.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n                                            return date;\n                                        })() : null}\n                                    onChange={(value) => handleTimeChange('working_time_end', value)}\n                                    textcss={{ width: \"100%\" }}\n                                />\n                            </div>\n                        </div>\n                        </Box>\n\n                        {/* About Section */}\n                        <div className=\"about-section\">\n                            <Typography variant=\"h6\" className=\"form-label\">\n                                About\n                            </Typography>\n                            <TextareaAutosize\n                                minRows={5}\n                                className={`about-textarea ${isTyping ? 'typing' : ''}`}\n                                value={inputValue}\n                                onChange={handleTextAreaChange}\n                                onBlur={handleTextAreaBlur}\n                                placeholder=\"Tell us about your practice, experience, and what makes you unique...\"\n                            />\n                        </div>\n\n                        {/* Action Buttons */}\n                        <div className=\"action-buttons\">\n                            <CustomButton\n                                label=\"Save As Draft\"\n                                isTransparent={true}\n                                isDisabled={!isFieldsFilled}\n                                buttonCss={{\n                                    width: \"170px\",\n                                    borderRadius: \"100px\",\n                                    marginRight: \"16px\"\n                                }}\n                                handleClick={handleSaveAsDraft}\n                            />\n                            <CustomButton\n                                label={isEditing ? \"Update Listing\" : \"Next\"}\n                                isDisabled={!isFieldsFilled}\n                                buttonCss={{\n                                    width: \"170px\",\n                                    borderRadius: \"100px\"\n                                }}\n                                handleClick={fetchData}\n                            />\n                        </div>\n                        </>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default DoctorListingDetails;\n"],"names":["DoctorProfileCard","_ref","name","specialty","profileImage","onEditClick","className","showEditButton","rating","reviewCount","location","phone","email","experience","variant","props","_objectWithoutProperties","_excluded","React","Box","_extends","concat","Avatar","src","alt","sx","width","height","fontSize","fontWeight","backgroundColor","color","border","boxShadow","split","map","n","join","toUpperCase","getInitials","Typography","Chip","label","size","marginTop","Rating","value","readOnly","precision","CustomButton","startIcon","EditIcon","isTransparent","buttonCss","minWidth","borderRadius","textTransform","transition","borderColor","transform","handleClick","Divider","margin","opacity","LocationOn","Phone","Email","propTypes","PropTypes","ListingTabs","tabs","tab","index","NavLink","key","to","path","_ref2","isActive","active","isRequired","DoctorListingDetails","navigate","useNavigate","inputValue","setInputValue","useState","isTyping","setIsTyping","message","setMessage","isOpen","setIsOpen","isFieldsFilled","setIsFieldsFilled","isEditing","setIsEditing","isLoadingListing","setIsLoadingListing","data","setData","doctor_id","localStorage","getItem","listing_name","working_days_start","working_days_end","working_time_start","working_time_end","about","is_active","doctorProfile","setDoctorProfile","useEffect","setItem","editingListingId","loadExistingListing","handleDateChange","field","newValue","updatedData","_objectSpread","toISOString","checkFields","handleTimeChange","timeString","getHours","toString","padStart","getMinutes","formData","isFilled","async","_response$data","response","axiosInstance","get","listingId","DocListingPlan","length","listingData","formatDate","dateString","Date","error","CustomSnackBar","type","IconButton","onClick","handleClose","CloseIcon","handleEditProfile","textAlign","padding","marginBottom","display","justifyContent","Skeleton","TextField","onChange","event","target","fullWidth","placeholder","CustomDatePicker","textcss","CustomTimePicker","hours","minutes","date","setHours","parseInt","TextareaAutosize","minRows","onBlur","handleTextAreaBlur","isDisabled","marginRight","payload","doctor_list_id","post","_response$data4","removeItem","setTimeout","replace","docListingCreate","_response$data2","_response$data3","_error$response","_error$response2","errorMessage"],"sourceRoot":""}