{"version":3,"file":"153.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticCenterReports/DiagnosticPatientSearch/RecievedTables.js","webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticCenterReports/DiagnosticPatientSearch/RejectedTable.js","webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticCenterReports/DiagnosticPatientSearch/DiagnosticPatientSearch.js"],"sourcesContent":["import {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination,\n    CircularProgress,\n    Skeleton,\n} from \"@mui/material\";\nimport React, { useState, useEffect } from \"react\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar\";\nimport DiagnostCenterTableCard from \"../DiagnosticCenterChat/DiagnostCenterTableCard\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\n\nconst RecievedTables = () => {\n    const [cardData, setCardData] = useState([]);\n    const [staff_id] = useState(localStorage.getItem('diagnostic_suid'));\n    const [isopen, setIsopen] = useState(false);\n    const [snackMessage, setSnackMessage] = useState(\"Appointment Accepted\");\n    const [snackStatus, setSnackStatus] = useState(\"\");\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    const fetchData = async () => {\n        setLoading(true);\n        try {\n            const resp = await axiosInstance(`/sec/hcf/testRequests/${staff_id}`);\n            setCardData(resp?.data?.response || []);\n        } catch (err) {\n            console.log(\"Error: \", err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [isopen]);\n\n    const AcceptData = async (testID, staffID) => {\n        setIsopen(false);\n        try {\n            await axiosInstance.post(`/sec/hcf/testRequestsAccept`, JSON.stringify({\n                test_id: String(testID),\n                staff_id: String(staffID)\n            }));\n            setSnackMessage(\"Accepted Successfully\");\n            setSnackStatus(\"success\");\n            setIsopen(true);\n            fetchData(); // Refresh data after acceptance\n        } catch (err) {\n            console.log(\"Error: \", err);\n            setSnackMessage(\"Error\");\n            setSnackStatus(\"error\");\n            setIsopen(true);\n        }\n    };\n\n    const RejectData = async (testID, staffID) => {\n        setIsopen(false);\n        try {\n            await axiosInstance.post(`/sec/hcf/testRequestReject`, JSON.stringify({\n                test_id: String(testID),\n                staff_id: String(staffID)\n            }));\n            setSnackMessage(\"Rejected Successfully\");\n            setSnackStatus(\"success\");\n            setIsopen(true);\n            fetchData(); // Refresh data after rejection\n        } catch (err) {\n            console.log(\"Error: \", err);\n            setSnackMessage(\"Error\");\n            setSnackStatus(\"error\");\n            setIsopen(true);\n        }\n    };\n\n    // Handle pagination\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} style={{ background: \"white\" }}>\n            <CustomSnackBar isOpen={isopen} message={snackMessage} type={snackStatus} />\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name & Booking ID</TableCell>\n                        <TableCell align=\"right\">Date </TableCell>\n                        <TableCell align=\"right\">Schedule</TableCell>\n                        <TableCell align=\"right\">Test name</TableCell>\n                        <TableCell align=\"right\">Price</TableCell>\n                        <TableCell align=\"center\">Action</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {loading ? (\n                        Array.from({ length: rowsPerPage }).map((_, index) => (\n                            <TableRow key={index}>\n                                <TableCell colSpan={6} align=\"center\">\n                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                </TableCell>\n                            </TableRow>\n                        ))\n                    ) : cardData.length === 0 ? (\n                        <TableRow>\n                            <TableCell colSpan={6} align=\"center\">\n                                <NoAppointmentCard text_one=\"No Data Found\" />\n                            </TableCell>\n                        </TableRow>\n                    ) : (\n                        cardData\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((data) => (\n                                <TableRow\n                                    key={data?.suid}\n                                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                                >\n\n                                    <TableCell component=\"th\" scope=\"row\">\n                                    <DiagnostCenterTableCard id={data?.test_id} name= {`${data?.first_name} ${data?.middle_name} ${data?.last_name}`} profile={data?.profile_picture}/>\n                                       \n                                    </TableCell>\n                                    <TableCell align=\"right\">{data?.book_date} </TableCell>\n                                    <TableCell align=\"right\">{data?.status}</TableCell>\n                                    <TableCell align=\"right\">{data?.test_name}</TableCell>\n                                    <TableCell align=\"right\">₹{data?.test_price}</TableCell>\n                                    <TableCell align=\"center\">\n                                        <CustomButton \n                                            handleClick={() => AcceptData(data?.test_id, staff_id)} \n                                            buttonCss={{ borderRadius: \"2em\" }} \n                                            isTransaprent={true} \n                                            label=\"Accept\" \n                                        /> \n                                        <CustomButton \n                                            handleClick={() => RejectData(data?.test_id, staff_id)}  \n                                            buttonCss={{ borderRadius: \"2em\" }} \n                                            isTransaprent={true} \n                                            label=\"Reject\" \n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))\n                    )}\n                </TableBody>\n            </Table>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={cardData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </TableContainer>\n    );\n};\n\nexport default RecievedTables;\n","import {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination,\n    Skeleton,\n} from \"@mui/material\";\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport DiagnostCenterTableCard from \"../DiagnosticCenterChat/DiagnostCenterTableCard\";\n\nconst RejectedTable = () => {\n    const [cardData, setCardData] = useState([]);\n    const [staff_id] = useState(localStorage.getItem(\"diagnostic_suid\"));\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    const fetchData = async () => {\n        setLoading(true);\n        try {\n            const resp = await axiosInstance(`/sec/hcf/testRejected/${staff_id}`);\n            setCardData(resp?.data?.response || []);\n        } catch (err) {\n            console.error(\"Error: \", err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [staff_id]);\n\n    // Memoize cardData to avoid unnecessary re-renders\n    const memoizedCardData = useMemo(() => {\n        return cardData.map((data) => ({\n            id: data?.test_id,\n            propic: data?.profile_picture,\n            name: `${data?.first_name} ${data?.last_name}` || \"N/A\",\n            bookDate: data?.book_date || \"N/A\",\n            testName: data?.test_name || \"N/A\",\n            status: data?.status || \"N/A\",\n            profile_picture: data?.profile_picture || \" \",\n            \n        }));\n    }, [cardData]);\n\n    // Handle pagination change\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <TableContainer component={Paper} style={{ background: \"white\" }}>\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name/Booking ID</TableCell>\n                        <TableCell align=\"right\">Date</TableCell>\n                        <TableCell align=\"right\">Test Name</TableCell>\n                        <TableCell align=\"right\">Details</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {loading ? (\n                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                            <TableRow key={index}>\n                                <TableCell colSpan={6} align=\"center\">\n                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                </TableCell>\n                            </TableRow>\n                        ))\n                    ) : memoizedCardData.length > 0 ? (\n                        memoizedCardData\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((data) => (\n                                <TableRow\n                                    key={data.id}\n                                    sx={{\n                                        \"&:last-child td, &:last-child th\": { border: 0 },\n                                    }}\n                                >\n                                    <DiagnostCenterTableCard id={data?.id} name={data?.name} profile={data?.profile_picture}/>\n                                    <TableCell align=\"right\">{data.bookDate}</TableCell>\n                                    <TableCell align=\"right\">{data.testName}</TableCell>\n                                    <TableCell align=\"right\">{data.status}</TableCell>\n                                </TableRow>\n                            ))\n                    ) : (\n                        <TableRow>\n                            <TableCell colSpan={4} align=\"center\">\n                                <NoAppointmentCard text_one={\"No Data Found\"} />\n                            </TableCell>\n                        </TableRow>\n                    )}\n                </TableBody>\n            </Table>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={memoizedCardData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </TableContainer>\n    );\n};\n\nexport default RejectedTable;\n","import {\n    Box,\n    Paper,\n    Stack,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography,\n} from \"@mui/material\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers-pro\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers-pro/AdapterDayjs\";\nimport { DateRangePicker } from \"@mui/x-date-pickers-pro/DateRangePicker\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport pen from \"../../../../static/images/DrImages/Pen.svg\";\nimport { AuditCards } from \"../../DiagnosticManage/DiagnosticCenterAuditLog/AuditCards\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport RecievedTables from \"./RecievedTables\";\nimport RejectedTable from \"./RejectedTable\";\n\nconst DiagnosticPatientSearch = () => {\n    React.useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"reports\");\n        localStorage.setItem(\"path\", \"request\");\n    }, []);\n    useEffect(() => {\n        document.getElementById(\"location-search-container\").style.display = \"none\";\n    }, []);\n\n    const [value, setValue] = useState([null, null]);\n    function getWeeksAfter(date, amount) {\n        return date ? date.add(amount, \"week\") : undefined;\n    }\n    const [doctor, setDoctor] = useState(true);\n    const grey = \"#E6E1E5\";\n    const [bgColor, setBgColor] = useState(grey);\n    const changeColor = () => {\n        const black = \"#000000\";\n        setBgColor(black);\n    };\n    const navigate = useNavigate();\n    return (\n        <>\n            <Box\n                sx={{\n                    display: \"flex\",\n                    width: \"98%\",\n                    height: \"100%\",\n                    height: \"90%\",\n                    flexDirection: \"row\",\n                }}\n            >\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <nav className=\"NavBar-Container-Appoinement\">\n                        <NavLink to={\"/diagnostCenterDashboard/diagnosticCenterReports/request\"}>\n                            Request\n                        </NavLink>\n                        <NavLink to={\"/diagnostCenterDashboard/diagnosticCenterReports/examination\"}>\n                            Examination\n                        </NavLink>\n                        <NavLink to={\"/diagnostCenterDashboard/diagnosticCenterReports/report\"}>\n                            Report\n                        </NavLink>\n                        {/* <NavLink to={\"/diagnostCenterDashboard/diagnosticCenterReports/Chart\"}>\n                            Chart\n                        </NavLink> */}\n                    </nav>\n                </nav>\n                <Box\n                    component={\"div\"}\n                    sx={{\n                        position: \"relative\",\n                        top: \"4em\",\n                        width: \"100%\",\n                        display: \"block\",\n                        height: \"100%\",\n                    }}\n                >\n                    <div className=\"search-date\">\n                        <div\n                            style={{\n                                display: \"flex\",\n                                margin: \"10px\",\n                                border: \"1px solid #AEAAAE\",\n                                borderRadius: \"25px\",\n                                height: \"38px\",\n                                backgroundColor: \"#E6E1E5\",\n                                position: \"relative\",\n                                overflow: \"hidden\", // Prevent border overflow on animation\n                                boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n                                width: \"200px\", // Adjust width for better alignment\n                            }}\n                        >\n                            {/* Received Button */}\n                            <button\n                                style={{\n                                    flex: 1,\n                                    border: \"none\",\n                                    borderRadius: \"25px\",\n                                    height: \"100%\",\n                                    color: doctor ? \"#F5F5F5\" : \"#28282B\",\n                                    backgroundColor: doctor ? \"#28282B\" : \"transparent\",\n                                    transition: \"background-color 0.3s ease, color 0.3s ease\",\n                                    fontWeight: \"bold\",\n                                    cursor: \"pointer\",\n                                }}\n                                onClick={() => setDoctor(true)}\n                            >\n                                Received\n                            </button>\n\n                            {/* Rejected Button */}\n                            <button\n                                style={{\n                                    flex: 1,\n                                    border: \"none\",\n                                    borderRadius: \"25px\",\n                                    height: \"100%\",\n                                    color: doctor ? \"#28282B\" : \"#F5F5F5\",\n                                    backgroundColor: doctor ? \"transparent\" : \"#28282B\",\n                                    transition: \"background-color 0.3s ease, color 0.3s ease\",\n                                    fontWeight: \"bold\",\n                                    cursor: \"pointer\",\n                                }}\n                                onClick={() => setDoctor(false)}\n                            >\n                                Rejected\n                            </button>\n                        </div>\n                        {/* <div style={{ display: \"flex\", marginLeft: \"100px\" }}>\n                            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                <DateRangePicker\n                                    disablePast\n                                    value={value}\n                                    maxDate={getWeeksAfter(value[0], 4)}\n                                    onChange={(newValue) => {\n                                        setValue(newValue);\n                                    }}\n                                    renderInput={(startProps, endProps) => (\n                                        <React.Fragment>\n                                            <TextField {...startProps} />\n                                            <Box sx={{ mx: 2 }}> to </Box>\n                                            <TextField {...endProps} />\n                                        </React.Fragment>\n                                    )}\n                                />\n                            </LocalizationProvider>\n                        </div> */}\n                    </div>\n                    {doctor ? <RecievedTables /> : <RejectedTable />}\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default DiagnosticPatientSearch;\n"],"names":["RecievedTables","cardData","setCardData","useState","staff_id","localStorage","getItem","isopen","setIsopen","snackMessage","setSnackMessage","snackStatus","setSnackStatus","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","fetchData","async","_resp$data","resp","axiosInstance","concat","data","response","err","useEffect","React","TableContainer","component","Paper","style","background","CustomSnackBar","isOpen","message","type","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","length","map","_","index","key","colSpan","Skeleton","variant","width","height","NoAppointmentCard","text_one","slice","suid","border","scope","DiagnostCenterTableCard","id","test_id","name","first_name","middle_name","last_name","profile","profile_picture","book_date","status","test_name","test_price","CustomButton","handleClick","testID","staffID","post","JSON","stringify","String","AcceptData","buttonCss","borderRadius","isTransaprent","label","RejectData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value","RejectedTable","memoizedCardData","useMemo","propic","bookDate","testName","DiagnosticPatientSearch","setItem","document","getElementById","display","setValue","doctor","setDoctor","bgColor","setBgColor","useNavigate","Box","flexDirection","className","NavLink","to","position","top","margin","backgroundColor","overflow","boxShadow","flex","color","transition","fontWeight","cursor","onClick"],"sourceRoot":""}