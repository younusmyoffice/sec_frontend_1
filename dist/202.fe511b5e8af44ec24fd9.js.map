{"version":3,"file":"202.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticProfile/DiagnostCenterProfileInfo/DiagnostCenterProfileInfo.js"],"sourcesContent":["import { Box, Typography } from \"@mui/material\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomTextField from \"../../../../components/CustomTextField\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar\";\n\nconst DiagnosticPatientProfileInformation = () => {\n    const [textFields, setTextFields] = useState({\n        first_name: \"\",\n        email: localStorage.getItem(\"diagnostic_Email\"),\n        mobile: \"\",\n        role_id: \"4\",\n    });\n    const [errors, setErrors] = useState({});\n    const [snackOpen, setSnackOpen] = useState(false);\n    const [snackType, setSnackType] = useState(\"\");\n    const [snackMessage, setSnackMessage] = useState(\"\");\n    const [openDialog, setOpenDialog] = useState(false);\n    const staff_id = localStorage.getItem(\"diagnostic_suid\");\n    const isFormValid = Object.values(textFields).every((field) => field.trim() !== \"\");\n    const [isEditing, setIsEditing] = useState(false);\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"profile\");\n        localStorage.setItem(\"path\", \"diagnostcenterprofileinfo\");\n    }, []);\n    useEffect(() => {\n        // Define the function to fetch the profile data\n        const fetchProfileData = async () => {\n            try {\n                const response = await axiosInstance.get(\n                    `sec/hcf/getDiagnosticStaffProfile/${staff_id}`,\n                );\n                const textFields = response.data.response[0];\n\n                // Update the state with fetched data\n                setTextFields((prevState) => ({\n                    ...prevState,\n                    first_name: textFields?.first_name || \"\",\n                    last_name: textFields?.last_name || \"\",\n                    middle_name: textFields?.middle_name || \"\",\n                    mobile: textFields?.mobile || \"\",\n                }));\n            } catch (error) {\n                console.error(\"Error fetching profile data:\", error);\n            }\n        };\n\n        // Call the function\n        if (staff_id) fetchProfileData();\n    }, [staff_id]);\n\n    const fetchTestData = async () => {\n        setSnackOpen(false);\n        try {\n            await axiosInstance.post(`/sec/hcf/updateStaff`, JSON.stringify(textFields), {\n                headers: { Accept: \"Application/json\" },\n            });\n            setSnackType(\"success\");\n            setSnackMessage(\"Staff Updated Successfully\");\n            setSnackOpen(true);\n            setTimeout(() => setOpenDialog(false), 3000);\n        } catch (error) {\n            setSnackType(\"error\");\n            setSnackMessage(\"Some error occurred!!!\");\n            setSnackOpen(true);\n            console.error(error.response);\n        }\n    };\n\n    const handleInputChange = (field, value) => {\n        setTextFields((prevState) => ({ ...prevState, [field]: value }));\n        if (value.trim() !== \"\") setErrors((prevErrors) => ({ ...prevErrors, [field]: \"\" }));\n    };\n    const toggleEditMode = () => {\n        setIsEditing(!isEditing);\n    };\n    return (\n        <>\n            <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\" }}>\n                <CustomSnackBar type={snackType} message={snackMessage} isOpen={snackOpen} />\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to=\"/diagnostCenterDashboard/diagnostcenterprofile/diagnostcenterprofileinfo\">\n                        Personal Information\n                    </NavLink>\n                    {/* <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.625rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"0.9375rem\",\n                            marginLeft: \"500px\",\n                            letterSpacing: \"0.005rem\",\n                        }}\n                    >\n                        Profile ID: SRCH10001\n                    </Typography> */}\n                </nav>\n                <Box\n                    component=\"div\"\n                    sx={{ position: \"relative\", top: \"4em\", width: \"100%\", display: \"flex\" }}\n                >\n                    <Box sx={{ width: \"100%\" }}>\n                        <div style={{ textAlign: \"start\", margin: \"10px\" }}>\n                            <h5>Login info</h5>\n                            <div className=\"edit-prof\">\n                                <CustomButton\n                                    label={isEditing ? \"Cancel Edit\" : \"Edit Profile\"}\n                                    buttonCss={{\n                                        color: \"#E72B4A\",\n                                        fontSize: \"14px\",\n                                        cursor: \"pointer\",\n                                        marginLeft: \"5px\",\n                                    }}\n                                    isTransaprent={true}\n                                    handleClick={toggleEditMode}\n                                />\n                            </div>\n                            <CustomTextField\n                                label=\"Name\"\n                                isDisabled={!isEditing}\n                                CustomValue={textFields?.first_name}\n                                textcss={{ width: 280, margin: \"10px\" }}\n                                defaultValue={textFields?.first_name}\n                                helperText={\"\"}\n                                onChange={(e) => handleInputChange(\"first_name\", e.target.value)}\n                            />\n\n                            <CustomTextField\n                                label=\"Mobile No.\"\n                                isDisabled={!isEditing}\n                                CustomValue={textFields?.mobile}\n                                textcss={{ width: 280, margin: \"10px\" }}\n                                defaultValue={textFields?.mobile}\n                                helperText={\"\"}\n                                onChange={(e) => handleInputChange(\"mobile\", e.target.value)}\n                            />\n\n                            <CustomTextField\n                                label=\"Email Address\"\n                                isDisabled={true}\n                                textcss={{ width: 280, margin: \"10px\" }}\n                                CustomValue={textFields?.email}\n                                defaultValue={textFields?.email}\n                                helperText={\"\"}\n                                onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                            />\n\n                            {/* <CustomTextField\n                                label=\"Password\"\n                                placeholder=\"********\"\n                                textcss={{ width: 280, margin: \"10px\" }}\n                                defaultValue={textFields?.password}\n                                error={Boolean(errors.password)}\n                                helperText={errors.password}\n                                onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                            /> */}\n                        </div>\n                        {isEditing && (\n                            <CustomButton label=\"Save\" handleClick={() => fetchTestData()} />\n                        )}\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default DiagnosticPatientProfileInformation;\n"],"names":["DiagnosticPatientProfileInformation","textFields","setTextFields","useState","first_name","email","localStorage","getItem","mobile","role_id","errors","setErrors","snackOpen","setSnackOpen","snackType","setSnackType","snackMessage","setSnackMessage","openDialog","setOpenDialog","staff_id","isEditing","setIsEditing","Object","values","every","field","trim","useEffect","setItem","async","axiosInstance","get","concat","data","response","prevState","_objectSpread","last_name","middle_name","error","fetchProfileData","handleInputChange","value","prevErrors","React","Box","sx","display","width","height","CustomSnackBar","type","message","isOpen","className","NavLink","to","component","position","top","style","textAlign","margin","CustomButton","label","buttonCss","color","fontSize","cursor","marginLeft","isTransaprent","handleClick","toggleEditMode","CustomTextField","isDisabled","CustomValue","textcss","defaultValue","helperText","onChange","e","target","post","JSON","stringify","headers","Accept","setTimeout","fetchTestData"],"sourceRoot":""}