{"version":3,"file":"869.fe511b5e8af44ec24fd9.js","mappings":"+VAqBA,MAoLA,EApLqBA,KACjB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,IAC1BG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,IACxCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,GACjCO,EAASC,aAAaC,QAAQ,kBAepCC,EAAAA,EAAAA,WAAU,KAZSC,WACfL,GAAW,GACX,IAAI,IAAAM,EACA,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,wBAADC,OAAyBT,EAAM,aACvER,GAASc,SAAc,QAAND,EAARC,EAAUI,YAAI,IAAAL,OAAA,EAAdA,EAAgBC,WAAY,GACzC,CAAE,MAAOK,GAET,CAAE,QACEZ,GAAW,EACf,GAIAa,CAAWZ,IACZ,CAACA,KAEaa,EAAAA,EAAAA,MAajB,OACIC,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAACC,EAAAA,EAAG,CACAC,GAAI,CACAC,QAAS,OACTC,MAAO,MACPC,OAAQ,OACRC,cAAe,QAGnBN,EAAAA,cAAA,OAAKO,UAAU,gCACXP,EAAAA,cAACQ,EAAAA,GAAO,CAACC,GAAI,mCAAmC,QAChDT,EAAAA,cAACQ,EAAAA,GAAO,CAACC,GAAI,oCAAoC,SACjDT,EAAAA,cAACQ,EAAAA,GAAO,CAACC,GAAI,sCAAsC,YAGvDT,EAAAA,cAACC,EAAAA,EAAG,CACAS,UAAW,MACXR,GAAI,CACAS,SAAU,WACVC,IAAK,MACLR,MAAO,OACPD,QAAS,OACTE,OAAQ,SAGZL,EAAAA,cAACC,EAAAA,EAAG,CAACC,GAAI,CAAEE,MAAO,OAAQC,OAAQ,SAC9BL,EAAAA,cAAA,OAAKO,UAAU,IACXP,EAAAA,cAACa,EAAAA,EAAc,CAACH,UAAWI,EAAAA,EAAOC,MAAO,CAAEC,WAAY,UACnDhB,EAAAA,cAACiB,EAAAA,EAAK,CAACf,GAAI,CAAEgB,SAAU,GAAK,aAAW,gBACnClB,EAAAA,cAACmB,EAAAA,EAAS,KACNnB,EAAAA,cAACoB,EAAAA,EAAQ,CAACL,MAAO,CAAEM,WAAY,SAC3BrB,EAAAA,cAACsB,EAAAA,EAAS,KAAC,kBACXtB,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SAAQ,SACzBvB,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SAAQ,cACzBvB,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SAAQ,UACzBvB,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SAAQ,YAGjCvB,EAAAA,cAACwB,EAAAA,EAAS,KACLxC,EACDyC,MAAMC,KAAK,IAAID,MAAM3C,IAAc6C,IAAI,CAACC,EAAGC,IACvC7B,EAAAA,cAACoB,EAAAA,EAAQ,CAACU,IAAKD,GACX7B,EAAAA,cAACsB,EAAAA,EAAS,CAACS,QAAS,EAAGR,MAAM,UACzBvB,EAAAA,cAACgC,EAAAA,EAAQ,CAACC,QAAQ,cAAc7B,MAAM,OAAOC,OAAQ,QAI5C,IAAjB5B,EAAMyD,OACNlC,EAAAA,cAACoB,EAAAA,EAAQ,KACLpB,EAAAA,cAACsB,EAAAA,EAAS,CAACS,QAAS,EAAGR,MAAM,UACzBvB,EAAAA,cAACmC,EAAAA,EAAiB,CAACC,SAAU,oBAMrC3D,EACK4D,MACGzD,EAAOE,EACPF,EAAOE,EAAcA,GAExB6C,IAAKW,GACFtC,EAAAA,cAACoB,EAAAA,EAAQ,CACLU,IAAKQ,EAAIC,WACTrC,GAAI,CACA,mCAAoC,CAChCsC,OAAQ,KAIhBxC,EAAAA,cAACsB,EAAAA,EAAS,CAACZ,UAAU,KAAK+B,MAAM,OAC5BzC,EAAAA,cAAC0C,EAAAA,EAAQ,CACLC,KAAI,GAAAhD,OAAK2C,EAAIC,YACbK,SAAQ,GAAAjD,OAAK2C,EAAIM,aAGzB5C,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SACbvB,EAAAA,cAAC6C,EAAAA,EAAU,CACP9B,MAAO,CACH+B,MAAO,UACPC,WAAY,YAGfT,EAAIU,gBAGbhD,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SACbvB,EAAAA,cAAC6C,EAAAA,EAAU,CACP9B,MAAO,CACH+B,MAAO,UACPC,WAAY,YAGfT,EAAIW,sBAGbjD,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SACbvB,EAAAA,cAACkD,EAAAA,EAAY,CACTC,UAAW,CACPC,aAAc,WAElBC,WAAgC,IAApBf,EAAIgB,YAChBC,MACwB,IAApBjB,EAAIgB,YACE,SACA,UAEVE,eAAa,IACd,KACM,IACbxD,EAAAA,cAACsB,EAAAA,EAAS,CAACC,MAAM,SACbvB,EAAAA,cAACkD,EAAAA,EAAY,CACTC,UAAW,CACPC,aAAc,WAElBG,MAAOvD,EAAAA,cAAA,OAAKyD,IAAKC,EAAAA,EAAKC,IAAI,SAC1BH,eAAa,UASjDxD,EAAAA,cAAC4D,EAAAA,EAAe,CACZlD,UAAU,MACVmD,MAAOpF,EAAMyD,OACbtD,KAAMA,EACNkF,aA5IHC,CAACC,EAAOC,KAC7BpF,EAAQoF,IA4IgBnF,YAAaA,EACboF,oBAzIKF,IAC7BjF,EAAeoF,SAASH,EAAMI,OAAOC,MAAO,KAC5CxF,EAAQ,IAwIgByF,iBAAiB,uB","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDiagnosticCenter/AdminBlocked/AdminBlocked.js"],"sourcesContent":["import {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TablePagination,\n    Skeleton,\n    Typography,\n} from \"@mui/material\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport pen from \"../../../../static/images/DrImages/Pen.svg\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { Testlist } from \"../AdminLabs/AdminLabDetails/Testlist\";\n\nconst AdminBlocked = () => {\n    const [data1, setData1] = useState([]); // Data for the table\n    const [page, setPage] = useState(0); // Current page\n    const [rowsPerPage, setRowsPerPage] = useState(5); // Rows per page\n    const [loading, setLoading] = useState(true); // Loading state\n    const hcf_id = localStorage.getItem(\"hcfadmin_suid\");\n\n    // Fetching blocked staff list\n    const fetchData1 = async (hcf_id) => {\n        setLoading(true); // Set loading to true\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/getHcfStaff/${hcf_id}/blocked`);\n            setData1(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false); // Set loading to false\n        }\n    };\n\n    useEffect(() => {\n        fetchData1(hcf_id);\n    }, [hcf_id]);\n\n    const navigate = useNavigate();\n\n    // Handle page change\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    // Handle rows per page change\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0); // Reset to first page\n    };\n\n    return (\n        <>\n            <Box\n                sx={{\n                    display: \"flex\",\n                    width: \"98%\",\n                    height: \"100%\",\n                    flexDirection: \"row\",\n                }}\n            >\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to={\"/hcfadmin/diagnosticcenter/labs\"}>Labs</NavLink>\n                    <NavLink to={\"/hcfadmin/diagnosticcenter/staff\"}>Staff</NavLink>\n                    <NavLink to={\"/hcfadmin/diagnosticcenter/blocked\"}>Blocked</NavLink>\n                </nav>\n\n                <Box\n                    component={\"div\"}\n                    sx={{\n                        position: \"relative\",\n                        top: \"4em\",\n                        width: \"100%\",\n                        display: \"flex\",\n                        height: \"100%\",\n                    }}\n                >\n                    <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                        <div className=\"\">\n                            <TableContainer component={Paper} style={{ background: \"white\" }}>\n                                <Table sx={{ minWidth: 1 }} aria-label=\"simple table\">\n                                    <TableHead>\n                                        <TableRow style={{ fontWeight: \"bold\" }}>\n                                            <TableCell>Name & Details</TableCell>\n                                            <TableCell align=\"right\">Title</TableCell>\n                                            <TableCell align=\"right\">Department</TableCell>\n                                            <TableCell align=\"right\">Status</TableCell>\n                                            <TableCell align=\"right\">Action</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {loading ? (\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={5} align=\"center\">\n                                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                        ) : data1.length === 0 ? (\n                                            <TableRow>\n                                                <TableCell colSpan={5} align=\"center\">\n                                                    <NoAppointmentCard text_one={\"No Data Found\"} />\n                                                    {/* If NoAppointmentCard doesn't exist, replace with this */}\n                                                    {/* <Typography>No Data Found</Typography> */}\n                                                </TableCell>\n                                            </TableRow>\n                                        ) : (\n                                            data1\n                                                .slice(\n                                                    page * rowsPerPage,\n                                                    page * rowsPerPage + rowsPerPage,\n                                                )\n                                                .map((row) => (\n                                                    <TableRow\n                                                        key={row.first_name}\n                                                        sx={{\n                                                            \"&:last-child td, &:last-child th\": {\n                                                                border: 0,\n                                                            },\n                                                        }}\n                                                    >\n                                                        <TableCell component=\"th\" scope=\"row\">\n                                                            <Testlist\n                                                                name={`${row.first_name}`}\n                                                                staff_id={`${row.staff_id}`}\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell align=\"right\">\n                                                            <Typography\n                                                                style={{\n                                                                    color: \"#939094\",\n                                                                    fontFamily: \"Poppins\",\n                                                                }}\n                                                            >\n                                                                {row.hcf_diag_name}\n                                                            </Typography>\n                                                        </TableCell>\n                                                        <TableCell align=\"right\">\n                                                            <Typography\n                                                                style={{\n                                                                    color: \"#939094\",\n                                                                    fontFamily: \"Poppins\",\n                                                                }}\n                                                            >\n                                                                {row.lab_department_name}\n                                                            </Typography>\n                                                        </TableCell>\n                                                        <TableCell align=\"right\">\n                                                            <CustomButton\n                                                                buttonCss={{\n                                                                    borderRadius: \"6.25rem\",\n                                                                }}\n                                                                isDisabled={row.diag_status !== 1} // Disable the button if lab_status is not 1 (Inactive)\n                                                                label={\n                                                                    row.diag_status === 1\n                                                                        ? \"Active\"\n                                                                        : \"Blocked\"\n                                                                }\n                                                                isTransaprent\n                                                            />{\" \"}\n                                                        </TableCell>{\" \"}\n                                                        <TableCell align=\"right\">\n                                                            <CustomButton\n                                                                buttonCss={{\n                                                                    borderRadius: \"6.25rem\",\n                                                                }}\n                                                                label={<img src={pen} alt=\"Edit\" />}\n                                                                isTransaprent\n                                                            />\n                                                        </TableCell>\n                                                    </TableRow>\n                                                ))\n                                        )}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                component=\"div\"\n                                count={data1.length}\n                                page={page}\n                                onPageChange={handleChangePage}\n                                rowsPerPage={rowsPerPage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                                labelRowsPerPage=\"Rows per page\"\n                            />\n                        </div>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default AdminBlocked;\n"],"names":["AdminBlocked","data1","setData1","useState","page","setPage","rowsPerPage","setRowsPerPage","loading","setLoading","hcf_id","localStorage","getItem","useEffect","async","_response$data","response","axiosInstance","get","concat","data","error","fetchData1","useNavigate","React","Box","sx","display","width","height","flexDirection","className","NavLink","to","component","position","top","TableContainer","Paper","style","background","Table","minWidth","TableHead","TableRow","fontWeight","TableCell","align","TableBody","Array","from","map","_","index","key","colSpan","Skeleton","variant","length","NoAppointmentCard","text_one","slice","row","first_name","border","scope","Testlist","name","staff_id","Typography","color","fontFamily","hcf_diag_name","lab_department_name","CustomButton","buttonCss","borderRadius","isDisabled","diag_status","label","isTransaprent","src","pen","alt","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value","labelRowsPerPage"],"sourceRoot":""}