{"version":3,"file":"716.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticManage/DiagnosticCenterAuditLog/diagnosticCenterAuditLog.js"],"sourcesContent":["import {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Typography,\n    TablePagination,\n    Skeleton,\n} from \"@mui/material\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport { AuditCards } from \"../../../DiagnosticCenter/DiagnosticManage/DiagnosticCenterAuditLog/AuditCards\";\nimport { formatDate } from \"../../../../constants/const\";\n\nconst getStatusLabel = (status) => {\n    return status === 1 ? \"Active\" : \"Inactive\";\n};\n\nconst diagnosticCenterAuditLog = () => {\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"manage\");\n        localStorage.setItem(\"path\", \"diagnosticCenterAuditLog\");\n    }, []);\n\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const diag_id = localStorage.getItem(\"diagnostic_suid\");\n\n    const fetchData = async () => {\n        try {\n            const response = await axiosInstance(`sec/hcf/DiagAuditlogs/${diag_id}`);\n            setData(response?.data?.response || []);\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const cellStyle = {\n        color: \"#939094\",\n        textAlign: \"right\",\n        fontFamily: \"Poppins\",\n        fontSize: \"1rem\",\n        fontStyle: \"normal\",\n        fontWeight: \"400\",\n        lineHeight: \"0.9375rem\",\n        letterSpacing: \"0.005rem\",\n    };\n    const actionidStyle = {\n        color: \"#E72B4A\",\n        textAlign: \"right\",\n        fontFamily: \"Poppins\",\n        fontSize: \"1rem\",\n        fontStyle: \"normal\",\n        fontWeight: \"400\",\n        lineHeight: \"0.9375rem\",\n        letterSpacing: \"0.005rem\",\n    };\n\n    return (\n        <>\n            <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\", flexDirection: \"row\" }}>\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to=\"/diagnostCenterDashboard/dignosticCentermanage/diagnostsalesactivities\">\n                        Sales Activities\n                    </NavLink>\n                    <NavLink to=\"/diagnostCenterDashboard/dignosticCentermanage/diagnostcenterauditlog\">\n                        Audit Logs\n                    </NavLink>\n                </nav>\n\n                <Box sx={{ position: \"relative\", top: \"4em\", width: \"100%\", height: \"100%\" }}>\n                    <TableContainer component={Paper} style={{ background: \"white\" }}>\n                        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name & Details</TableCell>\n                                    <TableCell align=\"right\">Status</TableCell>\n                                    <TableCell align=\"right\">Action ID</TableCell>\n                                    <TableCell align=\"right\">Action</TableCell>\n                                    <TableCell align=\"right\">Timestamp</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {loading ? (\n                                    Array.from({ length: 5 }).map((_, index) => (\n                                        <TableRow key={index}>\n                                            <TableCell><Skeleton variant=\"text\" width=\"80%\" /></TableCell>\n                                            <TableCell align=\"right\"><Skeleton variant=\"text\" width=\"50%\" /></TableCell>\n                                            <TableCell align=\"right\"><Skeleton variant=\"text\" width=\"50%\" /></TableCell>\n                                            <TableCell align=\"right\"><Skeleton variant=\"text\" width=\"50%\" /></TableCell>\n                                            <TableCell align=\"right\"><Skeleton variant=\"text\" width=\"70%\" /></TableCell>\n                                        </TableRow>\n                                    ))\n                                ) : (\n                                    data\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                        .map((row) => (\n                                            <TableRow key={row.name}>\n                                                <TableCell>\n                                                    <AuditCards\n                                                        name={row.name}\n                                                        specialist={row.specialist}\n                                                        Id={row.user_id}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={cellStyle}>\n                                                    {getStatusLabel(row.status)}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={actionidStyle}>\n                                                        {row.action_id || \"NA\"}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={cellStyle}>\n                                                    {row.action}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={cellStyle}>\n                                                    {formatDate(row.time)}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                )}\n                            </TableBody>\n                        </Table>\n                        <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={data.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                    </TableContainer>\n                    \n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default diagnosticCenterAuditLog;\n"],"names":["diagnosticCenterAuditLog","useEffect","localStorage","setItem","data","setData","useState","loading","setLoading","error","setError","page","setPage","rowsPerPage","setRowsPerPage","diag_id","getItem","async","_response$data","response","axiosInstance","concat","fetchData","cellStyle","color","textAlign","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","letterSpacing","actionidStyle","React","Box","sx","display","width","height","flexDirection","className","NavLink","to","position","top","TableContainer","component","Paper","style","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","length","map","_","index","key","Skeleton","variant","slice","row","name","AuditCards","specialist","Id","user_id","status","action_id","action","formatDate","time","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}