{"version":3,"file":"740.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminManage/AdminOverview/AdminOverview.js"],"sourcesContent":["import {\n    Box,\n    Paper,\n    Stack,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    Skeleton,\n    TextField,\n    TablePagination,\n} from \"@mui/material\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport SearchBox from \"../../../../components/searchbox/SearchBox\";\nimport axios from \"axios\";\nimport { baseURL } from \"../../../../constants/const\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { formatDate, currencysign } from \"../../../../constants/const\";\n\nconst AdminOverview = () => {\n    const [data1, setData1] = useState([]); // For overview count\n    const [allearning, setAllearning] = useState([]); // For earning list\n    const [loading, setLoading] = useState(true); // Loading state for fetching data\n    const [error, setError] = useState(null); // Error state\n    const [page, setPage] = useState(0); // Pagination state\n    const [rowsPerPage, setRowsPerPage] = useState(5); // Rows per page\n    const hcf_id = localStorage.getItem('hcfadmin_suid'); // Example value; replace with your logic to get hcf_id\nuseEffect(() => {\n        document.getElementById(\"location-search-container\").style.display = \"none\";\n    \n}, [])\n\n    // Fetching API for overview count\n    const fetchData1 = async () => {\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/HcfSaleActivityCount/${hcf_id}`);\n            setData1(response?.data || {});\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Fetching API for all earning list\n    const hcfAllEarningList = async () => {\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/hcfAllEarningList/${hcf_id}`);\n            setAllearning(response?.data?.response || []);\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData1(hcf_id); // Fetch overview data\n        hcfAllEarningList(hcf_id); // Fetch all earning list\n    }, [hcf_id]);\n\n    // Handling pagination\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage); // Update the current page\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10)); // Set rows per page\n        setPage(0); // Reset to first page\n    };\n\n    return (\n        <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\", flexDirection: \"row\" }}>\n            <nav className=\"NavBar-Container-Appoinement\">\n                {/* Navigation links */}\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminsale\"}>Sale Activities</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminoverview\"}>Overview</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminbooking\"}>Bookings</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminpayout\"}>Payout</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminauditlog\"}>Audit Logs</NavLink>\n            </nav>\n\n            <Box component={\"div\"} sx={{ position: \"relative\", top: \"4em\", width: \"100%\", display: \"flex\", height: \"100%\" }}>\n                <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                    <div className=\"Earning-container\">\n                        <Box sx={{ display: \"flex\", justifyContent: \"space-between\", width: \"100%\" }}>\n                            {/* Display Revenue Cards */}\n                            {loading ? (\n                                Array(3).fill().map((_, index) => (\n                                    <div className=\"Earn1\" key={index}>\n                                        <Skeleton variant=\"text\" width={100} height={58} />\n                                        <Skeleton variant=\"text\" width={120} height={12} />\n                                        <Skeleton variant=\"rectangular\" width={80} height={24} />\n                                    </div>\n                                ))\n                            ) : (\n                                <>\n                                    <div className=\"Earn1\">\n                                        <Typography sx={{ fontSize: \"58px\", fontWeight: \"600\", color: \"#E72B4A\" }}>\n                                        â‚¹{data1.Consultation_Revenue || 0}\n                                        </Typography>\n                                        <Typography sx={{ fontSize: \"12px\", fontWeight: \"500\", color: \"#AEAAAE\" }}>\n                                            Consultation Revenue\n                                        </Typography>\n                                        <Typography sx={{ background: \"#EFEFEF\", borderRadius: \"15px\", p: 1, fontSize: \"15px\" }}>\n                                            {data1.consultationItems || 0} Items\n                                        </Typography>\n                                    </div>\n                                    <div className=\"Earn1\">\n                                        <Typography sx={{ fontSize: \"58px\", fontWeight: \"600\", color: \"#E72B4A\" }}>\n                                        â‚¹{data1.Diagnostic_Revenue || 0}\n                                        </Typography>\n                                        <Typography sx={{ fontSize: \"12px\", fontWeight: \"500\", color: \"#AEAAAE\" }}>\n                                            Diagnostic Revenue\n                                        </Typography>\n                                        <Typography sx={{ background: \"#EFEFEF\", borderRadius: \"15px\", p: 1, fontSize: \"15px\" }}>\n                                            {data1.diagnosticItems || 0} Items\n                                        </Typography>\n                                    </div>\n                                    <div className=\"Earn1\">\n                                        <Typography sx={{ fontSize: \"58px\", fontWeight: \"600\", color: \"#E72B4A\" }}>\n                                        â‚¹{data1.Total || 0}\n                                        </Typography>\n                                        <Typography sx={{ fontSize: \"12px\", fontWeight: \"500\", color: \"#AEAAAE\" }}>\n                                            Total Earning\n                                        </Typography>\n                                    </div>\n                                </>\n                            )}\n                        </Box>\n                    </div>\n\n                    <div className=\"Monthly-Earnings\">\n                        {loading ? (\n                            <Skeleton variant=\"text\" width={200} height={40} />\n                        ) : (\n                            <Typography component=\"h2\" sx={{ fontSize: \"25px\", fontWeight: \"600\", color: \"#313033\", marginTop: \"55px\", marginBottom: \"20px\" }}>\n                                Monthly Earnings\n                            </Typography>\n                        )}\n                    </div>\n\n                    \n                    {/* Table for displaying earnings */}\n                    <TableContainer component={Paper} sx={{ backgroundColor: \"#ffff\" }}>\n                        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"center\">Date</TableCell>\n                                    <TableCell align=\"center\">Account No</TableCell>\n                                    <TableCell align=\"center\">Amount</TableCell>\n                                    <TableCell align=\"center\">Status</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {loading ? (\n                                    Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                        <TableRow key={index}>\n                                            <TableCell colSpan={5} align=\"center\">\n                                                <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                            </TableCell>\n                                        </TableRow>\n                                    ))\n                                \n                                ) : !allearning.activities || allearning.activities.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={4} align=\"center\">\n                                            <NoAppointmentCard text_one={\"No Data Found\"} />\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    allearning.activities.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                                        <TableRow key={row.TransactionID}>\n                                            <TableCell align=\"center\">{formatDate(row.date)}</TableCell>\n                                            <TableCell align=\"center\">{row.accountNo}</TableCell>\n                                            <TableCell align=\"center\">â‚¹{row.amount}</TableCell>\n                                            <TableCell align=\"center\">{row.status}</TableCell>\n                                        </TableRow>\n                                    ))\n                                )}\n                            </TableBody>\n                        </Table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]} // Options for rows per page\n                            component=\"div\"\n                            count={allearning.activities ? allearning.activities.length : 0}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                        />\n                    </TableContainer>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default AdminOverview;\n"],"names":["AdminOverview","data1","setData1","useState","allearning","setAllearning","loading","setLoading","error","setError","page","setPage","rowsPerPage","setRowsPerPage","hcf_id","localStorage","getItem","useEffect","document","getElementById","style","display","async","response","axiosInstance","get","concat","data","fetchData1","_response$data","hcfAllEarningList","React","Box","sx","width","height","flexDirection","className","NavLink","to","component","position","top","justifyContent","Array","fill","map","_","index","key","Skeleton","variant","Typography","fontSize","fontWeight","color","Consultation_Revenue","background","borderRadius","p","consultationItems","Diagnostic_Revenue","diagnosticItems","Total","marginTop","marginBottom","TableContainer","Paper","backgroundColor","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","from","colSpan","activities","length","slice","row","TransactionID","formatDate","date","accountNo","amount","status","NoAppointmentCard","text_one","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}