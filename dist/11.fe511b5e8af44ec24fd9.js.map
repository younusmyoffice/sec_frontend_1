{"version":3,"file":"11.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/DoctorModule/DoctorStatistics/DoctorBookingHistory/DoctorBookingHistory.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination,\n    Skeleton,\n} from \"@mui/material\";\nimport DoctorStatisticsNavbar from \"../../CustomDoctorComponent/DoctorStatisticsNavbar/DoctorStatisticsNavbar\";\nimport { PaginationCard } from \"../../../PatientDashboard/PatientAppointment/PatientCards\";\nimport { DoctorBookingCard } from \"./DoctorBookingCard\";\nimport CustomButton from \"../../../components/CustomButton\";\nimport axiosInstance from \"../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { currencysign, formatOnlyDate } from \"../../../constants/const\";\n\nconst DoctorBookingHistory = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"statistics\");\n        localStorage.setItem(\"path\", \"doctorBookingHistory\");\n        fetchData();\n    }, []);\n\n    const fetchData = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.post(\n                \"/sec/doctor/DocAppointmentHistoryId\",\n                JSON.stringify({\n                    doctor_id: localStorage.getItem(\"doctor_suid\"),\n                }),\n            );\n            setData(response?.data?.response || []);\n        } catch (error) {\n            console.log(error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const displayedData = data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n\n    return (\n        <Box sx={{ display: \"flex\", width: \"98%\", height: \"100%\", height: \"90%\" }}>\n            <DoctorStatisticsNavbar />\n            <Box\n                component={\"div\"}\n                sx={{\n                    position: \"relative\",\n                    top: \"4em\",\n                    width: \"100%\",\n                    display: \"flex\",\n                    height: \"100%\",\n                }}\n            >\n                <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                    <div>\n                        <TableContainer component={Paper} style={{ background: \"white\" }}>\n                            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Name & Details</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                        <TableCell align=\"right\">Date & Time</TableCell>\n                                        <TableCell align=\"right\">Package</TableCell>\n                                        <TableCell align=\"right\">Amount</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {loading ? (\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell>\n                                                    <Skeleton\n                                                        variant=\"rectangular\"\n                                                        width=\"100%\"\n                                                        height={30}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={80} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={100} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={120} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={60} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : data.length === 0 ? (\n                                        <TableRow>\n                                            <TableCell colSpan={5} align=\"center\">\n                                                <NoAppointmentCard text_one={\"No Data Found\"} />{\" \"}\n                                            </TableCell>\n                                        </TableRow>\n                                    ) : (\n                                        displayedData.map((row) => (\n                                            <TableRow key={row.appointment_id}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    <DoctorBookingCard\n                                                        name={row.name}\n                                                        patientId={row.patient_id}\n                                                        Id={row.appointment_id}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\">{row.status}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    {`${row.appointment_date\n                                                        ? formatOnlyDate(row.appointment_date)\n                                                        : \"N/A\"} | ${row.appointment_time}`}\n                                                </TableCell>\n\n                                                <TableCell align=\"right\">{`${row.plan_name} | ${row.plan_duration}`}</TableCell>\n                                                <TableCell align=\"right\" sx={{ color: \"#E72B4A\" }}>\n                                                    {`${currencysign}${row?.amount || \"NA\"}`}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    )}\n                                </TableBody>\n                            </Table>\n                            <TablePagination\n                                component=\"div\"\n                                count={data.length}\n                                page={page}\n                                onPageChange={handleChangePage}\n                                rowsPerPage={rowsPerPage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                            />\n                        </TableContainer>\n                    </div>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default DoctorBookingHistory;\n"],"names":["DoctorBookingHistory","data","setData","useState","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","useEffect","localStorage","setItem","fetchData","async","_response$data","response","axiosInstance","post","JSON","stringify","doctor_id","getItem","error","displayedData","slice","React","Box","sx","display","width","height","DoctorStatisticsNavbar","component","position","top","TableContainer","Paper","style","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","map","_","index","key","Skeleton","variant","length","colSpan","NoAppointmentCard","text_one","row","appointment_id","scope","DoctorBookingCard","name","patientId","patient_id","Id","status","concat","appointment_date","formatOnlyDate","appointment_time","plan_name","plan_duration","color","currencysign","amount","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}