{"version":3,"file":"305.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticManage/DiagnostcCenterStaff/DiagnosticSalesActivities.js","webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminManage/AdminManageSale/SaleActivityCard.js"],"sourcesContent":["import {\n    Box,\n    Typography,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    Skeleton,\n} from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomCheckBox from \"../../../../components/CustomCheckBox\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport { SaleActivityCard } from \"../../../HCFAdmin/AdminManage/AdminManageSale/SaleActivityCard\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport pic from \"../../../../static/images/DrImages/patient_alter.png\";\nimport { currencysign, formatDate } from \"../../../../constants/const\";\n\nconst DiagnosticSalesActivities = () => {\n    const [data1, setData1] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [allChecked, setAllChecked] = useState(true);\n    const [completedChecked, setCompletedChecked] = useState(false);\n    const [cancelledChecked, setCancelledChecked] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    const staff_id = localStorage.getItem(\"diagnostic_suid\");\n\n    const fetchData = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(\n                `sec/hcf/${staff_id}/diagnosticManageSaleActivity`,\n            );\n            const responseData = response?.data?.response || [];\n            setData1(responseData);\n            setFilteredData(responseData); // Set initial filtered data to all data\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const handleCheckBoxChange = (checkboxType) => {\n        let newFilteredData;\n        setAllChecked(false);\n        setCompletedChecked(false);\n        setCancelledChecked(false);\n\n        switch (checkboxType) {\n            case \"all\":\n                newFilteredData = data1;\n                setAllChecked(true);\n                break;\n            case \"completed\":\n                newFilteredData = data1.filter((item) => item.status === \"completed\");\n                setCompletedChecked(true);\n                break;\n            case \"cancelled\":\n                newFilteredData = data1.filter((item) => item.status === \"cancelled\");\n                setCancelledChecked(true);\n                break;\n            default:\n                newFilteredData = data1;\n        }\n        setFilteredData(newFilteredData);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <>\n            <div className=\"sales-container\">\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to=\"/diagnostCenterDashboard/dignosticCentermanage/diagnostsalesactivities\">\n                        Sales Activities\n                    </NavLink>\n                    <NavLink to=\"/diagnostCenterDashboard/dignosticCentermanage/diagnostcenterauditlog\">\n                        Audit Logs\n                    </NavLink>\n                </nav>\n            </div>\n\n            <div className=\"checkboxes-from-to\">\n                <div className=\"check-box\">\n                    <div className=\"check-all\">\n                        <CustomCheckBox\n                            checked={allChecked}\n                            onChange={() => handleCheckBoxChange(\"all\")}\n                        />\n                        <Typography\n                            style={{ fontFamily: \"poppins\", fontSize: \"14px\", fontWeight: \"500\" }}\n                        >\n                            All\n                        </Typography>\n                    </div>\n                    <div className=\"check-all\">\n                        <CustomCheckBox\n                            checked={completedChecked}\n                            onChange={() => handleCheckBoxChange(\"completed\")}\n                        />\n                        <Typography\n                            style={{ fontFamily: \"poppins\", fontSize: \"14px\", fontWeight: \"500\" }}\n                        >\n                            Completed\n                        </Typography>\n                    </div>\n                    <div className=\"check-all\">\n                        <CustomCheckBox\n                            checked={cancelledChecked}\n                            onChange={() => handleCheckBoxChange(\"cancelled\")}\n                        />\n                        <Typography\n                            style={{ fontFamily: \"poppins\", fontSize: \"14px\", fontWeight: \"500\" }}\n                        >\n                            Cancelled\n                        </Typography>\n                    </div>\n                </div>\n            </div>\n\n            <Box\n                sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    border: \"1px solid #E6E1E5\",\n                    marginTop: \"1rem\",\n                }}\n            >\n                <TableContainer component={Paper} style={{ background: \"white\" }}>\n                    <Table sx={{ minWidth: 1 }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Doctor Name/ID</TableCell>\n                                <TableCell align=\"right\">Status</TableCell>\n                                <TableCell align=\"right\">Test Name</TableCell>\n                                <TableCell align=\"right\">Price</TableCell>\n                                <TableCell align=\"right\">Date & Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {loading ? (\n                                Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell>\n                                            <Skeleton variant=\"text\" width=\"80%\" />\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Skeleton variant=\"text\" width=\"50%\" />\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Skeleton variant=\"text\" width=\"60%\" />\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Skeleton variant=\"text\" width=\"40%\" />\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Skeleton variant=\"text\" width=\"70%\" />\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                            ) : filteredData.length === 0 ? (\n                                <TableRow>\n                                    <TableCell colSpan={5} align=\"center\">\n                                        <NoAppointmentCard text_one={\"No Data Found\"} />\n                                    </TableCell>\n                                </TableRow>\n                            ) : (\n                                filteredData\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map(\n                                        ({\n                                            suid,\n                                            profile_picture,\n                                            first_name,\n                                            middle_name,\n                                            last_name,\n                                            status,\n                                            updated_at,\n                                            test_name,\n                                            test_price,\n                                        }) => (\n                                            <TableRow key={suid}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    <SaleActivityCard\n                                                        profile_picture={profile_picture || pic}\n                                                        name={`${first_name} ${middle_name} ${last_name}`}\n                                                        user_id={suid}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Typography\n                                                        sx={{\n                                                            color: \"#939094\",\n                                                            fontFamily: \"Poppins\",\n                                                            fontSize: \"0.875rem\",\n                                                            fontWeight: \"500\",\n                                                        }}\n                                                    >\n                                                        {status}\n                                                    </Typography>\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Typography\n                                                        sx={{\n                                                            color: \"#939094\",\n                                                            fontFamily: \"Poppins\",\n                                                            fontSize: \"0.875rem\",\n                                                            fontWeight: \"500\",\n                                                        }}\n                                                    >\n                                                        {test_name}\n                                                    </Typography>\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Typography\n                                                        sx={{\n                                                            color: \"#939094\",\n                                                            fontFamily: \"Poppins\",\n                                                            fontSize: \"0.875rem\",\n                                                            fontWeight: \"500\",\n                                                        }}\n                                                    >\n                                                        {`${currencysign}${test_price}`}\n                                                    </Typography>\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Typography\n                                                        sx={{\n                                                            color: \"#939094\",\n                                                            fontFamily: \"Poppins\",\n                                                            fontSize: \"0.875rem\",\n                                                            fontWeight: \"500\",\n                                                        }}\n                                                    >\n                                                        {formatDate(updated_at)}\n                                                    </Typography>\n                                                </TableCell>\n                                            </TableRow>\n                                        ),\n                                    )\n                            )}\n                        </TableBody>\n                    </Table>\n                    <TablePagination\n                        rowsPerPageOptions={[5, 10, 15]}\n                        component=\"div\"\n                        count={filteredData.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                </TableContainer>\n            </Box>\n        </>\n    );\n};\n\nexport default DiagnosticSalesActivities;\n","import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport img from \"../../../../static/images/DrImages/image10.png\";\n\nexport const SaleActivityCard = ({ name, user_id, profile_picture }) => {\n    return (\n        <>\n            <Box sx={{ display: \"flex\" }}>\n                <Box\n                    component={\"div\"}\n                    sx={{ height: \"3.44331rem\", width: \"3.44331rem\", borderRadius: \"0.5rem\" }}\n                >\n                    <img\n                        src={profile_picture || img}\n                        style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}\n                    />\n                </Box>\n                <Box\n                    sx={{\n                        marginLeft: \"2%\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.875rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.375rem\",\n                            letterSpacing: \"0.00438rem\",\n                        }}\n                    >\n                        {name || \"NA\"} \n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.625rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"0.9375rem\",\n                            letterSpacing: \"0.005rem\",\n                        }}\n                    >\n                        User ID : {user_id || \"NA\"}\n                    </Typography>\n                </Box>\n            </Box>\n        </>\n    );\n};\n"],"names":["DiagnosticSalesActivities","data1","setData1","useState","filteredData","setFilteredData","loading","setLoading","error","setError","allChecked","setAllChecked","completedChecked","setCompletedChecked","cancelledChecked","setCancelledChecked","page","setPage","rowsPerPage","setRowsPerPage","staff_id","localStorage","getItem","useEffect","async","_response$data","response","axiosInstance","get","concat","responseData","data","fetchData","handleCheckBoxChange","checkboxType","newFilteredData","filter","item","status","React","className","NavLink","to","CustomCheckBox","checked","onChange","Typography","style","fontFamily","fontSize","fontWeight","Box","sx","width","height","border","marginTop","TableContainer","component","Paper","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","map","_","index","key","Skeleton","variant","length","colSpan","NoAppointmentCard","text_one","slice","_ref","suid","profile_picture","first_name","middle_name","last_name","updated_at","test_name","test_price","scope","SaleActivityCard","pic","name","user_id","color","currencysign","formatDate","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value","display","borderRadius","src","img","marginLeft","flexDirection","justifyContent","fontStyle","lineHeight","letterSpacing"],"sourceRoot":""}