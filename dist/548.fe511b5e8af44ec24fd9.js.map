{"version":3,"file":"548.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDiagnosticCenter/AdminStaff/StaffCards.js","webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDiagnosticCenter/AdminStaff/AdminStaff.js"],"sourcesContent":["import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nexport const StaffCards = ({ name, staff_id, lab_id }) => {\n    return (\n        <>\n            <Box sx={{ display: \"flex\" }}>\n                <Box\n                    sx={{\n                        marginLeft: \"2%\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.875rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.375rem\",\n                            letterSpacing: \"0.00438rem\",\n                        }}\n                    >\n                        {name}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.625rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"0.9375rem\",\n                            letterSpacing: \"0.005rem\",\n                        }}\n                    >\n                        Lab id : {`${staff_id} ${lab_id}`}\n                    </Typography>\n                </Box>\n            </Box>\n        </>\n    );\n};\n","import {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Skeleton,\n    Typography,\n    TablePagination,\n} from \"@mui/material\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport { StaffCards } from \"./StaffCards\";\nimport CustomModal from \"../../../../components/CustomModal\";\nimport CustomTextField from \"../../../../components/CustomTextField\";\nimport Edittaff from \"./Edittaff\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport CustomDropdown from \"../../../../components/CustomDropdown\";\nimport pen from \"../../../../static/images/DrImages/Pen.svg\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport DoneIcon from \"@mui/icons-material/Done\";\nimport CustomOTPInput from \"../../../../components/OTPInput\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar\";\n\nconst AdminStaff = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [selectedDesignation, setSelectedDesignation] = useState(\"\"); // State for Designation dropdown\n    const [selectedDepartment, setSelectedDepartment] = useState(\"\"); // State for Department dropdown\n    const [snackType, setSnackType] = useState(\"\");\n    const [snackMessage, setSnackMessage] = useState(\"\");\n    const [snackOpen, setSnackOpen] = useState(false);\n    const [labDepartments, setLabDepartments] = useState([]);\n    const [staffDesignation, setStaffDesignation] = useState([]);\n    const [isFieldsFilled, setIsFieldsFilled] = useState(false);\n    const [textFields, setTextFields] = useState({\n        first_name: \"\",\n        email: \"\",\n        mobile: \"\",\n        role_id: \"4\",\n        password: \"\",\n        staff_designation: \"\",\n        hcf_id: localStorage.getItem(\"hcfadmin_suid\"),\n        lab_department_id: \"\",\n    });\n    const [openEditDialog, setOpenEditDialog] = useState(false);\n    const [isEditFilled, setIsEditFilled] = useState(false);\n    const [editdata, setEditdata] = useState({\n        staff_id: null,\n        first_name: null,\n        hcf_id: localStorage.getItem(\"hcfadmin_suid\"),\n        email: null,\n        mobile: null,\n        role_id: \"4\",\n        password: null,\n        added_by: null,\n        staff_designation: null,\n        dept_exam_id: null,\n    });\n    const [password, setPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(false);\n    const [currentPage, setCurrentPage] = useState(0); // Current page starts at 0\n    const [rowsPerPage, setRowsPerPage] = useState(5); // Rows per page\n    const [verifiedEmail, setVerifiedEmail] = useState(false);\n    const [verifiedMobile, setVerifiedMobile] = useState(false);\n    const [isEmailModalOtp, setIsEmailModalOtp] = useState(false);\n    const [email, setEmail] = useState(\"\"); // To store the email input\n    const [mob, setMob] = useState(\"\"); //to store the mobile input\n    const [isMobModalOtp, setIsMobModalOtp] = useState(false);\n    const [otp, setOtp] = useState(null);\n    const [emailOtp, setEmailOtp] = useState({\n        email: \"\",\n        mobile: \"\",\n        role_id: \"4\",\n        hcf_id: localStorage.getItem(\"hcfadmin_suid\"),\n        register_with_email: \"true\",\n    });\n    const [mobOtp, setMobOtp] = useState({\n        email: \"\",\n        mobile: \"\",\n        role_id: \"4\",\n        hcf_id: localStorage.getItem(\"hcfadmin_suid\"),\n        register_with_email: \"false\",\n    });\n    const [verifyEmail, setVerifyEmail] = useState({\n        email: emailOtp.email, // First state\n        activation_code: otp, // Second state\n    });\n    const [verifyMob, setVerifyMob] = useState({\n        mobile: mobOtp.mobile,\n        otp_code: otp,\n    });\n    const hcf_id = localStorage.getItem(\"hcfadmin_suid\");\n\n    // ------------------------------------------creating staff handler------------------------------------------//\n    useEffect(() => {\n        checkFields(textFields); // Ensure fields are checked on each textFields update\n    }, [textFields]);\n    const fetchTestData = async () => {\n        setSnackOpen(false);\n        try {\n            await axiosInstance.post(`/sec/hcf/addStaff`, JSON.stringify(textFields), {\n                headers: { Accept: \"Application/json\" },\n            });\n            await setSnackType(\"success\");\n            await setSnackMessage(\"staff Crested Succesfully\");\n            setSnackOpen(true);\n            setTimeout(() => setOpenDialog(false), 3000);\n        } catch (error) {\n            alert(\"Fill the details properly\");\n            console.error(error.response);\n            await setSnackType(\"error\");\n            await setSnackMessage(\"some error occured!!!\");\n            setSnackOpen(true);\n        }\n    };\n    const checkFields = (formData) => {\n        const isFilled =\n            formData.first_name &&\n            formData.email &&\n            formData.mobile &&\n            formData.role_id &&\n            formData.password &&\n            formData.hcf_diag_name &&\n            formData.lab_department_id &&\n            formData.hcf_id; // Check if hcf_id is set\n\n        setIsFieldsFilled(isFilled);\n    };\n\n    //getting staff list\n\n    const fetchData = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/getHcfStaff/${hcf_id}`);\n            setData(response?.data?.response || []);\n        } catch (error) {\n            console.log(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [hcf_id]);\n\n    // Fetching lab departments\n\n    const fetchLabs = async () => {\n        try {\n            const response = await axiosInstance.get(`/sec/labDepartments`);\n            setLabDepartments(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        }\n    };\n\n    useEffect(() => {\n        fetchLabs();\n    }, []);\n\n    // Transform the department data for the dropdown\n    const departmentItems = labDepartments.map((department) => ({\n        id: department.lab_department_id,\n        name: department.lab_department_name,\n    }));\n\n    const handleDropdownChange = (selectedDepartment) => {\n        const departmentId = departmentItems.find((item) => item.name === selectedDepartment)?.id;\n        console.log(departmentId, \"this lab id\");\n        setSelectedDepartment(selectedDepartment);\n\n        setTextFields((prevState) => ({\n            ...prevState,\n            lab_department_id: String(departmentId), // Ensure lab_dept_id is stored as a string\n        }));\n    };\n\n    // Fetching staff Designation\n    const fetchDesignation = async () => {\n        try {\n            const response = await axiosInstance.get(`/sec/staffDesignations`);\n            setStaffDesignation(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        }\n    };\n\n    useEffect(() => {\n        fetchDesignation();\n    }, []);\n\n    // Transform the department data for the dropdown\n    const designationItems = staffDesignation.map((designation) => ({\n        id: designation.staff_designation_id,\n        name: designation.staff_designation_name,\n    }));\n\n    const handleDropdownChange1 = (selectedDepartment) => {\n        const designationId = designationItems.find((item) => item.name === selectedDepartment)?.id;\n        console.log(designationId, \"this staff id\");\n        setSelectedDesignation(selectedDepartment);\n\n        setTextFields((prevState) => ({\n            ...prevState,\n            staff_designation: String(designationId), // Ensure lab_dept_id is stored as a string\n        }));\n    };\n\n    // Handler for Create Password\n    const handlePasswordChange = (event) => {\n        setPassword(event.target.value);\n        if (confirmPassword && event.target.value !== confirmPassword) {\n            setPasswordError(true); // Trigger error if they don't match\n        } else {\n            setPasswordError(false);\n        }\n    };\n\n    // Handler for Confirm Password\n    const handleConfirmPasswordChange = (event) => {\n        setConfirmPassword(event.target.value);\n        if (event.target.value !== password) {\n            setPasswordError(true); // Trigger error if they don't match\n        } else {\n            setPasswordError(false);\n        }\n    };\n\n    // Calculate total pages\n    const totalPages = Math.ceil(data.length / rowsPerPage);\n\n    // Slice the data based on the current page\n    const displayedData = data.slice(\n        currentPage * rowsPerPage,\n        currentPage * rowsPerPage + rowsPerPage,\n    );\n\n    //edit staff handler\n    const handleEdit = (data) => {\n        // setSelectedTest(data); // Set the selected test data\n        setEditdata({\n            staff_id: String(data.staff_id), // Convert sub_exam_id to a string\n            first_name: data.first_name,\n            hcf_id: hcf_id,\n            email: data.email,\n            mobile: String(data.mobile),\n            role_id: \"4\",\n            added_by: \"hcf admin\",\n            hcf_diag_name: data.hcf_diag_name,\n            dept_exam_id: String(data.dept_exam_id),\n        });\n        setOpenEditDialog(true); // Open the modal\n    };\n\n    const checkEditFields = (formData) => {\n        const isFilled =\n            formData.staff_id &&\n            formData.first_name &&\n            formData.email &&\n            formData.mobile &&\n            formData.role_id &&\n            formData.password &&\n            formData.hcf_diag_name &&\n            formData.dept_exam_id &&\n            formData.hcf_id; // Check if hcf_id is set\n\n        setIsEditFilled(isFilled);\n    };\n\n    useEffect(() => {\n        checkEditFields(editdata); // Ensure fields are checked on each testdata update\n    }, [editdata]);\n\n    const UpdateStaff = async () => {\n        setSnackOpen(false);\n        try {\n            await axiosInstance.post(`/sec/hcf/updateStaff`, JSON.stringify(editdata), {\n                headers: { Accept: \"Application/json\" },\n            });\n            await setSnackType(\"success\");\n            await setSnackMessage(\"Staff Update Succesfully\");\n            setSnackOpen(true);\n            setTimeout(() => setOpenEditDialog(false), 3000);\n        } catch (error) {\n            alert(\"Fill the details properly\");\n            console.error(error.response);\n            await setSnackType(\"error\");\n            await setSnackMessage(\"some error occured!!!\");\n            setSnackOpen(true);\n        }\n    };\n    // Transform the department data for the dropdown\n    const EditdepartmentItems = labDepartments.map((department) => ({\n        id: department.lab_department_id,\n        name: department.lab_department_name,\n    }));\n\n    const handleEditropdownChange = (selectedDepartment) => {\n        const departmentId = EditdepartmentItems.find(\n            (item) => item.name === selectedDepartment,\n        )?.id;\n        console.log(departmentId, \"this lab id\");\n        setSelectedDepartment(selectedDepartment);\n\n        setEditdata((prevState) => ({\n            ...prevState,\n            lab_department_id: String(departmentId), // Ensure lab_dept_id is stored as a string\n        }));\n    };\n    // Transform the department data for the dropdown\n    const EditdesignationItems = staffDesignation.map((designation) => ({\n        id: designation.staff_designation_id,\n        name: designation.staff_designation_name,\n    }));\n\n    const handleEditDropdownChange1 = (selectedDepartment) => {\n        const designationId = EditdesignationItems.find(\n            (item) => item.name === selectedDepartment,\n        )?.name;\n        console.log(designationId, \"this staff id\");\n        setSelectedDesignation(selectedDepartment);\n\n        setEditdata((prevState) => ({\n            ...prevState,\n            hcf_diag_name: String(designationId), // Ensure lab_dept_id is stored as a string\n        }));\n    };\n\n    // -----------------------------------------email and mobile otp verfication handler start here-------------------------------------//\n\n    // triggering otp for email verification\n    const emailRegister = async () => {\n        setSnackOpen(false); // Close the snackbar before the request\n        try {\n            await axiosInstance.post(`/sec/hcf/addStaff`, JSON.stringify(emailOtp), {\n                headers: { Accept: \"Application/json\" },\n            });\n\n            // Set success message and type for the snackbar\n            setSnackMessage(\"OTP has been sent to your email.\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n        } catch (error) {\n            // Set error message and type for the snackbar\n            setSnackMessage(\"Please fill in the details properly.\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n        }\n    };\n\n    const mobRegister = async () => {\n        setSnackOpen(false); // Close the snackbar before the request\n        try {\n            await axiosInstance.post(`/sec/hcf/addStaff`, JSON.stringify(mobOtp), {\n                headers: { Accept: \"Application/json\" },\n            });\n\n            // Set success message and type for the snackbar\n            setSnackMessage(\"OTP has been sent to your mobile No.\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n        } catch (error) {\n            // Set error message and type for the snackbar\n            setSnackMessage(\"Please fill in the details properly.\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n        }\n    };\n\n    const checkEmailFields = (formData) => {\n        const isFilled = formData.email && formData.mobile && formData.role_id && formData.hcf_id; // Check if hcf_id is set\n\n        setIsFieldsFilled(isFilled);\n    };\n    const veriFyEmailOTPHandler = () => {\n        emailVerify();\n        console.log(\"handler clicked\");\n        setVerifiedEmail(!verifiedEmail);\n    };\n    const veriFyMobOTPHandler = () => {\n        mobileVerify();\n        console.log(\"handler clicked\");\n        setVerifiedMobile(!verifiedMobile);\n    };\n    // Handle email change\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value); // Update email state on input change\n        setEmailOtp({ ...emailOtp, email: e.target.value }); // Sync emailOtp state\n        setMobOtp({...mobOtp, email: e.target.value})\n        setVerifyEmail({ ...verifyEmail, email: e.target.value });\n    };\n\n    const handleMobChange = (e) => {\n        setMob(e.target.value);\n        setEmailOtp({ ...emailOtp, mobile: e.target.value });\n        setMobOtp({ ...mobOtp, mobile: e.target.value}) // Sync emailOtp state\n        setVerifyMob({ ...verifyMob, mobile: e.target.value });\n    };\n    // handler for verifying otp\n    const emailVerify = async () => {\n        setSnackOpen(false); // Close snackbar before making the request\n        try {\n            await axiosInstance.post(\n                `/sec/hcf/verifyHCFDiagnosticStaffEmail`,\n                JSON.stringify(verifyEmail),\n                {\n                    headers: { Accept: \"Application/json\" },\n                },\n            );\n\n            // If OTP is correct\n            setSnackMessage(\"Email verified successfully.\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n\n            // Close the OTP modal\n            setIsEmailModalOtp(false);\n        } catch (error) {\n            // If OTP is incorrect\n            setSnackMessage(\"Wrong OTP. Please try again.\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n        }\n    };\n    // handler for verifying otp\n    const mobileVerify = async () => {\n        setSnackOpen(false); // Close snackbar before making the request\n        try {\n            await axiosInstance.post(\n                `/sec/hcf/verifyHCFDiagnosticStaffMobile`,\n                JSON.stringify(verifyMob),\n                {\n                    headers: { Accept: \"Application/json\" },\n                },\n            );\n\n            // If OTP is correct\n            setSnackMessage(\"Mobile verified successfully.\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n\n            // Close the OTP modal\n            setIsEmailModalOtp(false);\n        } catch (error) {\n            // If OTP is incorrect\n            setSnackMessage(\"Wrong OTP. Please try again.\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n        }\n    };\n\n    return (\n        <>\n            <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\", flexDirection: \"row\" }}>\n                <CustomSnackBar type={snackType} message={snackMessage} isOpen={snackOpen} />\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to={\"/hcfadmin/diagnosticcenter/labs\"}>Labs</NavLink>\n                    <NavLink to={\"/hcfadmin/diagnosticcenter/staff\"}>Staff</NavLink>\n                    <NavLink to={\"/hcfadmin/diagnosticcenter/blocked\"}>Blocked</NavLink>\n                    <CustomButton\n                        buttonCss={{ position: \"absolute\", right: \"0\", borderRadius: \"6.25rem\" }}\n                        isTransaprent={true}\n                        label=\"Add Staff\"\n                        handleClick={() => setOpenDialog(true)}\n                    />\n                </nav>\n                {/* modal for adding staff */}\n                <CustomModal\n                    conditionOpen={setOpenDialog}\n                    isOpen={openDialog}\n                    disableBackdropClick={true}\n                    title={<h5 style={{ fontWeight: \"bold\" }}>Create Staff</h5>}\n                    footer={\n                        <Fragment>\n                            <CustomButton\n                                buttonCss={{\n                                    borderRadius: \"25px\",\n                                    fontFamily: \"PoppiveriFyEmailOTPHandlerns\",\n                                    marginTop: \"20px\",\n                                }}\n                                label={\"Create\"}\n                                isDisabled={!verifiedEmail || !verifiedMobile} // Disable button if either verification is incomplete\n                                handleClick={() => {\n                                    fetchTestData();\n                                }}\n                            />\n                        </Fragment>\n                    }\n                    style={{ width: \"90%\", maxWidth: \"1000px\", height: \"auto\" }} // Increased size of modal\n                >\n                    <Box\n                        display=\"grid\"\n                        gridTemplateColumns=\"repeat(2, 1fr)\" // 2-column grid layout\n                        gap=\"20px\" // Increased gap between fields for better spacing\n                    >\n                        <CustomDropdown\n                            label={\"Designation\"}\n                            items={designationItems.map((item) => item.name)} // Extract just names for display\n                            activeItem={selectedDesignation} // State to hold active selected value\n                            handleChange={handleDropdownChange1} // Function to handle dropdown changes\n                            style={{ width: \"100%\" }}\n                        />\n                        <CustomDropdown\n                            label={\"Department\"}\n                            items={departmentItems.map((item) => item.name)} // Extract just names for display\n                            activeItem={selectedDepartment} // State to hold active selected value\n                            handleChange={handleDropdownChange} // Function to handle dropdown changes\n                            style={{ width: \"100%\" }}\n                        />\n                        <CustomTextField\n                            placeholder={\"Enter Name\"}\n                            label=\"Name\"\n                            variant=\"standard\"\n                            fullWidth\n                            helperText={\"\"}\n                            defaultValue={textFields?.first_name}\n                            onInput={(e) =>\n                                setTextFields({\n                                    ...textFields,\n                                    first_name: e.target.value,\n                                })\n                            }\n                        />\n                        <CustomTextField\n                            placeholder={\"Enter Email\"}\n                            label=\"Email\"\n                            variant=\"standard\"\n                            defaultValue={verifyEmail?.email} // Bind email state to input value\n                            onChange={handleEmailChange} // Capture email input changes\n                            onInput={(e) =>\n                                setTextFields({\n                                    ...textFields,\n                                    email: e.target.value,\n                                })\n                            }\n                            rightIcon={\n                                verifiedEmail ? (\n                                    <DoneIcon sx={{ color: \"green\" }} />\n                                ) : (\n                                    <p\n                                        style={{\n                                            fontFamily: \"Poppins\",\n                                            fontSize: \"0.6em\",\n                                            color: \"#E72B4A\",\n                                        }}\n                                    >\n                                        verify\n                                    </p>\n                                )\n                            }\n                            onRightIconClick={() => {\n                                // setVerifiedEmail(!verifiedEmail);\n                                setIsEmailModalOtp(true);\n                                emailRegister();\n                                console.log(\"verify clicked\");\n                            }}\n                            fullWidth\n                            helperText={\"\"}\n                            type=\"email\"\n                        />\n\n                        <CustomTextField\n                            placeholder={\"Enter Mobile Number\"}\n                            label=\"Mobile No\"\n                            variant=\"standard\"\n                            fullWidth\n                            defaultValue={mob}\n                            value={mob} // Bind email state to input value\n                            onChange={handleMobChange}\n                            onInput={(e) =>\n                                setTextFields({\n                                    ...textFields,\n                                    mobile: e.target.value,\n                                })\n                            }\n                            rightIcon={\n                                verifiedMobile ? (\n                                    <DoneIcon sx={{ color: \"green\" }} />\n                                ) : (\n                                    <p\n                                        style={{\n                                            fontFamily: \"Poppins\",\n                                            fontSize: \"0.6em\",\n                                            color: \"#E72B4A\",\n                                        }}\n                                    >\n                                        verify\n                                    </p>\n                                )\n                            }\n                            onRightIconClick={() => {\n                                // setVerifiedEmail(!verifiedEmail);\n                                setIsMobModalOtp(true);\n                                mobRegister()\n                                console.log(\"verify clicked\");\n                            }}\n                            helperText={\"\"}\n                        />\n                        <CustomTextField\n                            placeholder={\"Enter Password\"}\n                            label=\"Create Password\"\n                            variant=\"standard\"\n                            fullWidth\n                            type=\"password\"\n                            helperText={\"\"}\n                            value={password}\n                            onChange={handlePasswordChange}\n                            defaultValue={textFields?.password}\n                            onInput={(e) =>\n                                setTextFields({\n                                    ...textFields,\n                                    password: e.target.value,\n                                })\n                            }\n                        />\n                        <CustomTextField\n                            placeholder={\"Confirm Password\"}\n                            label=\"Confirm Password\"\n                            variant=\"standard\"\n                            type=\"password\"\n                            fullWidth\n                            helperText={passwordError ? \"Passwords do not match\" : \"\"}\n                            error={passwordError} // Highligh•••••••••t in red if there's an error\n                            value={confirmPassword}\n                            onChange={handleConfirmPasswordChange}\n                        />\n                    </Box>\n                </CustomModal>\n                {/* modal for email otp verification  */}\n                <CustomModal\n                    isOpen={isEmailModalOtp}\n                    conditionOpen={setIsEmailModalOtp}\n                    title={\"Enter Email OTP\"}\n                    disableBackdropClick={true}\n                >\n                    <div id=\"otp-box-container\">\n                        <CustomOTPInput\n                            value={verifyEmail?.activation_code}\n                            onChange={(value) => {\n                                setVerifyEmail({ ...verifyEmail, activation_code: value });\n                            }}\n                            numInputs={6}\n                            placeholder=\"*\"\n                        />\n                        <div className=\"otpsent\">\n                            <p>The OTP has been sent to -{email}</p>\n                        </div>\n                        <CustomButton label={\"Verify\"} handleClick={veriFyEmailOTPHandler} />\n                    </div>\n                </CustomModal>\n                {/* modal for mobile otp verification  */}\n                <CustomModal\n                    isOpen={isMobModalOtp}\n                    conditionOpen={setIsMobModalOtp}\n                    title={\"Enter Mobile OTP\"}\n                    disableBackdropClick={true}\n                >\n                    <div id=\"otp-box-container\">\n                        <CustomOTPInput\n                            value={otp}\n                            onChange={(value) => {\n                                setVerifyMob({ ...verifyMob, otp_code: value });\n                            }}\n                            numInputs={6}\n                            placeholder=\"*\"\n                        />\n                        <div className=\"otpsent\">\n                            <p>The OTP has been sent to - {mob} </p>\n                        </div>\n                        <CustomButton label={\"Verify\"} handleClick={veriFyMobOTPHandler} />\n                    </div>\n                </CustomModal>\n                {/* modal for editing staff */}\n                <CustomModal\n                    conditionOpen={setOpenEditDialog}\n                    isOpen={openEditDialog}\n                    disableBackdropClick={true}\n                    title={<h5 style={{ fontWeight: \"bold\" }}>Edit Staff</h5>}\n                    footer={\n                        <Fragment>\n                            <CustomButton\n                                buttonCss={{\n                                    borderRadius: \"25px\",\n                                    fontFamily: \"PoppiveriFyEmailOTPHandlerns\",\n                                    marginTop: \"20px\",\n                                }}\n                                label={\"Update\"}\n                                // isDisabled={!isFieldsFilled}\n                                handleClick={() => {\n                                    UpdateStaff();\n                                }}\n                            />\n                        </Fragment>\n                    }\n                    style={{ width: \"90%\", maxWidth: \"1000px\", height: \"auto\" }} // Increased size of modal\n                >\n                    <Box\n                        display=\"grid\"\n                        gridTemplateColumns=\"repeat(2, 1fr)\" // 2-column grid layout\n                        gap=\"20px\" // Increased gap between fields for better spacing\n                    >\n                        <CustomDropdown\n                            label={\"Designation\"}\n                            items={EditdesignationItems.map((item) => item.name)} // Extract just names for display\n                            activeItem={selectedDesignation} // State to hold active selected value\n                            handleChange={handleEditDropdownChange1} // Function to handle dropdown changes\n                            style={{ width: \"100%\" }}\n                        />\n                        <CustomDropdown\n                            label={\"Department\"}\n                            items={EditdepartmentItems.map((item) => item.name)} // Extract just names for display\n                            activeItem={selectedDepartment} // State to hold active selected value\n                            handleChange={handleEditropdownChange} // Function to handle dropdown changes\n                            style={{ width: \"100%\" }}\n                        />\n                        <CustomTextField\n                            placeholder={\"Enter Name\"}\n                            label=\"Name\"\n                            variant=\"standard\"\n                            fullWidth\n                            helperText={\"\"}\n                            defaultValue={editdata?.first_name}\n                            onInput={(e) =>\n                                setEditdata({\n                                    ...editdata,\n                                    first_name: e.target.value,\n                                })\n                            }\n                        />\n                        <CustomTextField\n                            placeholder={\"Enter Email\"}\n                            label=\"Email\"\n                            variant=\"standard\"\n                            defaultValue={email}\n                            value={email} // Bind email state to input value\n                            onChange={handleEmailChange} // Capture email input changes\n                            fullWidth\n                            helperText={\"\"}\n                            type=\"email\"\n                        />\n\n                        <CustomTextField\n                            placeholder={\"Enter Mobile Number\"}\n                            label=\"Mobile No\"\n                            variant=\"standard\"\n                            fullWidth\n                            defaultValue={mob}\n                            value={mob} // Bind email state to input value\n                            onChange={handleMobChange}\n                            helperText={\"\"}\n                        />\n                        <CustomTextField\n                            placeholder={\"Enter Password\"}\n                            label=\"Create Password\"\n                            variant=\"standard\"\n                            fullWidth\n                            type=\"password\"\n                            helperText={\"\"}\n                            value={password}\n                            onChange={handlePasswordChange}\n                            defaultValue={editdata?.password}\n                            onInput={(e) =>\n                                setEditdata({\n                                    ...editdata,\n                                    password: e.target.value,\n                                })\n                            }\n                        />\n                        <CustomTextField\n                            placeholder={\"Confirm Password\"}\n                            label=\"Confirm Password\"\n                            variant=\"standard\"\n                            type=\"password\"\n                            fullWidth\n                            helperText={passwordError ? \"Passwords do not match\" : \"\"}\n                            error={passwordError} // Highligh•••••••••t in red if there's an error\n                            value={confirmPassword}\n                            onChange={handleConfirmPasswordChange}\n                        />\n                    </Box>\n                </CustomModal>\n                <Box\n                    component={\"div\"}\n                    sx={{ position: \"relative\", top: \"4em\", width: \"100%\", height: \"100%\" }}\n                >\n                    <TableContainer component={Paper} style={{ background: \"white\" }}>\n                        <Table sx={{ minWidth: 1 }} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow style={{ fontWeight: \"bold\" }}>\n                                    <TableCell>Name & Details</TableCell>\n                                    <TableCell align=\"right\">Title</TableCell>\n                                    <TableCell align=\"right\">Department</TableCell>\n                                    <TableCell align=\"right\">Status</TableCell>\n                                    <TableCell align=\"right\">Action</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {loading ? (\n                                    Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                        <TableRow key={index}>\n                                            <TableCell colSpan={5} align=\"center\">\n                                                <Skeleton\n                                                    variant=\"rectangular\"\n                                                    width=\"100%\"\n                                                    height={40}\n                                                />\n                                            </TableCell>\n                                        </TableRow>\n                                    ))\n                                ) : displayedData.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={5} align=\"center\">\n                                            <NoAppointmentCard text_one={\"No Data Found\"} />\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    displayedData.map((item, index) => (\n                                        <TableRow key={item.staff_id || index}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                <StaffCards\n                                                    name={`${item.first_name}`}\n                                                    staff_id={`${item.staff_id}`}\n                                                    lab_id={\"\"}\n                                                />\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography\n                                                    style={{\n                                                        color: \"#939094\",\n                                                        fontFamily: \"Poppins\",\n                                                    }}\n                                                >\n                                                    {item.hcf_diag_name}\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography\n                                                    style={{\n                                                        color: \"#939094\",\n                                                        fontFamily: \"Poppins\",\n                                                    }}\n                                                >\n                                                    {item.lab_department_name}`\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <CustomButton\n                                                    buttonCss={{ borderRadius: \"6.25rem\" }}\n                                                    isDisabled={item.diag_status !== 1} // Disable the button if lab_status is not 1 (Inactive)\n                                                    label={\n                                                        item.diag_status === 1\n                                                            ? \"Active\"\n                                                            : \"Inactive\"\n                                                    }\n                                                    isTransaprent\n                                                />\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <CustomButton\n                                                    buttonCss={{ borderRadius: \"6.25rem\" }}\n                                                    label={<img src={pen} alt=\"Edit\" />}\n                                                    isTransaprent\n                                                    handleClick={() => handleEdit(item)} // Pass the clicked test's data to handleEdit\n                                                />\n                                            </TableCell>\n                                        </TableRow>\n                                    ))\n                                )}\n                            </TableBody>\n                        </Table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]}\n                            component=\"div\"\n                            count={data.length}\n                            rowsPerPage={rowsPerPage}\n                            page={currentPage}\n                            onPageChange={(event, newPage) => setCurrentPage(newPage)}\n                            onRowsPerPageChange={(event) => {\n                                setRowsPerPage(parseInt(event.target.value, 10));\n                                setCurrentPage(0); // Reset to the first page\n                            }}\n                            labelRowsPerPage=\"Rows per page:\"\n                        />\n                    </TableContainer>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default AdminStaff;\n"],"names":["StaffCards","_ref","name","staff_id","lab_id","React","Box","sx","display","marginLeft","flexDirection","justifyContent","Typography","color","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","letterSpacing","concat","AdminStaff","data","setData","useState","loading","setLoading","openDialog","setOpenDialog","selectedDesignation","setSelectedDesignation","selectedDepartment","setSelectedDepartment","snackType","setSnackType","snackMessage","setSnackMessage","snackOpen","setSnackOpen","labDepartments","setLabDepartments","staffDesignation","setStaffDesignation","isFieldsFilled","setIsFieldsFilled","textFields","setTextFields","first_name","email","mobile","role_id","password","staff_designation","hcf_id","localStorage","getItem","lab_department_id","openEditDialog","setOpenEditDialog","isEditFilled","setIsEditFilled","editdata","setEditdata","added_by","dept_exam_id","setPassword","confirmPassword","setConfirmPassword","passwordError","setPasswordError","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","verifiedEmail","setVerifiedEmail","verifiedMobile","setVerifiedMobile","isEmailModalOtp","setIsEmailModalOtp","setEmail","mob","setMob","isMobModalOtp","setIsMobModalOtp","otp","setOtp","emailOtp","setEmailOtp","register_with_email","mobOtp","setMobOtp","verifyEmail","setVerifyEmail","activation_code","verifyMob","setVerifyMob","otp_code","useEffect","checkFields","formData","isFilled","hcf_diag_name","async","_response$data","response","axiosInstance","get","error","fetchData","_response$data2","fetchLabs","departmentItems","map","department","id","lab_department_name","_response$data3","fetchDesignation","designationItems","designation","staff_designation_id","staff_designation_name","handlePasswordChange","event","target","value","handleConfirmPasswordChange","displayedData","Math","ceil","length","slice","checkEditFields","EditdepartmentItems","EditdesignationItems","handleEmailChange","e","_objectSpread","handleMobChange","emailVerify","post","JSON","stringify","headers","Accept","mobileVerify","width","height","CustomSnackBar","type","message","isOpen","className","NavLink","to","CustomButton","buttonCss","position","right","borderRadius","isTransaprent","label","handleClick","CustomModal","conditionOpen","disableBackdropClick","title","style","footer","Fragment","marginTop","isDisabled","setTimeout","alert","fetchTestData","maxWidth","gridTemplateColumns","gap","CustomDropdown","items","item","activeItem","handleChange","_designationItems$fin","designationId","find","prevState","String","_departmentItems$find","departmentId","CustomTextField","placeholder","variant","fullWidth","helperText","defaultValue","onInput","onChange","rightIcon","DoneIcon","onRightIconClick","emailRegister","mobRegister","CustomOTPInput","numInputs","veriFyEmailOTPHandler","veriFyMobOTPHandler","UpdateStaff","_EditdesignationItems","_EditdepartmentItems$","component","top","TableContainer","Paper","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","_","index","key","colSpan","Skeleton","NoAppointmentCard","text_one","scope","diag_status","src","pen","alt","handleEdit","TablePagination","rowsPerPageOptions","count","page","onPageChange","newPage","onRowsPerPageChange","parseInt","labelRowsPerPage"],"sourceRoot":""}