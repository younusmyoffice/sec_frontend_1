{"version":3,"file":"259.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDiagnosticCenter/AdminLabs/LabsCard.js","webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDiagnosticCenter/AdminLabs/AdminLabs.js"],"sourcesContent":["import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport lab from \"../../../../static/images/DrImages/lab.png\";\nimport BiotechIcon from \"@mui/icons-material/Biotech\";\n\nexport const LabsCard = ({ exam_name, exam_id }) => {\n    return (\n        <>\n            <Box sx={{ display: \"flex\" }}>\n                <Box\n                    component={\"div\"}\n                    sx={{ height: \"3.44331rem\", width: \"3.44331rem\", borderRadius: \"0.5rem\" }}\n                >\n                    {/* <img src={lab} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }} /> */}\n                    <BiotechIcon fontSize=\"large\" style={{ color: \"#E72B4A\", borderRadius: \"8px\" }} />\n\n                </Box>\n                <Box\n                    sx={{\n                        marginLeft: \"2%\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.875rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.375rem\",\n                            letterSpacing: \"0.00438rem\",\n                        }}\n                    >\n                        {exam_name}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.625rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"0.9375rem\",\n                            letterSpacing: \"0.005rem\",\n                        }}\n                    >\n                        Lab id : {exam_id}\n                    </Typography>\n                </Box>\n            </Box>\n        </>\n    );\n};\n","import {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Skeleton,\n    Typography,\n    TablePagination,\n    IconButton,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n} from \"@mui/material\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport { LabsCard } from \"./LabsCard\";\nimport pen from \"../../../../static/images/DrImages/Pen.svg\";\nimport CustomModal from \"../../../../components/CustomModal\";\nimport CustomDropdown from \"../../../../components/CustomDropdown\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport dayjs from \"dayjs\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\n\nconst AdminLabs = () => {\n    const [isFieldsFilled, setIsFieldsFilled] = useState(false);\n    const [data1, setData1] = useState([]);\n    const [labDepartments, setLabDepartments] = useState([]);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [editopenDialog, setEditOpenDialog] = useState(false);\n    const [activeDropdown, setActiveDropdown] = useState(\"\");\n    const [editactiveDropdown, setEditActiveDropdown] = useState(\"\")\n    const [workingDays1From, setWorkingDays1From] = useState(null);\n    const [workingDays1To, setWorkingDays1To] = useState(null);\n    const [workingDays2From, setWorkingDays2From] = useState(null);\n    const [workingDays2To, setWorkingDays2To] = useState(null);\n    const [labdata, setLabData] = useState({\n        lab_dept_id: null,\n        hcf_id: localStorage.getItem(\"hcfadmin_suid\"),\n        exam_name: null,\n        lab_working_days_from: null,\n        lab_working_days_to: null,\n        lab_description: null,\n        lab_working_time_from: null,\n        lab_working_time_to: null,\n    });\n    const [isEditFilled, setIsEditFilled] = useState(false);\n    const [editdata, setEditdata] = useState({\n        exam_id: null,\n        lab_dept_id: null,\n        hcf_id: localStorage.getItem(\"hcfadmin_suid\"),\n        exam_name: null,\n        lab_working_days_from: null,\n        lab_working_days_to: null,\n        lab_description: null,\n        lab_working_time_from: null,\n        lab_working_time_to: null,\n    });\n    const [page, setPage] = useState(0); // Current page\n    const [rowsPerPage, setRowsPerPage] = useState(5); // Rows per page\n    const [loading, setLoading] = useState(true); // Added loading state\n    const [snackType, setSnackType] = useState(\"\");\n    const [snackMessage, setSnackMessage] = useState(\"\");\n    const [snackOpen, setSnackOpen] = useState(false);\n    const hcf_id = localStorage.getItem(\"hcfadmin_suid\");\n\n    //getting labs list\n    const fetchData1 = async (hcf_id) => {\n        setLoading(true); // Set loading to true\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/getHcfLab/${hcf_id}`);\n            setData1(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        } finally {\n            setLoading(false); // Set loading to false\n        }\n    };\n\n    const navigate = useNavigate();\n    useEffect(() => {\n        fetchData1(hcf_id);\n    }, [hcf_id]);\n    // post api to add labs\n\n    const handleWorkingDays1FromChange = (newValue) => {\n        setWorkingDays1From(newValue);\n        setLabData((prevState) => ({\n            ...prevState,\n            lab_working_days_from: newValue ? dayjs(newValue).format(\"YYYY-MM-DD\") : null,\n        }));\n    };\n\n    const handleWorkingDays1ToChange = (newValue) => {\n        setWorkingDays1To(newValue);\n        setLabData((prevState) => ({\n            ...prevState,\n            lab_working_days_to: newValue ? dayjs(newValue).format(\"YYYY-MM-DD\") : null,\n        }));\n    };\n\n    const handleWorkingDays2FromChange = (newValue) => {\n        setWorkingDays2From(newValue);\n    };\n\n    const handleWorkingDays2ToChange = (newValue) => {\n        setWorkingDays2To(newValue);\n    };\n\n    const checkFields = (formData) => {\n        const isFilled =\n            // formData.exam_name &&\n            formData.lab_working_days_from &&\n            formData.lab_working_days_to &&\n            formData.lab_working_time_from &&\n            formData.lab_working_time_to &&\n            formData.lab_description &&\n            formData.lab_dept_id && // Check department selection\n            formData.hcf_id; // Check if hcf_id is set\n\n        setIsFieldsFilled(isFilled);\n    };\n\n    useEffect(() => {\n        checkFields(labdata); // Ensure fields are checked on each labdata update\n    }, [labdata]);\n\n    const fetchLabData = async () => {\n        setSnackOpen(false);\n        try {\n            await axiosInstance.post(`/sec/hcf/addLabs?hcf_id=${hcf_id}`, JSON.stringify(labdata), {\n                headers: { \n                    Accept: \"Application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n            });\n            await setSnackType(\"success\");\n            await setSnackMessage(\"Lab Created Successfully\");\n            setSnackOpen(true);\n            setTimeout(() => setOpenDialog(false), 3000);\n            fetchData1(hcf_id); // Refresh the list\n        } catch (error) {\n            alert(\"Fill the details properly\");\n            console.error(error.response);\n            await setSnackType(\"error\");\n            await setSnackMessage(\"Some error occurred!!!\");\n            setSnackOpen(true);\n        }\n    };\n    // editing labs handler \n\n    const handleEdit = (data) => {\n        // setSelectedTest(data); // Set the selected test data\n        setEditdata({\n            exam_id: String(data.exam_id), // Convert sub_exam_id to a string\n            lab_dept_id: String(data.lab_department_id),\n            hcf_id: hcf_id,\n            exam_name: data.exam_name,\n            lab_working_days_from: data.lab_working_days_from,\n            lab_working_days_to: data.lab_working_days_to,\n            lab_working_time_from: data.lab_working_time_from,\n            lab_working_time_to: data.lab_working_time_to,\n            lab_description: data.lab_description,\n\n        });\n        setEditOpenDialog(true); // Open the modal\n    };\n\n\nconst checkEditFields = (formData) => {\n    const isEditFilled =\n        formData.exam_id &&\n        formData.exam_name &&\n        formData.lab_working_days_from &&\n        formData.lab_working_days_to &&\n        formData.lab_working_time_from &&\n        formData.lab_working_time_to &&\n        formData.lab_description &&\n        formData.lab_dept_id && // Check department selection\n        formData.hcf_id; // Check if hcf_id is set\n\n        setIsEditFilled(isEditFilled);\n};\n\nuseEffect(() => {\n    checkEditFields(editdata); // Ensure fields are checked on each labdata update\n}, [editdata]);\n\nconst updateLabData = async () => {\n    setSnackOpen(false);\n    try {\n        await axiosInstance.post(`/sec/hcf/addLabs?hcf_id=${hcf_id}`, JSON.stringify(editdata), {\n            headers: { \n                Accept: \"Application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n        });\n        await setSnackType(\"success\");\n        await setSnackMessage(\"Lab Updated Successfully\");\n        setSnackOpen(true);\n        setTimeout(() => setEditOpenDialog(false), 3000);\n        fetchData1(hcf_id); // Refresh the list\n    } catch (error) {\n        alert(\"Fill the details properly\");\n        console.error(error.response);\n        await setSnackType(\"error\");\n        await setSnackMessage(\"Some error occurred!!!\");\n        setSnackOpen(true);\n    }\n};\n\nconst deleteLabData = async (exam_id) => {\n    setSnackOpen(false);\n    try {\n        console.log(\"exam_id2\", exam_id);\n        console.log(\"Delete URL:\", `/sec/hcf/deleteLab?exam_id=${exam_id}`);\n        \n        const response = await axiosInstance.delete(`/sec/hcf/deleteLab?exam_id=${exam_id}`);\n        console.log(\"Delete response:\", response);\n        \n        await setSnackType(\"success\");\n        await setSnackMessage(\"Lab Deleted Successfully\");\n        setSnackOpen(true);\n        fetchData1(hcf_id); // Refresh the list\n    } catch (error) {\n        console.error(\"Delete error:\", error);\n        console.error(\"Error response:\", error.response);\n        console.error(\"Error response data:\", error.response?.data);\n        console.error(\"Error response status:\", error.response?.status);\n        console.error(\"Error response statusText:\", error.response?.statusText);\n        await setSnackType(\"error\");\n        await setSnackMessage(\"Some error occurred while deleting!!!\");\n        setSnackOpen(true);\n    }\n};\nconst handleEditDropdownChange = (selectedDepartment) => {\n    const departmentId = departmentItems.find((item) => item.name === selectedDepartment)?.id;\n    console.log(departmentId, \"this lab id\");\n    setEditActiveDropdown(selectedDepartment);\n\n    setEditdata((prevState) => ({\n        ...prevState,\n        lab_dept_id: String(departmentId), // Ensure lab_dept_id is stored as a string\n    }));\n};\n\n    // Fetching lab departments\n    const fetchLabs = async () => {\n        try {\n            const response = await axiosInstance.get(`/sec/labDepartments`);\n            setLabDepartments(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching lab data:\", error.response);\n        }\n    };\n\n    // UseEffect to fetch labs on component mount\n    useEffect(() => {\n        fetchLabs();\n    }, []);\n\n    // Transform the department data for the dropdown\n    const departmentItems = labDepartments.map((department) => ({\n        id: department.lab_department_id,\n        name: department.lab_department_name,\n    }));\n\n    const handleDropdownChange = (selectedDepartment) => {\n        const departmentId = departmentItems.find((item) => item.name === selectedDepartment)?.id;\n        console.log(departmentId, \"this lab id\");\n        setActiveDropdown(selectedDepartment);\n\n        setLabData((prevState) => ({\n            ...prevState,\n            lab_dept_id: String(departmentId), // Ensure lab_dept_id is stored as a string\n        }));\n    };\n\n    // Handle pagination\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0); // Reset to first page\n    };\n\n    return (\n        <>\n            <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\", flexDirection: \"row\" }}>\n            <CustomSnackBar type={snackType} message={snackMessage} isOpen={snackOpen} />\n\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to=\"/hcfadmin/diagnosticcenter/labs\">Labs</NavLink>\n                    <NavLink to=\"/hcfadmin/diagnosticcenter/staff\">Staff</NavLink>\n                    <NavLink to=\"/hcfadmin/diagnosticcenter/blocked\">Blocked</NavLink>\n                    {/* lab creating button */}\n                    <CustomButton\n                        buttonCss={{ position: \"absolute\", right: \"0\", borderRadius: \"6.25rem\" }}\n                        isTransaprent={true}\n                        label=\"Create Lab\"\n                        handleClick={() => setOpenDialog(true)}\n                    />\n                    {/* Add Lab Modal */}\n                    <Dialog\n                        open={openDialog}\n                        onClose={() => setOpenDialog(false)}\n                        maxWidth=\"sm\"\n                        fullWidth\n                        PaperProps={{\n                            sx: {\n                                borderRadius: \"16px\",\n                                padding: \"24px\",\n                                fontFamily: \"Poppins, sans-serif\"\n                            }\n                        }}\n                    >\n                        {/* Header */}\n                        <DialogTitle sx={{ \n                            padding: 0, \n                            marginBottom: \"24px\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"space-between\"\n                        }}>\n                            <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n                                <IconButton \n                                    onClick={() => setOpenDialog(false)}\n                                    sx={{ \n                                        padding: \"8px\",\n                                        \"&:hover\": { backgroundColor: \"rgba(0,0,0,0.04)\" }\n                                    }}\n                                >\n                                    <ArrowBackIcon sx={{ fontSize: \"20px\", color: \"#666\" }} />\n                                </IconButton>\n                                <Box>\n                                    <Typography variant=\"h5\" sx={{ \n                                        fontWeight: \"bold\", \n                                        margin: 0,\n                                        color: \"#313033\",\n                                        fontSize: \"20px\"\n                                    }}>\n                                        Add Lab\n                                    </Typography>\n                                    <Typography variant=\"body2\" sx={{ \n                                        color: \"#666\", \n                                        margin: 0,\n                                        fontSize: \"14px\"\n                                    }}>\n                                        Create a lab here\n                                    </Typography>\n                                </Box>\n                            </Box>\n                            <IconButton \n                                onClick={() => setOpenDialog(false)}\n                                sx={{ \n                                    padding: \"8px\",\n                                    \"&:hover\": { backgroundColor: \"rgba(0,0,0,0.04)\" }\n                                }}\n                            >\n                                <CloseIcon sx={{ fontSize: \"20px\", color: \"#666\" }} />\n                            </IconButton>\n                        </DialogTitle>\n\n                        {/* Content */}\n                        <DialogContent sx={{ padding: 0 }}>\n                            <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 3 }}>\n                                {/* Department */}\n                                <CustomDropdown\n                                    label=\"Department\"\n                                    items={departmentItems.map((item) => item.name)}\n                                    activeItem={activeDropdown}\n                                    handleChange={handleDropdownChange}\n                                    variant=\"standard\"\n                                    dropdowncss={{\n                                        width: \"100%\",\n                                        \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                        \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                        \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                        \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                    }}\n                                />\n\n                                {/* Lab Name */}\n                  \n\n                                {/* Working Days 1 */}\n                                <Box>\n                                    <Typography variant=\"subtitle1\" sx={{ \n                                        fontWeight: \"bold\",\n                                        color: \"#313033\",\n                                        marginBottom: \"16px\",\n                                        fontSize: \"16px\"\n                                    }}>\n                                        Working Days\n                                    </Typography>\n                                    <Box sx={{ \n                                        display: \"flex\", \n                                        justifyContent: \"space-between\", \n                                        gap: 2,\n                                        alignItems: \"center\"\n                                    }}>\n                                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                            <DatePicker\n                                                label=\"From\"\n                                                value={workingDays1From}\n                                                onChange={handleWorkingDays1FromChange}\n                                                slotProps={{\n                                                    textField: {\n                                                        variant: \"standard\",\n                                                        sx: {\n                                                            flex: 1,\n                                                            \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                                            \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                                            \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                                            \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                                        }\n                                                    }\n                                                }}\n                                            />\n                                        </LocalizationProvider>\n                                        <Typography sx={{ color: \"#666\", fontSize: \"14px\" }}>to</Typography>\n                                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                            <DatePicker\n                                                label=\"To\"\n                                                value={workingDays1To}\n                                                onChange={handleWorkingDays1ToChange}\n                                                slotProps={{\n                                                    textField: {\n                                                        variant: \"standard\",\n                                                        sx: {\n                                                            flex: 1,\n                                                            \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                                            \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                                            \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                                            \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                                        }\n                                                    }\n                                                }}\n                                            />\n                                        </LocalizationProvider>\n                                    </Box>\n                                </Box>\n\n                         \n\n                                {/* Working Time */}\n                                <Box>\n                                    <Typography variant=\"subtitle1\" sx={{ \n                                        fontWeight: \"bold\",\n                                        color: \"#313033\",\n                                        marginBottom: \"16px\",\n                                        fontSize: \"16px\"\n                                    }}>\n                                        Working Time\n                                    </Typography>\n                                    <Box sx={{ \n                                        display: \"flex\", \n                                        justifyContent: \"space-between\", \n                                        gap: 2,\n                                        alignItems: \"center\"\n                                    }}>\n                                        <TextField\n                                            label=\"From\"\n                                            variant=\"standard\"\n                                            type=\"time\"\n                                            fullWidth\n                                            required\n                                            value={labdata.lab_working_time_from || \"\"}\n                                            onChange={(event) => {\n                                                setLabData((prevState) => ({\n                                                    ...prevState,\n                                                    lab_working_time_from: event.target.value + \":00\",\n                                                }));\n                                            }}\n                                            sx={{\n                                                flex: 1,\n                                                \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                                \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                                \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                                \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                            }}\n                                        />\n                                        <Typography sx={{ color: \"#666\", fontSize: \"14px\" }}>to</Typography>\n                                        <TextField\n                                            label=\"To\"\n                                            variant=\"standard\"\n                                            type=\"time\"\n                                            fullWidth\n                                            required\n                                            value={labdata.lab_working_time_to || \"\"}\n                                            onChange={(event) => {\n                                                setLabData((prevState) => ({\n                                                    ...prevState,\n                                                    lab_working_time_to: event.target.value + \":00\",\n                                                }));\n                                            }}\n                                            sx={{\n                                                flex: 1,\n                                                \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                                \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                                \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                                \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                            }}\n                                        />\n                                    </Box>\n                                </Box>\n\n                                {/* Description */}\n                                <Box>\n                                    <Typography variant=\"subtitle1\" sx={{ \n                                        fontWeight: \"bold\",\n                                        color: \"#313033\",\n                                        marginBottom: \"16px\",\n                                        fontSize: \"16px\"\n                                    }}>\n                                        Description\n                                    </Typography>\n                                    <TextField\n                                        multiline\n                                        rows={7}\n                                        placeholder=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut tellus quis sapien interdum commodo. Nunc tincidunt justo non dolor bibendum, vitae elementum elit tincidunt. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Morbi maximus, nisl.\"\n                                        value={labdata.lab_description}\n                                        onChange={(event) => {\n                                            setLabData((prevState) => ({\n                                                ...prevState,\n                                                lab_description: event.target.value,\n                                            }));\n                                        }}\n                                        variant=\"outlined\"\n                                        fullWidth\n                                        sx={{\n                                            \"& .MuiOutlinedInput-root\": {\n                                                borderRadius: \"8px\",\n                                                fontFamily: \"Poppins, sans-serif\",\n                                                fontSize: \"14px\",\n                                                color: \"#666\",\n                                                \"& fieldset\": {\n                                                    borderColor: \"#e0e0e0\",\n                                                },\n                                                \"&:hover fieldset\": {\n                                                    borderColor: \"#1976d2\",\n                                                },\n                                                \"&.Mui-focused fieldset\": {\n                                                    borderColor: \"#1976d2\",\n                                                },\n                                            },\n                                            \"& .MuiInputBase-input::placeholder\": {\n                                                color: \"#999\",\n                                                opacity: 1,\n                                            }\n                                        }}\n                                    />\n                                </Box>\n                            </Box>\n                        </DialogContent>\n\n                        {/* Footer */}\n                        <DialogActions sx={{ \n                            padding: 0, \n                            marginTop: \"32px\",\n                            justifyContent: \"center\"\n                        }}>\n                            <CustomButton\n                                buttonCss={{\n                                    backgroundColor: \"#E72B4A\",\n                                    color: \"white\",\n                                    padding: \"12px 48px\",\n                                    fontSize: \"16px\",\n                                    fontWeight: \"500\",\n                                    borderRadius: \"8px\",\n                                    textTransform: \"none\",\n                                    \"&:hover\": {\n                                        backgroundColor: \"#d32f2f\"\n                                    }\n                                }}\n                                isDisabled={!isFieldsFilled}\n                                label=\"Create\"\n                                handleClick={() => {\n                                    setOpenDialog(false);\n                                    fetchLabData();\n                                    fetchData1(hcf_id);\n                                }}\n                            />\n                        </DialogActions>\n                    </Dialog>\n                </nav>\n                {/* Edit Lab Modal */}\n                <Dialog\n                    open={editopenDialog}\n                    onClose={() => setEditOpenDialog(false)}\n                    maxWidth=\"sm\"\n                    fullWidth\n                    PaperProps={{\n                        sx: {\n                            borderRadius: \"16px\",\n                            padding: \"24px\",\n                            fontFamily: \"Poppins, sans-serif\"\n                        }\n                    }}\n                >\n                    {/* Header */}\n                    <DialogTitle sx={{ \n                        padding: 0, \n                        marginBottom: \"24px\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"space-between\"\n                    }}>\n                        <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n                            <IconButton \n                                onClick={() => setEditOpenDialog(false)}\n                                sx={{ \n                                    padding: \"8px\",\n                                    \"&:hover\": { backgroundColor: \"rgba(0,0,0,0.04)\" }\n                                }}\n                            >\n                                <ArrowBackIcon sx={{ fontSize: \"20px\", color: \"#666\" }} />\n                            </IconButton>\n                            <Box>\n                                <Typography variant=\"h5\" sx={{ \n                                    fontWeight: \"bold\", \n                                    margin: 0,\n                                    color: \"#313033\",\n                                    fontSize: \"20px\"\n                                }}>\n                                    Edit Lab\n                                </Typography>\n                                <Typography variant=\"body2\" sx={{ \n                                    color: \"#666\", \n                                    margin: 0,\n                                    fontSize: \"14px\"\n                                }}>\n                                    Edit lab here\n                                </Typography>\n                            </Box>\n                        </Box>\n                        <IconButton \n                            onClick={() => setEditOpenDialog(false)}\n                            sx={{ \n                                padding: \"8px\",\n                                \"&:hover\": { backgroundColor: \"rgba(0,0,0,0.04)\" }\n                            }}\n                        >\n                            <CloseIcon sx={{ fontSize: \"20px\", color: \"#666\" }} />\n                        </IconButton>\n                    </DialogTitle>\n\n                    {/* Content */}\n                    <DialogContent sx={{ padding: 0 }}>\n                        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 3 }}>\n                            {/* Department */}\n                            <CustomDropdown\n                                label=\"Department\"\n                                items={departmentItems.map((item) => item.name)}\n                                activeItem={editactiveDropdown}\n                                handleChange={handleEditDropdownChange}\n                                variant=\"standard\"\n                                dropdowncss={{\n                                    width: \"100%\",\n                                    \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                    \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                    \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                    \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                }}\n                            />\n\n                            {/* Lab Name */}\n                            <TextField\n                                label=\"Lab Name\"\n                                variant=\"standard\"\n                                fullWidth\n                                required\n                                value={editdata.exam_name || \"\"}\n                                onChange={(event) => {\n                                    setEditdata((prevState) => ({\n                                        ...prevState,\n                                        exam_name: event.target.value,\n                                    }));\n                                }}\n                                sx={{\n                                    \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                    \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                    \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                    \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                }}\n                            />\n\n                            {/* Working Days */}\n                            <Box>\n                                <Typography variant=\"subtitle1\" sx={{ \n                                    fontWeight: \"bold\",\n                                    color: \"#313033\",\n                                    marginBottom: \"16px\",\n                                    fontSize: \"16px\"\n                                }}>\n                                    Working Days\n                                </Typography>\n                                <Box sx={{ \n                                    display: \"flex\", \n                                    justifyContent: \"space-between\", \n                                    gap: 2,\n                                    alignItems: \"center\"\n                                }}>\n                                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                        <DatePicker\n                                            label=\"From\"\n                                            value={editdata.lab_working_days_from ? dayjs(editdata.lab_working_days_from) : null}\n                                            onChange={(newValue) => {\n                                                setEditdata((prevState) => ({\n                                                    ...prevState,\n                                                    lab_working_days_from: newValue ? dayjs(newValue).format(\"YYYY-MM-DD\") : null,\n                                                }));\n                                            }}\n                                            slotProps={{\n                                                textField: {\n                                                    variant: \"standard\",\n                                                    sx: {\n                                                        flex: 1,\n                                                        \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                                        \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                                        \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                                        \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </LocalizationProvider>\n                                    <Typography sx={{ color: \"#666\", fontSize: \"14px\" }}>to</Typography>\n                                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                        <DatePicker\n                                            label=\"To\"\n                                            value={editdata.lab_working_days_to ? dayjs(editdata.lab_working_days_to) : null}\n                                            onChange={(newValue) => {\n                                                setEditdata((prevState) => ({\n                                                    ...prevState,\n                                                    lab_working_days_to: newValue ? dayjs(newValue).format(\"YYYY-MM-DD\") : null,\n                                                }));\n                                            }}\n                                            slotProps={{\n                                                textField: {\n                                                    variant: \"standard\",\n                                                    sx: {\n                                                        flex: 1,\n                                                        \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                                        \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                                        \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                                        \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </LocalizationProvider>\n                                </Box>\n                            </Box>\n\n                            {/* Working Time */}\n                            <Box>\n                                <Typography variant=\"subtitle1\" sx={{ \n                                    fontWeight: \"bold\",\n                                    color: \"#313033\",\n                                    marginBottom: \"16px\",\n                                    fontSize: \"16px\"\n                                }}>\n                                    Working Time\n                                </Typography>\n                                <Box sx={{ \n                                    display: \"flex\", \n                                    justifyContent: \"space-between\", \n                                    gap: 2,\n                                    alignItems: \"center\"\n                                }}>\n                                    <TextField\n                                        label=\"From\"\n                                        variant=\"standard\"\n                                        type=\"time\"\n                                        fullWidth\n                                        required\n                                        value={editdata.lab_working_time_from ? editdata.lab_working_time_from.substring(0, 5) : \"\"}\n                                        onChange={(event) => {\n                                            setEditdata((prevState) => ({\n                                                ...prevState,\n                                                lab_working_time_from: event.target.value + \":00\",\n                                            }));\n                                        }}\n                                        sx={{\n                                            flex: 1,\n                                            \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                            \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                            \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                            \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                        }}\n                                    />\n                                    <Typography sx={{ color: \"#666\", fontSize: \"14px\" }}>to</Typography>\n                                    <TextField\n                                        label=\"To\"\n                                        variant=\"standard\"\n                                        type=\"time\"\n                                        fullWidth\n                                        required\n                                        value={editdata.lab_working_time_to ? editdata.lab_working_time_to.substring(0, 5) : \"\"}\n                                        onChange={(event) => {\n                                            setEditdata((prevState) => ({\n                                                ...prevState,\n                                                lab_working_time_to: event.target.value + \":00\",\n                                            }));\n                                        }}\n                                        sx={{\n                                            flex: 1,\n                                            \"& .MuiInputLabel-root\": { color: \"#787579\", fontFamily: \"Poppins, sans-serif\" },\n                                            \"& .MuiInput-underline:before\": { borderBottomColor: \"#e0e0e0\" },\n                                            \"& .MuiInput-underline:hover:not(.Mui-disabled):before\": { borderBottomColor: \"#1976d2\" },\n                                            \"& .MuiInput-underline:after\": { borderBottomColor: \"#1976d2\" }\n                                        }}\n                                    />\n                                </Box>\n                            </Box>\n\n                            {/* Description */}\n                            <Box>\n                                <Typography variant=\"subtitle1\" sx={{ \n                                    fontWeight: \"bold\",\n                                    color: \"#313033\",\n                                    marginBottom: \"16px\",\n                                    fontSize: \"16px\"\n                                }}>\n                                    Description\n                                </Typography>\n                                <TextField\n                                    multiline\n                                    rows={7}\n                                    placeholder=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut tellus quis sapien interdum commodo. Nunc tincidunt justo non dolor bibendum, vitae elementum elit tincidunt. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Morbi maximus, nisl.\"\n                                    value={editdata.lab_description}\n                                    onChange={(event) => {\n                                        setEditdata((prevState) => ({\n                                            ...prevState,\n                                            lab_description: event.target.value,\n                                        }));\n                                    }}\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    sx={{\n                                        \"& .MuiOutlinedInput-root\": {\n                                            borderRadius: \"8px\",\n                                            fontFamily: \"Poppins, sans-serif\",\n                                            fontSize: \"14px\",\n                                            color: \"#666\",\n                                            \"& fieldset\": {\n                                                borderColor: \"#e0e0e0\",\n                                            },\n                                            \"&:hover fieldset\": {\n                                                borderColor: \"#1976d2\",\n                                            },\n                                            \"&.Mui-focused fieldset\": {\n                                                borderColor: \"#1976d2\",\n                                            },\n                                        },\n                                        \"& .MuiInputBase-input::placeholder\": {\n                                            color: \"#999\",\n                                            opacity: 1,\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        </Box>\n                    </DialogContent>\n\n                    {/* Footer */}\n                    <DialogActions sx={{ \n                        padding: 0, \n                        marginTop: \"32px\",\n                        justifyContent: \"center\"\n                    }}>\n                        <CustomButton\n                            buttonCss={{\n                                backgroundColor: \"#E72B4A\",\n                                color: \"white\",\n                                padding: \"12px 48px\",\n                                fontSize: \"16px\",\n                                fontWeight: \"500\",\n                                borderRadius: \"8px\",\n                                textTransform: \"none\",\n                                \"&:hover\": {\n                                    backgroundColor: \"#d32f2f\"\n                                }\n                            }}\n                            isDisabled={!isEditFilled}\n                            label=\"Update\"\n                            handleClick={() => {\n                                setEditOpenDialog(false);\n                                updateLabData();\n                                fetchData1(hcf_id);\n                            }}\n                        />\n                    </DialogActions>\n                </Dialog>\n                <Box\n                    component={\"div\"}\n                    sx={{ position: \"relative\", top: \"4em\", width: \"100%\", height: \"100%\" }}\n                >\n                    <TableContainer component={Paper} style={{ background: \"white\" }}>\n                        <Table sx={{ minWidth: 1 }} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow style={{ fontWeight: \"bold\" }}>\n                                    <TableCell>Name & Details</TableCell>\n                                    <TableCell align=\"right\">Department</TableCell>\n                                    <TableCell align=\"right\">Status</TableCell>\n                                    <TableCell align=\"right\">Action</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {loading ? (\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={4} align=\"center\">\n                                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                ) : data1.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={4} align=\"center\">\n                                            <NoAppointmentCard text_one={\"No Data Found\"} />\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    data1\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                        .map((data, index) => (\n                                            <TableRow\n                                                key={`${data.exam_id}-${index}`}\n                                                sx={{\n                                                    \"&:last-child td, &:last-child th\": {\n                                                        border: 0,\n                                                    },\n                                                }}\n                                            >\n                                                <TableCell\n                                                    component=\"th\"\n                                                    scope=\"row\"\n                                                    style={{\n                                                        cursor: \"pointer\", // Pointer cursor on hover\n                                                    }}\n                                                    title=\"Edit lab\" // Tooltip message on hover\n                                                    onClick={() => navigate(`${data?.exam_id}`)} // Pass the clicked test's data to handleEdit\n\n                                                >\n                                                    <LabsCard\n                                                        exam_name={data.exam_name}\n                                                        exam_id={data.exam_id}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Typography\n                                                        style={{\n                                                            color: \"#939094\",\n                                                            fontFamily: \"Poppins\",\n                                                            cursor: \"pointer\", // Pointer cursor on hover\n                                                        }}\n                                                        onClick={() =>\n                                                            navigate(`${data?.exam_id}`)\n                                                        }\n                                                        title=\"Add test\" // Tooltip message on hover\n                                                    >\n                                                        {data.lab_department_name}\n                                                    </Typography>\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <CustomButton\n                                                        buttonCss={{ borderRadius: \"6.25rem\" }}\n                                                        isDisabled={data.lab_status !== 1} // Disable the button if lab_status is not 1 (Inactive)\n                                                        label={\n                                                            data.lab_status === 1\n                                                                ? \"Active\"\n                                                                : \"Inactive\"\n                                                        } // Show \"Active\" or \"Inactive\"\n                                                        isTransaprent\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Box sx={{ display: \"flex\", gap: 1, justifyContent: \"flex-end\" }}>\n                                                        <CustomButton\n                                                            buttonCss={{ borderRadius: \"6.25rem\" }}\n                                                            label={<img src={pen} alt=\"Edit\" />}\n                                                            isTransaprent\n                                                            handleClick={() => handleEdit(data)} // Pass the clicked test's data to handleEdit\n                                                        />\n                                                        <CustomButton\n                                                            buttonCss={{ \n                                                                borderRadius: \"6.25rem\",\n                                                                backgroundColor: \"#f44336\",\n                                                                color: \"white\",\n                                                                minWidth: \"auto\",\n                                                                padding: \"8px\"\n                                                            }}\n                                                            label=\"Delete\"\n                                                            isTransaprent={false}\n                                                            handleClick={() => {\n                                                                if (window.confirm(\"Are you sure you want to delete this lab?\")) {\n                                                                    deleteLabData(data.exam_id);\n                                                                }\n                                                            }}\n                                                        />\n                                                    </Box>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                )}\n                            </TableBody>\n                        </Table>\n                        <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={data1.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        labelRowsPerPage=\"Rows per page:\"\n                    />\n                    </TableContainer>\n                    \n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default AdminLabs;\n"],"names":["LabsCard","_ref","exam_name","exam_id","React","Box","sx","display","component","height","width","borderRadius","BiotechIcon","fontSize","style","color","marginLeft","flexDirection","justifyContent","Typography","fontFamily","fontStyle","fontWeight","lineHeight","letterSpacing","AdminLabs","isFieldsFilled","setIsFieldsFilled","useState","data1","setData1","labDepartments","setLabDepartments","openDialog","setOpenDialog","editopenDialog","setEditOpenDialog","activeDropdown","setActiveDropdown","editactiveDropdown","setEditActiveDropdown","workingDays1From","setWorkingDays1From","workingDays1To","setWorkingDays1To","workingDays2From","setWorkingDays2From","workingDays2To","setWorkingDays2To","labdata","setLabData","lab_dept_id","hcf_id","localStorage","getItem","lab_working_days_from","lab_working_days_to","lab_description","lab_working_time_from","lab_working_time_to","isEditFilled","setIsEditFilled","editdata","setEditdata","page","setPage","rowsPerPage","setRowsPerPage","loading","setLoading","snackType","setSnackType","snackMessage","setSnackMessage","snackOpen","setSnackOpen","fetchData1","async","_response$data","response","axiosInstance","get","concat","data","error","navigate","useNavigate","useEffect","formData","isFilled","checkFields","checkEditFields","_response$data2","fetchLabs","departmentItems","map","department","id","lab_department_id","name","lab_department_name","CustomSnackBar","type","message","isOpen","className","NavLink","to","CustomButton","buttonCss","position","right","isTransaprent","label","handleClick","Dialog","open","onClose","maxWidth","fullWidth","PaperProps","padding","DialogTitle","marginBottom","alignItems","gap","IconButton","onClick","backgroundColor","ArrowBackIcon","variant","margin","CloseIcon","DialogContent","CustomDropdown","items","item","activeItem","handleChange","selectedDepartment","_departmentItems$find2","departmentId","find","prevState","_objectSpread","String","dropdowncss","borderBottomColor","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","value","onChange","newValue","dayjs","format","slotProps","textField","flex","TextField","required","event","target","multiline","rows","placeholder","borderColor","opacity","DialogActions","marginTop","textTransform","isDisabled","post","JSON","stringify","headers","Accept","setTimeout","alert","fetchLabData","_departmentItems$find","substring","updateLabData","top","TableContainer","Paper","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","_","index","key","colSpan","Skeleton","length","NoAppointmentCard","text_one","slice","border","scope","cursor","title","lab_status","src","pen","alt","handleEdit","window","confirm","delete","deleteLabData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","labelRowsPerPage"],"sourceRoot":""}