{"version":3,"file":"661.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticDashboard/DiagnosticNotification/DashboardCard.js","webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticDashboard/DiagnosticNotification/DiagnosticNotification.js","webpack://sec-frontend/./src/DoctorModule/CustomDoctorComponent/Cards/CardNotification/CardNotification.js"],"sourcesContent":["import React from \"react\";\nimport { Typography, Box } from \"@mui/material\";\n\nconst DoctorAppointmentCard = ({ countData, fieldName }) => {\n    return (\n        <Box\n            sx={{\n                padding: \"1rem\",\n                border: \"1px solid #ddd\",\n                borderRadius: \"8px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"left\",\n                minWidth: \"350px\", // Adjust width as needed\n                margin: \"0.5rem\", // Adds spacing between cards\n            }}\n        >\n            <Typography\n                sx={{\n                    color: \"#E72B4A\",\n                    fontFamily: \"Poppins\",\n                    fontSize: \"2.5rem\", // Reduced font size\n                    fontWeight: \"600\",\n                }}\n            >\n                {countData}\n            </Typography>\n            <Typography\n                sx={{\n                    color: \"#313033\",\n                    fontFamily: \"Poppins\",\n                    fontSize: \"1rem\",\n                    fontWeight: \"400\",\n                }}\n            >\n                {fieldName}\n            </Typography>\n        </Box>\n    );\n};\n\nexport default React.memo(DoctorAppointmentCard);\n","// import * as React from 'react';\n\nimport { Box, Skeleton, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Dashboard } from \"@mui/icons-material\";\nimport DashboardCard from \"./DashboardCard\";\nimport CustomNotificationCard from \"../../../../DoctorModule/CustomDoctorComponent/Cards/CardNotification/CardNotification\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport \"./diagnosticNotification.scss\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\n\nconst DiagnosticNotification = () => {\n    const [testCount, setTestCount] = useState(0);\n    const [reportCount, setReportCount] = useState(0);\n    const [patientCount, setPatientCount] = useState(0);\n    const [notify, setNotify] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const staff_id = localStorage.getItem(\"diagnostic_suid\");\n    const [viewAll, setViewAll] = useState(false);\n\n    const fetchdashboardTestCount = async (staff_id) => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/${staff_id}/dashboardTestCount`);\n            const Count = response?.data?.response[0]?.keyword_count || 0;\n            setTestCount(Count);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchdashboardReportCount = async (staff_id) => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/${staff_id}/dashboardReportCount`);\n            const Count = response?.data?.response[0]?.keyword_count || 0;\n            setReportCount(Count);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchdashboardPatientCount = async (staff_id) => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/${staff_id}/dashboardPatientCount`);\n            const Count = response?.data?.response[0]?.keyword_count || 0;\n            setPatientCount(Count);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const Notification = async (staff_id) => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/${staff_id}/StaffNotification/`);\n            const Count = response?.data?.response || [];\n            console.log(Count);\n            setNotify(Count);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchdashboardTestCount(staff_id);\n        fetchdashboardReportCount(staff_id);\n        fetchdashboardPatientCount(staff_id);\n        Notification(staff_id);\n    }, [staff_id]);\n\n    const toggleViewAll = () => {\n        setViewAll((prev) => !prev);\n    };\n\n    const displayedData = viewAll ? notify : notify.slice(0, 3);\n\n    return (\n        <>\n            <Box className=\"horizontal-scroll-container\" sx={{ display: \"flex\", padding: \"10px\" }}>\n                <div>\n                    {loading ? (\n                        <>\n                            <Skeleton\n                                variant=\"rectangular\"\n                                width={200}\n                                height={100}\n                                sx={{ marginBottom: \"10px\" }}\n                            />\n                            <Skeleton\n                                variant=\"rectangular\"\n                                width={200}\n                                height={100}\n                                sx={{ marginBottom: \"10px\" }}\n                            />\n                            <Skeleton variant=\"rectangular\" width={200} height={100} />\n                        </>\n                    ) : (\n                        <>\n                            <DashboardCard countData={testCount} fieldName={\"Test Count\"} />\n                            <DashboardCard countData={reportCount} fieldName={\"Report Count\"} />\n                            <DashboardCard countData={patientCount} fieldName={\"Patient Count\"} />\n                        </>\n                    )}\n                </div>\n            </Box>\n\n            <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\" }}>\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to={\"/diagnostCenterDashboard/notification\"}>Notification</NavLink>\n                </nav>\n                <Box\n                    component={\"div\"}\n                    sx={{\n                        position: \"relative\",\n                        top: \"4em\",\n                        width: \"100%\",\n                        display: \"flex\",\n                        height: \"100%\",\n                    }}\n                >\n                    <Box sx={{ width: \"100%\", height: \"70%\" }}>\n                        {loading ? (\n                            <>\n                                <Skeleton\n                                    variant=\"rectangular\"\n                                    width=\"100%\"\n                                    height={100}\n                                    sx={{ marginBottom: \"10px\" }}\n                                />\n                                <Skeleton\n                                    variant=\"rectangular\"\n                                    width=\"100%\"\n                                    height={100}\n                                    sx={{ marginBottom: \"10px\" }}\n                                />\n                            </>\n                        ) : notify.length === 0 ? (\n                            <NoAppointmentCard text_one={\"No notifications available\"} />\n                        ) : (\n                            displayedData.map((data, index) => (\n                                <CustomNotificationCard key={index} Data={data} />\n                            ))\n                        )}\n\n                        {!loading && notify.length > 3 && (\n                            <CustomButton\n                                label={viewAll ? \"Show Less\" : \"View All\"}\n                                handleClick={toggleViewAll}\n                                isTransaprent={true}\n                                sx={{ marginTop: \"1rem\" }}\n                            ></CustomButton>\n                        )}\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default DiagnosticNotification;\n","import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport \"./cardNotification.scss\";\nimport { formatDate, formatDateDay } from \"../../../../constants/const\";\n\nconst CustomNotificationCard = ({ Data, index }) => {\n    return (\n        <>\n            <Box\n                key={index}\n                sx={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    borderBottom: \"1px solid #C9C5CA\",\n                    height: \"8rem\",\n                    padding: \"1%\",\n                    marginBottom: \"1rem\", // Add some space between cards\n                }}\n            >\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"flex-start\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"1.25rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.875rem\",\n                        }}\n                    >\n                        {Data?.type || \"Notification\"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>\n                                Your appointment with {Data?.recipient || \"patient Name\"} is\n                                canceled\n                            </span>\n                        ) : (\n                            <span>\n                                You have an appointment with {Data?.recipient || \"patient Name\"}\n                            </span>\n                        )}{\" \"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>  </span>\n                        ) : (\n                            <span>\n                            {Data?.parameters?.appointment_date && Data?.parameters?.appointment_time ? (\n                              <>\n                                {formatDateDay(Data?.parameters?.appointment_date)} Time {Data?.parameters?.appointment_time}\n                              </>\n                            ) : (\n                              \"appointment time and date\"\n                            )}\n                          </span>\n                          \n                        )}{\" \"}\n                    </Typography>\n                </Box>\n\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            textAlign: \"right\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {formatDate(Data?.notification_generated_time || Data?.created_at) ||\n                            \"Notification Generated Time\"}\n                    </Typography>\n                    {/* <CustomButton\n                        buttonCss={{\n                            display: \"flex\",\n                            width: \"10.625rem\",\n                            height: \"3rem\",\n                            padding: \"0.5rem 1rem\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            gap: \"0.5rem\",\n                            flexShrink: \"0\",\n                            borderRadius: \"6.25rem\",\n                        }}\n                        label=\"View\"\n                    /> */}\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default CustomNotificationCard;\n"],"names":["DoctorAppointmentCard","_ref","countData","fieldName","React","Box","sx","padding","border","borderRadius","display","flexDirection","alignItems","justifyContent","minWidth","margin","Typography","color","fontFamily","fontSize","fontWeight","DiagnosticNotification","testCount","setTestCount","useState","reportCount","setReportCount","patientCount","setPatientCount","notify","setNotify","loading","setLoading","staff_id","localStorage","getItem","viewAll","setViewAll","useEffect","async","_response$data","response","axiosInstance","get","concat","Count","data","keyword_count","error","fetchdashboardTestCount","_response$data2","fetchdashboardReportCount","_response$data3","fetchdashboardPatientCount","_response$data4","Notification","displayedData","slice","className","Skeleton","variant","width","height","marginBottom","DashboardCard","NavLink","to","component","position","top","length","NoAppointmentCard","text_one","map","index","CustomNotificationCard","key","Data","CustomButton","label","handleClick","toggleViewAll","prev","isTransaprent","marginTop","_Data$parameters","_Data$parameters2","_Data$parameters3","_Data$parameters4","borderBottom","fontStyle","lineHeight","type","letterSpacing","recipient","parameters","appointment_date","appointment_time","formatDateDay","textAlign","formatDate","notification_generated_time","created_at"],"sourceRoot":""}