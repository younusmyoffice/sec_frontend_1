{"version":3,"file":"670.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/Clinic/ClinicDashboard/ClinicNotification/Clinicnotification.js","webpack://sec-frontend/./src/DoctorModule/CustomDoctorComponent/Cards/CardNotification/CardNotification.js"],"sourcesContent":["import { Box } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport DoctorAppointmentCard from \"../../../../DoctorModule/CustomDoctorComponent/CustomDoctorAppointment/DoctorAppointment\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport CardNotification from \"../../../../components/Card/CustomNotificationCard/CardNotification\";\nimport CustomNotificationCard from \"../../../../DoctorModule/CustomDoctorComponent/Cards/CardNotification/CardNotification\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport Skeleton from \"react-loading-skeleton\";\n\nconst ClinicNotification = () => {\n    const [loading, setLoading] = useState(true); // Loading state\n    const [upcomingCount, setUpcomingCount] = useState(0);\n    const [completeCount, setCompleteCount] = useState(0);\n    const [requestCount, setRequestCount] = useState(0);\n    const [notification, setNotification] = useState([]);\n    const [viewAll, setViewAll] = useState(false);\n\n    const doctor_id = localStorage.getItem(\"clinic_suid\");\n\n    const navigate = useNavigate();\n\n    const status_booked = \"booked\";\n    const status_complete = \"completed\";\n    const status_in_progress = \"in_progress\";\n\n    const clinicDashboardAppointmentUpcomngCount = async (doctor_id, status_booked) => {\n        setLoading(true); // Set loading to true\n        try {\n            const response = await axiosInstance.get(\n                `sec/hcf/${doctor_id}/${status_booked}/clinicDashboardAppointmentUpcomngCount`,\n            );\n            const Count = response?.data?.response[0]?.keyword_count || 0;\n            setUpcomingCount(Count);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false); // Set loading to false\n        }\n    };\n    const clinicDashboardAppointmentCompleteCount = async (doctor_id, status_complete) => {\n        setLoading(true); // Set loading to true\n        try {\n            const response = await axiosInstance.get(\n                `sec/hcf/${doctor_id}/${status_complete}/clinicDashboardAppointmentCompleteCount`,\n            );\n            const Count = response?.data?.response[0]?.keyword_count || 0;\n            setCompleteCount(Count);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false); // Set loading to false\n        }\n    };\n    const clinicDashboardAppointmentRequestCount = async (doctor_id, status_in_progress) => {\n        setLoading(true); // Set loading to true\n        try {\n            const response = await axiosInstance.get(\n                `sec/hcf/${doctor_id}/${status_in_progress}/clinicDashboardAppointmentRequestCount`,\n            );\n            const Count = response?.data?.response[0]?.keyword_count || 0;\n            setRequestCount(Count);\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false); // Set loading to false\n        }\n    };\n    const getNotifcation = async (doctor_id) => {\n        setLoading(true); // Set loading to true\n        try {\n            const response = await axiosInstance.get(`sec/hcf/${doctor_id}/clinicNotification`);\n            const Count = response?.data?.response || [];\n            setNotification(Array.isArray(Count) ? Count : [Count]); // Convert to array if not already\n        } catch (error) {\n            console.error(\"Error fetching staff data:\", error.response);\n        } finally {\n            setLoading(false); // Set loading to false\n        }\n    };\n\n    useEffect(() => {\n        clinicDashboardAppointmentUpcomngCount(doctor_id, status_booked);\n        clinicDashboardAppointmentCompleteCount(doctor_id, status_complete);\n        clinicDashboardAppointmentRequestCount(doctor_id, status_in_progress);\n        getNotifcation(doctor_id);\n    }, [doctor_id]);\n\n    React.useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"dashboard\");\n        localStorage.setItem(\"path\", \"clinirequests\");\n    }, []);\n\n    const handleCardClick = (path) => {\n        navigate(path);\n    };\n    const toggleViewAll = () => {\n        setViewAll((prev) => !prev);\n    };\n\nconst displayedData = viewAll ? notification : notification.slice(0, 3);\n\n    return (\n        <>\n            <Box sx={{ width: \"100%\", height: \"70vh\" }}>\n                <div className=\"Appointment-card1\">\n                    {loading ? (\n                        <>\n                            <Skeleton variant=\"rectangular\" width={300} height={150} />\n                            <Skeleton variant=\"rectangular\" width={300} height={150} />\n                            <Skeleton variant=\"rectangular\" width={300} height={150} />\n                        </>\n                    ) : (\n                        <>\n                            <DoctorAppointmentCard\n                                NumberOfAppointments={upcomingCount}\n                                AppointmentType=\"Upcoming Appointment\"\n                                onClick={() =>\n                                    handleCardClick(\n                                        \"/clinicDashboard/clinicmyappointment/clinicupcoming\",\n                                    )\n                                }\n                            />\n                            <DoctorAppointmentCard\n                                NumberOfAppointments={completeCount}\n                                AppointmentType=\"Completed\"\n                                onClick={() =>\n                                    handleCardClick(\n                                        \"/clinicDashboard/clinicmyappointment/cliniccompleted\",\n                                    )\n                                }\n                            />\n                            <DoctorAppointmentCard\n                                NumberOfAppointments={requestCount}\n                                AppointmentType=\"Appointment Request\"\n                                onClick={() =>\n                                    handleCardClick(\n                                        \"/clinicDashboard/clinicmyappointment/clinicrequest\",\n                                    )\n                                }\n                            />\n                        </>\n                    )}\n                </div>\n                <Box sx={{ display: \"flex\", width: \"98%\", height: \"100%\", height: \"90%\" }}>\n                    <nav className=\"NavBar-Container-Appoinement\">\n                        <NavLink to={\"/clinicDashboard/clinicbodydashboard/clinirequests\"}>\n                            Requests\n                        </NavLink>\n                        <NavLink to={\"/clinicDashboard/clinicbodydashboard/clinicnotification\"}>\n                            Notifications\n                        </NavLink>\n                    </nav>\n                    <Box\n                        component={\"div\"}\n                        sx={{ position: \"relative\", top: \"4em\", width: \"100%\", display: \"flex\" }}\n                    >\n                        <Box\n                            sx={{\n                                position: \"relative\",\n                                width: \"100%\",\n                                border: \"1px solid #E6E1E5\",\n                                borderRadius: \"8px\",\n                                padding: \"1rem\",\n                            }}\n                        >\n                            <Box sx={{ width: \"100%\" }}>\n                                {loading ? (\n                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n                                ) : notification.length === 0 ? (\n                                    <NoAppointmentCard text_one=\"No Notification\" />\n                                ) :(\n                                    displayedData.map((data, index) => (\n                                        <CustomNotificationCard key={index} Data={data} />\n                                    ))\n                                )}\n                            </Box>\n                            <Box sx={{ width: \"100%\", marginTop: \"8rem\" }}>\n                                {!loading && notification.length > 3 && (\n                                    <CustomButton\n                                        label={viewAll ? \"Show Less\" : \"View All\"}\n                                        handleClick={toggleViewAll}\n                                        isTransaprent={true}\n                                        sx={{ marginTop: \"1rem\" }}\n                                    ></CustomButton>\n                                )}\n                            </Box>\n                        </Box>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default ClinicNotification;\n","import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport \"./cardNotification.scss\";\nimport { formatDate, formatDateDay } from \"../../../../constants/const\";\n\nconst CustomNotificationCard = ({ Data, index }) => {\n    return (\n        <>\n            <Box\n                key={index}\n                sx={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    borderBottom: \"1px solid #C9C5CA\",\n                    height: \"8rem\",\n                    padding: \"1%\",\n                    marginBottom: \"1rem\", // Add some space between cards\n                }}\n            >\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"flex-start\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"1.25rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.875rem\",\n                        }}\n                    >\n                        {Data?.type || \"Notification\"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>\n                                Your appointment with {Data?.recipient || \"patient Name\"} is\n                                canceled\n                            </span>\n                        ) : (\n                            <span>\n                                You have an appointment with {Data?.recipient || \"patient Name\"}\n                            </span>\n                        )}{\" \"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>  </span>\n                        ) : (\n                            <span>\n                            {Data?.parameters?.appointment_date && Data?.parameters?.appointment_time ? (\n                              <>\n                                {formatDateDay(Data?.parameters?.appointment_date)} Time {Data?.parameters?.appointment_time}\n                              </>\n                            ) : (\n                              \"appointment time and date\"\n                            )}\n                          </span>\n                          \n                        )}{\" \"}\n                    </Typography>\n                </Box>\n\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            textAlign: \"right\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {formatDate(Data?.notification_generated_time || Data?.created_at) ||\n                            \"Notification Generated Time\"}\n                    </Typography>\n                    {/* <CustomButton\n                        buttonCss={{\n                            display: \"flex\",\n                            width: \"10.625rem\",\n                            height: \"3rem\",\n                            padding: \"0.5rem 1rem\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            gap: \"0.5rem\",\n                            flexShrink: \"0\",\n                            borderRadius: \"6.25rem\",\n                        }}\n                        label=\"View\"\n                    /> */}\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default CustomNotificationCard;\n"],"names":["ClinicNotification","loading","setLoading","useState","upcomingCount","setUpcomingCount","completeCount","setCompleteCount","requestCount","setRequestCount","notification","setNotification","viewAll","setViewAll","doctor_id","localStorage","getItem","navigate","useNavigate","useEffect","async","status_booked","_response$data","response","axiosInstance","get","concat","Count","data","keyword_count","error","clinicDashboardAppointmentUpcomngCount","status_complete","_response$data2","clinicDashboardAppointmentCompleteCount","status_in_progress","_response$data3","clinicDashboardAppointmentRequestCount","_response$data4","Array","isArray","getNotifcation","React","setItem","handleCardClick","path","displayedData","slice","Box","sx","width","height","className","Skeleton","variant","DoctorAppointmentCard","NumberOfAppointments","AppointmentType","onClick","display","NavLink","to","component","position","top","border","borderRadius","padding","length","NoAppointmentCard","text_one","map","index","CustomNotificationCard","key","Data","marginTop","CustomButton","label","handleClick","toggleViewAll","prev","isTransaprent","_ref","_Data$parameters","_Data$parameters2","_Data$parameters3","_Data$parameters4","justifyContent","borderBottom","marginBottom","flexDirection","alignItems","Typography","color","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","type","letterSpacing","recipient","parameters","appointment_date","appointment_time","formatDateDay","textAlign","formatDate","notification_generated_time","created_at"],"sourceRoot":""}