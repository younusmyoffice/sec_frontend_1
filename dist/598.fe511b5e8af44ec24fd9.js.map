{"version":3,"file":"598.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/DoctorModule/DoctorListing/CreateNewListing/AddQuestioner/EditQuestionModal.js","webpack://sec-frontend/./src/DoctorModule/DoctorListing/CreateNewListing/AddQuestioner/AddQuestioner.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { CircularProgress, Typography } from \"@mui/material\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport CustomModal from \"../../../../components/CustomModal\";\nimport CustomTextField from \"../../../../components/CustomTextField\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar/custom-sack-bar\";\nimport \"./addquestioner.scss\";\n\nconst EditQuestionModal = ({\n    isOpen,\n    onClose,\n    questionData,\n    onQuestionUpdated,\n}) => {\n    const [formData, setFormData] = useState({\n        question: \"\",\n        ans_1: \"\",\n        ans_2: \"\",\n        ans_3: \"\",\n        ans_4: \"\"\n    });\n    const [loading, setLoading] = useState(false);\n    const [snackOpen, setSnackOpen] = useState(false);\n    const [snackMessage, setSnackMessage] = useState(\"\");\n    const [snackType, setSnackType] = useState(\"success\");\n    const [isLoadingQuestionData, setIsLoadingQuestionData] = useState(false);\n\n    // Fetch question data when modal opens\n    const fetchQuestionData = async (questionId) => {\n        setIsLoadingQuestionData(true);\n        try {\n            console.log(\"EditQuestionModal - Fetching question data for ID:\", questionId);\n            const response = await axiosInstance.get(`/sec/createUpdatedoctorlisting/questionById/${questionId}`);\n            \n            console.log(\"EditQuestionModal - API Response:\", response.data);\n            const list = response.data?.response?.DocListingQuestion;\n            const question = Array.isArray(list) && list.length ? list[0] : null;\n            if (question) {\n                \n                console.log(\"EditQuestionModal - Question data received:\", question);\n                \n                const newFormData = {\n                    question: question?.question || \"\",\n                    ans_1: question?.ans_1 || \"\",\n                    ans_2: question?.ans_2 || \"\",\n                    ans_3: question?.ans_3 || \"\",\n                    ans_4: question?.ans_4 || \"\"\n                };\n                \n                console.log(\"EditQuestionModal - Setting form data to:\", newFormData);\n                setFormData(newFormData);\n            } else {\n                console.error(\"EditQuestionModal - No question data found in response\");\n                setSnackMessage(\"Failed to load question data\");\n                setSnackType(\"error\");\n                setSnackOpen(true);\n            }\n        } catch (error) {\n            console.error(\"EditQuestionModal - Error fetching question data:\", error);\n            setSnackMessage(\"Failed to load question data\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n        } finally {\n            setIsLoadingQuestionData(false);\n        }\n    };\n\n    useEffect(() => {\n        console.log(\"EditQuestionModal - useEffect triggered, isOpen:\", isOpen, \"questionData:\", questionData);\n        \n        if (questionData && isOpen) {\n            // Extract question ID from questionData\n            const questionId = questionData?.doctor_questions_id || questionData?.question_id;\n            console.log(\"EditQuestionModal - Question ID extracted:\", questionId);\n            \n            if (questionId) {\n                fetchQuestionData(questionId);\n            } else {\n                console.error(\"EditQuestionModal - No question ID found in questionData\");\n                setSnackMessage(\"No question ID found\");\n                setSnackType(\"error\");\n                setSnackOpen(true);\n            }\n        }\n    }, [questionData, isOpen]);\n\n    const handleInputChange = (field, value) => {\n        setFormData(prev => ({\n            ...prev,\n            [field]: value\n        }));\n    };\n\n    const handleSubmit = async () => {\n        if (!formData.question || !formData.ans_1 || !formData.ans_2) {\n            setSnackMessage(\"Please fill in the question and at least 2 answers\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n            return;\n        }\n\n        setLoading(true);\n        try {\n            const payload = {\n                doctor_questions_id: Number(questionData?.doctor_questions_id || questionData?.question_id),\n                doctor_id: Number(questionData?.doctor_id),\n                doctor_list_id: Number(questionData?.doctor_list_id),\n                question: formData.question,\n                ans_1: formData.ans_1,\n                ans_2: formData.ans_2,\n                ans_3: formData.ans_3,\n                ans_4: formData.ans_4\n            };\n\n            console.log(\"Updating question with payload:\", payload);\n\n            const response = await axiosInstance.post(\n                \"/sec/createUpdatedoctorlisting/questionUpdate\",\n                payload\n            );\n\n            setSnackMessage(response?.data?.response?.message || \"Question updated successfully\");\n            setSnackType(\"success\");\n            setSnackOpen(true);\n            \n            // Call the callback to refresh the questions list\n            if (onQuestionUpdated) {\n                onQuestionUpdated();\n            }\n            \n            // Close the modal after a short delay\n            setTimeout(() => {\n                onClose();\n            }, 1500);\n\n        } catch (error) {\n            console.error(\"Error updating question:\", error);\n            setSnackMessage(error?.response?.data?.error || \"Failed to update question\");\n            setSnackType(\"error\");\n            setSnackOpen(true);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleClose = () => {\n        if (!loading) {\n            onClose();\n        }\n    };\n\n    console.log(\"EditQuestionModal - Rendering modal, isOpen:\", isOpen);\n    console.log(\"EditQuestionModal - Current formData:\", formData);\n    \n    return (\n        <>\n            <CustomSnackBar isOpen={snackOpen} message={snackMessage} type={snackType} />\n            \n            <CustomModal\n                isOpen={isOpen}\n                onClose={handleClose}\n                disableBackdropClick={loading}\n                style={{ zIndex: 9999 }}\n                title={\n                    <Typography variant=\"h6\" fontFamily=\"poppins\" fontWeight=\"500\">\n                        Edit Question\n                    </Typography>\n                }\n                footer={\n                    <div style={{ display: \"flex\", gap: \"12px\", justifyContent: \"flex-end\" }}>\n                        <CustomButton\n                            label=\"Cancel\"\n                            isTransaprent={true}\n                            handleClick={handleClose}\n                            disabled={loading || isLoadingQuestionData}\n                            buttonCss={{\n                                border: \"1px solid #E72B4A\",\n                                color: \"#E72B4A\",\n                                fontFamily: \"poppins\",\n                                fontSize: \"16px\",\n                                fontWeight: \"500\"\n                            }}\n                        />\n                        <CustomButton\n                            label={loading ? \"Updating...\" : \"Update Question\"}\n                            handleClick={handleSubmit}\n                            disabled={loading || isLoadingQuestionData}\n                            buttonCss={{\n                                backgroundColor: \"#E72B4A\",\n                                color: \"white\",\n                                fontFamily: \"poppins\",\n                                fontSize: \"16px\",\n                                fontWeight: \"500\",\n                                \"&:hover\": {\n                                    backgroundColor: \"#d61e3f\"\n                                }\n                            }}\n                        />\n                    </div>\n                }\n            >\n                <div style={{ padding: \"20px\", minWidth: \"500px\" }}>\n                    {isLoadingQuestionData ? (\n                        <div style={{ \n                            display: \"flex\", \n                            justifyContent: \"center\", \n                            alignItems: \"center\", \n                            height: \"200px\",\n                            flexDirection: \"column\",\n                            gap: \"16px\"\n                        }}>\n                            <CircularProgress size={40} />\n                            <Typography variant=\"body1\" fontFamily=\"poppins\">\n                                Loading question data...\n                            </Typography>\n                        </div>\n                    ) : (\n                        <div>\n                            <div style={{ marginBottom: \"20px\" }}>\n                                <CustomTextField\n                                    label=\"Question\"\n                                    CustomValue={formData.question || \"\"}\n                                    onChange={(e) => handleInputChange('question', e.target.value)}\n                                    textcss={{\n                                        width: \"100%\",\n                                        fontFamily: \"poppins\",\n                                        fontSize: \"16px\"\n                                    }}\n                                    multiline\n                                    rows={3}\n                                    required\n                                />\n                            </div>\n\n                            {[1, 2, 3, 4].map((ansNum) => (\n                                <div key={ansNum} style={{ marginBottom: \"16px\" }}>\n                                    <CustomTextField\n                                        label={`Answer ${ansNum}`}\n                                        CustomValue={formData[`ans_${ansNum}`] || \"\"}\n                                        onChange={(e) => handleInputChange(`ans_${ansNum}`, e.target.value)}\n                                        textcss={{\n                                            width: \"100%\",\n                                            fontFamily: \"poppins\",\n                                            fontSize: \"16px\"\n                                        }}\n                                        required={ansNum <= 2}\n                                    />\n                                </div>\n                            ))}\n\n                            {loading && (\n                                <div style={{ \n                                    display: \"flex\", \n                                    justifyContent: \"center\", \n                                    alignItems: \"center\", \n                                    marginTop: \"20px\" \n                                }}>\n                                    <CircularProgress size={24} />\n                                    <Typography style={{ marginLeft: \"12px\", fontFamily: \"poppins\" }}>\n                                        Updating question...\n                                    </Typography>\n                                </div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </CustomModal>\n        </>\n    );\n};\n\nexport default EditQuestionModal;\n","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Box, Typography, Skeleton } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport \"./addquestioner.scss\";\nimport CustomTextField from \"../../../../components/CustomTextField/custom-text-field\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar/custom-sack-bar\";\nimport EditQuestionModal from \"./EditQuestionModal\";\nimport { useListingMode } from \"../../shared/useListingMode\";\nimport SectionCard from \"../../shared/SectionCard\";\nimport StepHeader from \"../../shared/StepHeader\";\n\nconst AddQuestioner = () => {\n    const { mode, listingId, doctorId, setUnifiedListingId } = useListingMode();\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"listing\");\n        localStorage.setItem(\"path\", \"addquestioner\");\n        \n        // Ensure unified listing id in edit mode\n        setUnifiedListingId();\n        \n        // Step guard: require listing_id to proceed\n        if (!listingId) {\n            console.warn(\"No listing_id found. Redirecting to listing details.\");\n            navigate(\"/doctordashboard/doctorListing/listingdetails\", { replace: true });\n            return;\n        }\n\n        // Fetch existing questions\n        fetchExistingQuestions();\n    }, []);\n    const [typemessage , setTypemessage] = useState(\"success\");\n    const [isopen , setIsopen] = useState(false);\n    const [message , setMessage] = useState(\"\");\n    const [existingQuestions, setExistingQuestions] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [editModalOpen, setEditModalOpen] = useState(false);\n    const [selectedQuestion, setSelectedQuestion] = useState(null);\n    const [data, setData] = useState({\n        questions: []\n    });\n\n    console.log(\"Questions Data : \", data);\n\n    // Fetch existing questions\n    const fetchExistingQuestions = async () => {\n        setLoading(true);\n        try {\n            // Use backend route that returns questions by listing and doctor\n            const response = await axiosInstance.get(`/sec/getdoctorlisting/questionAll/${listingId}/${doctorId}`);\n            console.log(\"Existing questions response:\", response.data);\n            \n            if (Array.isArray(response.data?.response)) {\n                setExistingQuestions(response.data.response);\n            } else {\n                setExistingQuestions([]);\n            }\n        } catch (error) {\n            console.error(\"Error fetching existing questions:\", error);\n            setExistingQuestions([]);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchData = async () => {\n        console.log(\"Entered the fetch data\");\n        setIsopen(false);\n        try {\n            let response = await axiosInstance.post(\n                \"/sec/createUpdatedoctorlisting/questionCreate\",\n                JSON.stringify({\n                    questions: data.questions.map(q => ({\n                        ...q,\n                        doctor_id: doctorId,\n                        doctor_list_id: listingId,\n                    }))\n                }),\n            );\n            console.log(\"Added question response : \" , response?.data?.response?.message);\n            setMessage(response?.data?.response?.message);\n            setTypemessage(\"success\");\n            setIsopen(true);\n            setTimeout( () => {\n            navigate(\"/doctordashboard/doctorListing/termandcondition\", { replace: true });\n            } ,2000 )\n        } catch (error) {\n            alert(\"Fill the details properly\", error);\n            setMessage(\"Not able to add the question\")\n            setTypemessage(\"error\")\n            console.log(error);\n            setIsopen(true);\n        }\n    };\n\n    const navigate = useNavigate();\n\n    const handleAddQuestion = () => {\n        setData((prevData) => ({\n            questions: [\n                ...prevData.questions,\n                {\n                    doctor_id: doctorId,\n                    doctor_list_id: listingId,\n                    question: \"\",\n                    ans_1: \"\",\n                    ans_2: \"\",\n                    ans_3: \"\",\n                    ans_4: \"\",\n                },\n            ],\n        }));\n    };\n\n    const handleDeleteQuestion = (questionIndex) => {\n        setData((prevData) => {\n            const updatedQuestions = [...prevData.questions];\n            updatedQuestions.splice(questionIndex, 1);\n            return { questions: updatedQuestions };\n        });\n    };\n\n    const handleInputChange = (event, questionIndex, field) => {\n        const { value } = event.target;\n\n        setData((prevData) => {\n            const updatedQuestions = [...prevData.questions];\n            updatedQuestions[questionIndex] = {\n                ...updatedQuestions[questionIndex],\n                [field]: value,\n            };\n            return { questions: updatedQuestions };\n        });\n    };\n\n    const handleAnswerInputChange = (event, index, ansNum) => {\n        const { value } = event.target;\n\n        setData((prevData) => {\n            const updatedQuestions = [...prevData.questions];\n            updatedQuestions[index] = {\n                ...updatedQuestions[index],\n                [`ans_${ansNum}`]: value,\n            };\n            return { questions: updatedQuestions };\n        });\n    };\n\n    // Edit question handlers\n    const handleEditQuestion = (question) => {\n        console.log(\"Editing question:\", question);\n        setSelectedQuestion(question);\n        setEditModalOpen(true);\n    };\n\n    const handleQuestionUpdated = () => {\n        // Refresh the questions list after editing\n        fetchExistingQuestions();\n        setEditModalOpen(false);\n        setSelectedQuestion(null);\n    };\n\n    const handleDeleteExistingQuestion = async (questionId) => {\n        try {\n            const response = await axiosInstance.post(\"/sec/createUpdatedoctorlisting/questionDelete\", {\n                doctor_id: Number(localStorage.getItem(\"doctor_suid\")),\n                doctor_list_id: Number(localStorage.getItem(\"listing_id\")),\n                doctor_questions_id: Number(questionId),\n            });\n            console.log(\"Question deleted:\", response.data);\n            setMessage(\"Question deleted successfully\");\n            setTypemessage(\"success\");\n            setIsopen(true);\n            // Refresh the questions list\n            fetchExistingQuestions();\n        } catch (error) {\n            console.error(\"Error deleting question:\", error);\n            setMessage(\"Failed to delete question\");\n            setTypemessage(\"error\");\n            setIsopen(true);\n        }\n    };\n\n    return (\n        <>\n            <CustomSnackBar isOpen={isopen} message={message} type={typemessage} />\n            \n            {/* Edit Question Modal */}\n            <EditQuestionModal\n                isOpen={editModalOpen}\n                onClose={() => setEditModalOpen(false)}\n                questionData={selectedQuestion}\n                onQuestionUpdated={handleQuestionUpdated}\n            />\n            <div className=\"main-container\" style={{ width: '100%', maxWidth: 960, margin: '0 auto' }}>\n                <StepHeader />\n                <SectionCard\n                  title=\"Existing Questions\"\n                  subtitle=\"Review and manage the preset questions shown to patients\"\n                  actions={\n                    <CustomButton\n                        label=\"Add\"\n                        isTransaprent={true}\n                        isElevated\n                        handleClick={handleAddQuestion}\n                        buttonCss={{\n                            border: \"1px solid #E72B4A\",\n                            color: \"#E72B4A\",\n                            fontFamily: \"poppins\",\n                            fontSize: \"14px\",\n                            padding: \"6px 16px\",\n                            borderRadius: '24px'\n                        }}\n                    />\n                  }\n                >\n                  {loading ? (\n                        Array.from({ length: 3 }).map((_, index) => (\n                            <Box key={index} sx={{ marginBottom: 2 }}>\n                                <Skeleton variant=\"rectangular\" width=\"100%\" height={120} />\n                            </Box>\n                        ))\n                    ) : existingQuestions.length === 0 ? (\n                        <Box sx={{ \n                            textAlign: \"center\", \n                            padding: \"32px\", \n                            color: \"#666\",\n                            fontFamily: \"poppins\"\n                        }}>\n                            No existing questions found\n                        </Box>\n                    ) : (\n                        existingQuestions.map((question, index) => (\n                            <Box key={question.doctor_questions_id || index} className=\"question-card\" sx={{ mb: 2 }}>\n                                <div className=\"question-header\" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                    <Typography variant=\"subtitle1\" sx={{ fontFamily: \"poppins\", fontWeight: 500 }}>\n                                        Question {index + 1}\n                                    </Typography>\n                                    <div className=\"question-actions\">\n                                        <CustomButton\n                                            label=\"Edit\"\n                                            isTransaprent={true}\n                                            handleClick={() => handleEditQuestion(question)}\n                                            buttonCss={{\n                                                border: \"1px solid #E72B4A\",\n                                                color: \"#E72B4A\",\n                                                fontFamily: \"poppins\",\n                                                fontSize: \"14px\",\n                                                padding: \"4px 12px\",\n                                                marginRight: \"8px\"\n                                            }}\n                                        />\n                                        <CustomButton\n                                            label=\"Delete\"\n                                            isTransaprent={true}\n                                            handleClick={() => handleDeleteExistingQuestion(question.doctor_questions_id)}\n                                            buttonCss={{\n                                                border: \"1px solid #d32f2f\",\n                                                color: \"#d32f2f\",\n                                                fontFamily: \"poppins\",\n                                                fontSize: \"14px\",\n                                                padding: \"4px 12px\"\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                                <Typography variant=\"body1\" sx={{ fontFamily: \"poppins\", marginBottom: \"12px\" }}>\n                                    {question.question}\n                                </Typography>\n                                <div className=\"answers-grid\">\n                                    {[1, 2, 3, 4].map((ansNum) => (\n                                        <Typography key={ansNum} variant=\"body2\" sx={{ \n                                            fontFamily: \"poppins\", \n                                            color: \"#666\",\n                                            marginBottom: \"4px\"\n                                        }}>\n                                            {ansNum}. {question[`ans_${ansNum}`] || \"No answer\"}\n                                        </Typography>\n                                    ))}\n                                </div>\n                            </Box>\n                        ))\n                    )}\n                </SectionCard>\n\n                <SectionCard title=\"Add / Edit Question\" subtitle=\"Provide a question and up to 4 answer options\">\n                    <div className=\"text-fields\">\n                        {/* Mapping number of question s */}\n                        {data.questions.map((question, index) => (\n                            <div key={index} className=\"border-box\">\n                                <div className=\"text-fields\">\n                                    <CustomTextField\n                                        label={`Question ${index + 1}`}\n                                        helperText={\"\"}\n                                        textcss={{ width: \"591px\" }}\n                                        // value={question.question}\n                                        defaultValue={question.question}\n                                        onInput={(event) => {\n                                            handleInputChange(event, index, \"question\");\n                                            const Copy = {\n                                                ...data,\n                                                question: event.target.value,\n                                            };\n                                            console.log(\n                                                \"this is the event  : \",\n                                                event.target.value,\n                                            );\n                                            setData(Copy);\n                                        }}\n                                    ></CustomTextField>\n\n                                    {[1, 2, 3, 4].map((ansNum) => (\n                                        <CustomTextField\n                                            key={ansNum}\n                                            label={`Answer${ansNum}`}\n                                            helperText={\"\"}\n                                            textcss={{ width: \"591px\" }}\n                                            value={question[`ans_${ansNum}`]}\n                                            defaultValue={question[`ans_${ansNum}`]}\n                                            onInput={(event) =>\n                                                handleAnswerInputChange(event, index, ansNum)\n                                            }\n                                        ></CustomTextField>\n                                    ))}\n                                </div>\n                                <div\n                                    className=\"Delete-Icon\"\n                                    style={{\n                                        // border: \"1px solid\",\n                                        display: \"flex\",\n                                        alignItems: \"center\",\n                                    }}\n                                >\n                                    <Box>\n                                        <DeleteIcon onClick={() => handleDeleteQuestion(index)} />\n                                    </Box>\n\n                                    <CustomButton\n                                        label=\"Delete\"\n                                        isTransaprent={\"True\"}\n                                        buttonCss={{\n                                            width: \"122px\",\n                                            height: \"48px\",\n                                            borderTop: \"1px\",\n                                            borderRight: \"1px\",\n                                            borderBottom: \"1px\",\n                                            borderLeft: \"1px\",\n                                        }}\n                                        handleClick={() => handleDeleteQuestion(index)}\n                                    ></CustomButton>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </SectionCard>\n\n                <Box sx={{ marginTop: \"1%\" }}>\n                    <CustomButton\n                        buttonCss={{ width: \"10.625rem\", borderRadius: \"6.25rem\", margin: \"0.5%\" }}\n                        label=\"Save As Draft\"\n                        isTransaprent={true}\n                        handleClick={() => fetchData()}\n                    />\n                    <CustomButton\n                        buttonCss={{ width: \"10.625rem\", borderRadius: \"6.25rem\", margin: \"0.5%\" }}\n                        label=\"Next\"\n                        handleClick={() => fetchData()}\n                    />\n                </Box>\n            </div>\n        </>\n    );\n};\n\nexport default AddQuestioner;\n"],"names":["_ref","isOpen","onClose","questionData","onQuestionUpdated","formData","setFormData","useState","question","ans_1","ans_2","ans_3","ans_4","loading","setLoading","snackOpen","setSnackOpen","snackMessage","setSnackMessage","snackType","setSnackType","isLoadingQuestionData","setIsLoadingQuestionData","useEffect","questionId","doctor_questions_id","question_id","async","_response$data","list","axiosInstance","get","concat","data","response","DocListingQuestion","Array","isArray","length","newFormData","error","fetchQuestionData","handleInputChange","field","value","prev","_objectSpread","handleClose","React","CustomSnackBar","message","type","CustomModal","disableBackdropClick","style","zIndex","title","Typography","variant","fontFamily","fontWeight","footer","display","gap","justifyContent","CustomButton","label","isTransaprent","handleClick","disabled","buttonCss","border","color","fontSize","_response$data2","payload","Number","doctor_id","doctor_list_id","post","setTimeout","_error$response","backgroundColor","padding","minWidth","alignItems","height","flexDirection","CircularProgress","size","marginBottom","CustomTextField","CustomValue","onChange","e","target","textcss","width","multiline","rows","required","map","ansNum","key","marginTop","marginLeft","AddQuestioner","mode","listingId","doctorId","setUnifiedListingId","useListingMode","localStorage","setItem","fetchExistingQuestions","navigate","replace","typemessage","setTypemessage","isopen","setIsopen","setMessage","existingQuestions","setExistingQuestions","editModalOpen","setEditModalOpen","selectedQuestion","setSelectedQuestion","setData","questions","fetchData","_response$data3","JSON","stringify","q","alert","useNavigate","handleDeleteQuestion","questionIndex","prevData","updatedQuestions","splice","EditQuestionModal","handleQuestionUpdated","className","maxWidth","margin","StepHeader","SectionCard","subtitle","actions","isElevated","handleAddQuestion","borderRadius","from","_","index","Box","sx","Skeleton","textAlign","mb","handleEditQuestion","marginRight","getItem","handleDeleteExistingQuestion","helperText","defaultValue","onInput","event","Copy","handleAnswerInputChange","DeleteIcon","onClick","borderTop","borderRight","borderBottom","borderLeft"],"sourceRoot":""}