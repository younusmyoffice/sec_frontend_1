{"version":3,"file":"635.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/DoctorModule/DoctorStatistics/DoctorTransactions/DoctorTransaction.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination,\n    Skeleton,\n} from \"@mui/material\";\n\nimport { PaginationCard } from \"../../../PatientDashboard/PatientAppointment/PatientCards\";\nimport { TransactionCard } from \"./TransactionCard\";\nimport DoctorStatisticsNavbar from \"../../CustomDoctorComponent/DoctorStatisticsNavbar/DoctorStatisticsNavbar\";\nimport axiosInstance from \"../../../config/axiosInstance\";\nimport { ReceiveCard, SendCard, FaildCard } from \"../../../PatientDashboard/PatientManage/Transactions/TransactionCard\";\nimport NoAppointmentCard from \"../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { currencysign, formatDate } from \"../../../constants/const\";\n\nconst DoctorTransaction = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"statistics\");\n        localStorage.setItem(\"path\", \"doctorTransaction\");\n    }, []);\n\n    useEffect(() => {\n        GetTransactionsData();\n    }, []);\n\n    const GetTransactionsData = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.post(\n                \"/sec/doctor/DocTransaction/\",\n                JSON.stringify({\n                    doctor_id: localStorage.getItem(\"doctor_suid\"),\n                }),\n            );\n            setData(response?.data?.response || []);\n        } catch (error) {\n            console.log(\"Error : \", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const displayedData = data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n\n    return (\n        <Box sx={{ display: \"flex\", width: \"98%\", height: \"100%\", height: \"90%\" }}>\n            <DoctorStatisticsNavbar />\n            <Box\n                component={\"div\"}\n                sx={{\n                    position: \"relative\",\n                    top: \"4em\",\n                    width: \"100%\",\n                    display: \"flex\",\n                    height: \"100%\",\n                }}\n            >\n                <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                    <div>\n                        <TableContainer component={Paper} style={{ background: \"white\" }}>\n                            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Transaction & ID</TableCell>\n                                        <TableCell align=\"right\">Date & Time</TableCell>\n                                        <TableCell align=\"right\">Amount</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {loading ? (\n                                        // Skeleton loader rows\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell>\n                                                    <Skeleton\n                                                        variant=\"rectangular\"\n                                                        width=\"100%\"\n                                                        height={30}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={80} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={60} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : data.length === 0 ? (\n                                        // No data found message\n                                        <TableRow>\n                                            <TableCell colSpan={3} align=\"center\">\n                                                <NoAppointmentCard text_one={\"No Data Found\"} />{\" \"}\n                                            </TableCell>\n                                        </TableRow>\n                                    ) : (\n                                        // Render data rows\n                                        displayedData.map((row) => (\n                                            <TableRow key={row?.transaction_id}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    {row?.status === \"canceled\" ? (\n                                                        <FaildCard\n                                                            Payment={\"Paymemt Faild\"}\n                                                            TRXID={row?.transaction_id || \"N/A\"}\n                                                        />\n                                                    ) : (\n                                                        <ReceiveCard\n                                                            Payment={\"Payment Sucessfull\"}\n                                                            TRXID={row?.transaction_id || \"N/A\"}\n                                                        />\n                                                    )}\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    {row.appointment_date\n                                                        ? formatDate(row.appointment_date)\n                                                        : \"N/A\"}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={{ color: \"#E72B4A\" }}>\n                                                    {`${currencysign}${row?.amount || \"NA\"}`}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n\n                        {/* Table Pagination */}\n                        <TablePagination\n                            component=\"div\"\n                            count={data.length}\n                            page={page}\n                            onPageChange={handleChangePage}\n                            rowsPerPage={rowsPerPage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                        />\n                    </div>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default DoctorTransaction;\n"],"names":["DoctorTransaction","data","setData","useState","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","useEffect","localStorage","setItem","GetTransactionsData","async","_response$data","response","axiosInstance","post","JSON","stringify","doctor_id","getItem","error","displayedData","slice","React","Box","sx","display","width","height","DoctorStatisticsNavbar","component","position","top","TableContainer","Paper","style","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","map","_","index","key","Skeleton","variant","length","colSpan","NoAppointmentCard","text_one","row","transaction_id","scope","status","FaildCard","Payment","TRXID","ReceiveCard","appointment_date","formatDate","color","concat","currencysign","amount","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}