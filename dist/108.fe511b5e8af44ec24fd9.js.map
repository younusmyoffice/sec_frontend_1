{"version":3,"file":"108.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDashboard/Notifications/HCFAdminNotification.js","webpack://sec-frontend/./src/DoctorModule/CustomDoctorComponent/Cards/CardNotification/CardNotification.js"],"sourcesContent":["import { Box, Skeleton, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomNotificationCard from \"../../../../DoctorModule/CustomDoctorComponent/Cards/CardNotification/CardNotification\";\nimport DoctorAppointmentCard from \"../../../../DoctorModule/CustomDoctorComponent/CustomDoctorAppointment/DoctorAppointment\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport CustomButton from \"../../../../components/CustomButton\"; // Assuming CustomButton is correctly imported\n\nconst HCFAdminNotifications = () => {\n    const [digCount, setDigCount] = useState(0);\n    const [docCount, setDocCount] = useState(0);\n    const [hcfId] = useState(localStorage.getItem(\"hcfadmin_suid\"));\n    const [loading, setLoading] = useState(true);\n    const [notify, setNotify] = useState([]);\n    const [viewAll, setViewAll] = useState(false);\n\n    useEffect(() => {\n        // Hide location search container on load\n        const locationContainer = document.getElementById(\"location-search-container\");\n        if (locationContainer) locationContainer.style.display = \"none\";\n    }, []);\n\n    // Fetch diagnostic staff count\n    const fetchDashboardCountDiag = async () => {\n        try {\n            const resp = await axiosInstance.get(`/sec/hcf/dashboardDiagnosticCount/${hcfId}`);\n            setDigCount(resp?.data[0]?.diagnostic_staff_count || 0);\n        } catch (error) {\n            console.error(\"Error fetching diagnostic count:\", error);\n        }\n    };\n\n    // Fetch active doctor count\n    const fetchDashboardCountDoc = async () => {\n        try {\n            const resp = await axiosInstance.get(`/sec/hcf/dashboardClinicDoctorCount/${hcfId}`);\n            setDocCount(resp?.data[0]?.doctor_count || 0);\n        } catch (error) {\n            console.error(\"Error fetching doctor count:\", error);\n        }\n    };\n\n    // Fetch notifications\n    const fetchNotification = async () => {\n        try {\n            const resp = await axiosInstance.get(``);\n            setNotify(resp?.data?.response || []); // Ensure `notify` is an array\n        } catch (error) {\n            console.error(\"Error fetching notifications:\", error);\n        }\n    };\n\n    // Fetch all data on load\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n            await Promise.all([fetchDashboardCountDiag(), fetchDashboardCountDoc(), fetchNotification()]);\n            setLoading(false);\n        };\n        fetchData();\n    }, [hcfId]);\n\n    const toggleViewAll = () => setViewAll((prev) => !prev);\n\n    const displayedData = viewAll ? notify : notify.slice(0, 3);\n\n    return (\n        <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\" }}>\n            <Box sx={{ position: \"relative\", top: \"2em\", width: \"100%\", display: \"flex\", height: \"100%\" }}>\n                <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                    {/* Dashboard Cards */}\n                    <Box sx={{ display: \"flex\", justifyContent: \"space-around\", marginBottom: \"1rem\" }}>\n                        {loading ? (\n                            <>\n                                <Skeleton variant=\"rectangular\" width={210} height={118} />\n                                <Skeleton variant=\"rectangular\" width={210} height={118} />\n                            </>\n                        ) : (\n                            <>\n                                <DoctorAppointmentCard\n                                    AppointmentType=\"Diagnostic\"\n                                    NumberOfAppointments={digCount}\n                                />\n                                <DoctorAppointmentCard\n                                    AppointmentType=\"Active Doctors\"\n                                    NumberOfAppointments={docCount}\n                                />\n                            </>\n                        )}\n                    </Box>\n\n                    {/* Navigation Bar */}\n                    <nav className=\"NavBar-Container-Appoinement\">\n                        <NavLink to=\"/hcfadmin/notification\">Notifications</NavLink>\n                    </nav>\n\n                    {/* Notifications Section */}\n                    <Box sx={{ width: \"100%\", height: \"70%\", marginTop: \"7rem\" }}>\n                        {loading ? (\n                            Array.from({ length: 3 }).map((_, index) => (\n                                <Skeleton\n                                    key={index}\n                                    variant=\"rectangular\"\n                                    width=\"100%\"\n                                    height={100}\n                                    sx={{ marginBottom: \"10px\" }}\n                                />\n                            ))\n                        ) : notify.length === 0 ? (\n                            <NoAppointmentCard text_one=\"No notifications available\" />\n                        ) : (\n                            displayedData.map((data, index) => (\n                                <CustomNotificationCard key={index} Data={data} />\n                            ))\n                        )}\n\n                        {/* View All/Show Less Button */}\n                        {!loading && notify.length > 3 && (\n                            <CustomButton\n                                label={viewAll ? \"Show Less\" : \"View All\"}\n                                handleClick={toggleViewAll}\n                                isTransaprent\n                                sx={{ marginTop: \"1rem\" }}\n                            />\n                        )}\n                    </Box>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default HCFAdminNotifications;\n","import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport \"./cardNotification.scss\";\nimport { formatDate, formatDateDay } from \"../../../../constants/const\";\n\nconst CustomNotificationCard = ({ Data, index }) => {\n    return (\n        <>\n            <Box\n                key={index}\n                sx={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    borderBottom: \"1px solid #C9C5CA\",\n                    height: \"8rem\",\n                    padding: \"1%\",\n                    marginBottom: \"1rem\", // Add some space between cards\n                }}\n            >\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"flex-start\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"1.25rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.875rem\",\n                        }}\n                    >\n                        {Data?.type || \"Notification\"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>\n                                Your appointment with {Data?.recipient || \"patient Name\"} is\n                                canceled\n                            </span>\n                        ) : (\n                            <span>\n                                You have an appointment with {Data?.recipient || \"patient Name\"}\n                            </span>\n                        )}{\" \"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>  </span>\n                        ) : (\n                            <span>\n                            {Data?.parameters?.appointment_date && Data?.parameters?.appointment_time ? (\n                              <>\n                                {formatDateDay(Data?.parameters?.appointment_date)} Time {Data?.parameters?.appointment_time}\n                              </>\n                            ) : (\n                              \"appointment time and date\"\n                            )}\n                          </span>\n                          \n                        )}{\" \"}\n                    </Typography>\n                </Box>\n\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            textAlign: \"right\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {formatDate(Data?.notification_generated_time || Data?.created_at) ||\n                            \"Notification Generated Time\"}\n                    </Typography>\n                    {/* <CustomButton\n                        buttonCss={{\n                            display: \"flex\",\n                            width: \"10.625rem\",\n                            height: \"3rem\",\n                            padding: \"0.5rem 1rem\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            gap: \"0.5rem\",\n                            flexShrink: \"0\",\n                            borderRadius: \"6.25rem\",\n                        }}\n                        label=\"View\"\n                    /> */}\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default CustomNotificationCard;\n"],"names":["HCFAdminNotifications","digCount","setDigCount","useState","docCount","setDocCount","hcfId","localStorage","getItem","loading","setLoading","notify","setNotify","viewAll","setViewAll","useEffect","locationContainer","document","getElementById","style","display","fetchDashboardCountDiag","async","_resp$data$","resp","axiosInstance","get","concat","data","diagnostic_staff_count","error","fetchDashboardCountDoc","_resp$data$2","doctor_count","fetchNotification","_resp$data","response","Promise","all","fetchData","displayedData","slice","React","Box","sx","width","height","position","top","justifyContent","marginBottom","Skeleton","variant","DoctorAppointmentCard","AppointmentType","NumberOfAppointments","className","NavLink","to","marginTop","Array","from","length","map","_","index","key","NoAppointmentCard","text_one","CustomNotificationCard","Data","CustomButton","label","handleClick","toggleViewAll","prev","isTransaprent","_ref","_Data$parameters","_Data$parameters2","_Data$parameters3","_Data$parameters4","borderBottom","padding","flexDirection","alignItems","Typography","color","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","type","letterSpacing","recipient","parameters","appointment_date","appointment_time","formatDateDay","textAlign","formatDate","notification_generated_time","created_at"],"sourceRoot":""}