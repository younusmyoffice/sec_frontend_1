{"version":3,"file":"781.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminManage/AdminManageBooking/AdminBooking.js"],"sourcesContent":["import {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Skeleton,\n    Typography,\n    TablePagination,\n} from \"@mui/material\";\nimport { NavLink } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n    ReceiveCard,\n    SendCard,\n} from \"../../../../PatientDashboard/PatientManage/Transactions/TransactionCard\";\nimport { baseURL } from \"../../../../constants/const\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { formatDate, currencysign } from \"../../../../constants/const\";\nimport { doc } from \"prettier\";\n\nconst AdminBooking = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const hcf_id = localStorage.getItem('hcfadmin_suid'); // Example value; replace with your logic to get hcf_id\n\n\n    useEffect(() => {\n      document.getElementById(\"location-search-container\").style.display = \"none\";\n    }, [])\n    \n\n    const fetchData = async (hcf_id) => {\n        try {\n            const response = await axiosInstance(`/sec/hcf/getHcfAdminTransaction/${hcf_id}`);\n            setData(response?.data?.response || []);\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData(hcf_id);\n    }, [hcf_id]);\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"manage\");\n        localStorage.setItem(\"path\", \"hcfadminbooking\");\n    }, []);\n\n    const formatDateTime = (date, time) => {\n        const dateTime = new Date(`${date}T${time}`); // Assuming `time` is in 24-hour format\n        return dateTime.toLocaleString('en-GB', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            hour12: true\n        }).replace(',', ''); // Removes the comma between date and time\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0); // Reset to the first page when rows per page changes\n    };\n\n    return (\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\" }}>\n            <nav className=\"NavBar-Container-Appoinement\">\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminsale\"}>Sale Activities</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminoverview\"}>Overview</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminbooking\"}>Bookings</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminpayout\"}>Payout</NavLink>\n                <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminauditlog\"}>Audit Logs</NavLink>\n            </nav>\n\n            <Box\n                component={\"div\"}\n                sx={{\n                    position: \"relative\",\n                    top: \"4em\",\n                    width: \"100%\",\n                    display: \"flex\",\n                    height: \"90%\",\n                    flexDirection: \"column\"\n                }}\n            >\n                <TableContainer component={Paper} sx={{ backgroundColor: \"#ffff\" }}>\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Transaction & ID</TableCell>\n                                <TableCell align=\"center\"></TableCell>\n                                <TableCell align=\"center\">Date & Time</TableCell>\n                                <TableCell align=\"center\">Amount</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {loading ? (\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={5} align=\"center\">\n                                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                ) : data.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={4} align=\"center\">\n                                        <NoAppointmentCard text_one={\"No Data Found\"} />\n                                        </TableCell>\n                                    </TableRow>\n                            ) : (\n                                data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                                    <TableRow\n                                        key={row.transaction_id}\n                                        sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                                    >\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.status === \"canceled\" ? (\n                                                <SendCard\n                                                    Payment={row.status}\n                                                    TRXID={row.transaction_id}\n                                                />\n                                            ) : (\n                                                <ReceiveCard\n                                                    Payment={row.status}\n                                                    TRXID={row.transaction_id}\n                                                />\n                                            )}\n                                        </TableCell>\n                                        <TableCell align=\"center\">\n                                            {/* Add other details if necessary */}\n                                        </TableCell>\n                                        <TableCell align=\"center\">\n                                            {row.appointment_date}\n                                        </TableCell>\n                                        <TableCell\n                                            align=\"right\"\n                                            sx={{\n                                                color: \"#E72B4A\",\n                                                textAlign: \"center\",\n                                                fontFamily: \"Poppins\",\n                                                fontSize: \"0.875rem\",\n                                                fontStyle: \"normal\",\n                                                fontWeight: \"500\",\n                                                lineHeight: \"1.375rem\",\n                                                letterSpacing: \"0.00438rem\",\n                                            }}\n                                        >\n                                            {`₹${row.amount}`}\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                            )}\n                        </TableBody>\n                    </Table>\n                    <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={data.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n                </TableContainer>\n                \n            </Box>\n        </Box>\n    );\n};\n\nexport default AdminBooking;\n"],"names":["AdminBooking","data","setData","useState","loading","setLoading","error","setError","page","setPage","rowsPerPage","setRowsPerPage","hcf_id","localStorage","getItem","useEffect","document","getElementById","style","display","async","_response$data","response","axiosInstance","concat","fetchData","setItem","React","Box","sx","flexDirection","height","className","NavLink","to","component","position","top","width","TableContainer","Paper","backgroundColor","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","map","_","index","key","colSpan","Skeleton","variant","length","NoAppointmentCard","text_one","slice","row","transaction_id","border","scope","status","SendCard","Payment","TRXID","ReceiveCard","appointment_date","color","textAlign","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","letterSpacing","amount","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}