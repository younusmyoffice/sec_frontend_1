{"version":3,"file":"955.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/DoctorModule/CustomDoctorComponent/DoctorManageNavbar/DoctorManageNavbar.js","webpack://sec-frontend/./src/DoctorModule/DoctorManage/DoctorAuditLog/doctorAuditLog.js"],"sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst DoctorManageNavbar = () => {\n    return (\n        <nav className=\"NavBar-Container-Appoinement\">\n            {/* <NavLink to={\"/doctordashboard/doctorManage/doctorStaff\"}>Staff</NavLink> */}\n            <NavLink to={\"/doctordashboard/doctorManage/doctorAuditLog\"}>Audit Log</NavLink>\n        </nav>\n    );\n};\nexport default DoctorManageNavbar;\n","import {\n    Box,\n    Paper,\n    Skeleton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    Typography,\n} from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport DoctorManageNavbar from \"../../CustomDoctorComponent/DoctorManageNavbar/DoctorManageNavbar\";\nimport { AuditCards } from \"../../../HCFModule/DiagnosticCenter/DiagnosticManage/DiagnosticCenterAuditLog/AuditCards\";\nimport axiosInstance from \"../../../config/axiosInstance\";\nimport dayjs from \"dayjs\";\nimport NoAppointmentCard from \"../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { formatDate } from \"../../../PatientDashboard/DrDetailsCard/bookappointmentapihelperfunction\";\n\nconst formatTimestamp = (isoString) => {\n    return dayjs(isoString).format(\"MM/DD/YYYY, hh:mm:ss A\");\n};\n\nconst DoctorAuditLog = () => {\n    const [rows, setRows] = useState([]); // Ensure rows is always an array\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const doctor_id = localStorage.getItem(\"doctor_suid\")\n    const fetchAuditLogs = async () => {\n        try {\n            setLoading(true);\n            const response = await axiosInstance.get(\"/sec/doctor/DoctorAuditlogs\",{\n                params:{\n                    doctor_id\n                }\n            });\n            console.log(\"Audit log response:\", response.data.response);\n            setRows(response.data.response); // Ensure rows is an array\n        } catch (error) {\n            console.error(\"Error fetching audit logs:\", error);\n            setRows([]); // Fallback to empty array\n        } finally {\n            setLoading(false);\n        }\n    };\nconsole.log(\"this is audit log data\",\n    rows\n)\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    useEffect(() => {\n        fetchAuditLogs();\n    }, []);\n\n    return (\n        <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\" }}>\n            <DoctorManageNavbar />\n            <Box\n                sx={{\n                    position: \"relative\",\n                    top: \"4em\",\n                    width: \"100%\",\n                    display: \"flex\",\n                    height: \"100%\",\n                }}\n            >\n                <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                    <TableContainer component={Paper} style={{ background: \"white\" }}>\n                        <Table sx={{ minWidth: 1 }} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name & Details</TableCell>\n                                    <TableCell align=\"right\">Status</TableCell>\n                                    <TableCell align=\"right\">Action ID</TableCell>\n                                    <TableCell align=\"right\">Action</TableCell>\n                                    <TableCell align=\"right\">Time stamp</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {loading ? (\n                                    Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                        <TableRow key={index}>\n                                            <TableCell colSpan={5}>\n                                                <Skeleton variant=\"text\" width=\"100%\" height={40} />\n                                            </TableCell>\n                                        </TableRow>\n                                    ))\n                                ) : rows.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={5} align=\"center\">\n                                            <NoAppointmentCard text_one=\"No Data Found\" />\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    rows\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                        .map((row) => (\n                                            <TableRow key={row.actionid}>\n                                                <TableCell>\n                                                    <AuditCards\n                                                        name={row.name || \"NA\"}\n                                                        specialist=\"Doctor\"\n                                                        Id={row.id || \"NA\"}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align=\"right\"\n                                                sx={{\n                                                    color: row.status === 1 ? \"#E72B4A\" : \"gray\",\n                                                    fontWeight: row.status === 1 ? \"bold\" : \"normal\", // Optional for styling emphasis\n                                                }}>\n                                                    {row.status === 1 ? \"Active\" : \"Inactive\"}\n                                                </TableCell>\n                                                <TableCell align=\"right\">{row.actionid || \"NA\"}</TableCell>\n                                                <TableCell align=\"right\">{row.action || \"NA\"}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    {formatTimestamp(row.timestamp || \"NA\")}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                )}\n                            </TableBody>\n                        </Table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]}\n                            component=\"div\"\n                            count={rows.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                        />\n                    </TableContainer>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default DoctorAuditLog;\n"],"names":["DoctorManageNavbar","React","className","NavLink","to","DoctorAuditLog","rows","setRows","useState","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","doctor_id","localStorage","getItem","useEffect","async","response","axiosInstance","get","params","data","error","fetchAuditLogs","Box","sx","display","width","height","position","top","TableContainer","component","Paper","style","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","map","_","index","key","colSpan","Skeleton","variant","length","NoAppointmentCard","text_one","slice","row","actionid","AuditCards","name","specialist","Id","id","color","status","fontWeight","action","isoString","timestamp","dayjs","format","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}