{"version":3,"file":"973.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDoctor/AllDoctors/AllDoctor.js"],"sourcesContent":["import {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TablePagination,\n    Skeleton,\n} from \"@mui/material\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport { AllDoctorTable } from \"./AllDoctorTable\";\nimport pen from \"../../../../static/images/DrImages/Pen.svg\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport profile from \"../../../../static/images/DrImages/doc1.png\";\n\nconst HCFAllDoctors = () => {\n    const navigate = useNavigate();\n\n    const [data, setData] = useState([]);\n    const [nav_specialization, setNav_spelization] = useState([]);\n    const [specializationDoc, setSpecializationDoc] = useState(\"CARDIOLOGIST\");\n    const [specializationData, setSpecializationData] = useState([]);\n    const [hcf_id] = useState(localStorage.getItem(\"hcfadmin_suid\"));\n    const [loading, setLoading] = useState(false);\n\n    // Pagination state\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    useEffect(() => {\n        document.getElementById(\"location-search-container\").style.display = \"none\";\n        fetchData();\n    }, []);\n\n    const fetchData = async () => {\n        try {\n            const response = await axiosInstance(`/sec/hcf/DashboardDoctordetails`);\n            setData(response?.data?.response);\n            console.log(\"All doctor data:\", response.data.response);\n        } catch (error) {\n            console.log(error.response);\n        }\n    };\n\n    // Logic for specialization\n    const navSpecialization = async () => {\n        try {\n            const resp = await axiosInstance(`/sec/patient/doctorDepartments`);\n            setNav_spelization(resp?.data?.response);\n        } catch (err) {\n            console.log(\"Nav specialization error:\", err);\n        }\n    };\n\n    useEffect(() => {\n        navSpecialization();\n    }, []);\n\n    const scrollContainerRef = useRef(null);\n\n    const handleScrollLeft = () => {\n        if (scrollContainerRef.current) {\n            scrollContainerRef.current.scrollLeft -= 100;\n        }\n    };\n\n    const handleScrollRight = () => {\n        if (scrollContainerRef.current) {\n            scrollContainerRef.current.scrollLeft += 100;\n        }\n    };\n\n    const fetchSpecializationDetail = async (departmentName) => {\n        setLoading(true);\n        try {\n            const resp = await axiosInstance(\n                `/sec/hcf/clinicDoctorsByDept/${hcf_id}/${departmentName}`,\n            );\n            console.log(\"Response:\", departmentName);\n            setSpecializationData(resp?.data?.response[`${departmentName}`] || []);\n        } catch (err) {\n            console.log(\"Error:\", err);\n            setSpecializationData([]); // Ensure state is an array even on error\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchSpecializationDetail(specializationDoc);\n    }, [specializationDoc]);\n\n    // Handle pagination change\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const currentStatus = data?.status; // \"active\" or \"inactive\"\n\n    const [status, setStatus] = useState(currentStatus); // \"active\" or \"inactive\"\n\n    const toggleStatus = async (user_id) => {\n        try {\n            const newStatus = status === \"active\" ? \"inactive\" : \"active\"; // Toggle status\n            const response = await axiosInstance.post(`/sec/hcf/ActiveDeactiveClinicDoctor`, {\n                hcf_id: hcf_id,\n                clinic_doctor_id: String(user_id), // Ensure user_id is passed as a string\n                status: newStatus === \"active\" ? \"1\" : \"0\", // Convert to API-compatible format\n            });\n\n            if (response.status === 200) {\n                setSpecializationData((prevData) =>\n                    prevData.map((doctor) =>\n                        doctor.user_id === user_id ? { ...doctor, status: newStatus } : doctor,\n                    ),\n                );\n                alert(\n                    `User has been ${\n                        newStatus === \"active\" ? \"activated\" : \"deactivated\"\n                    } successfully.`,\n                );\n            } else {\n                alert(\"Failed to update status. Please try again.\");\n            }\n        } catch (error) {\n            console.error(\"Error toggling status:\", error);\n            alert(\"An error occurred while updating status.\");\n        }\n    };\n\n    return (\n        <>\n            <Box\n                sx={{\n                    display: \"flex\",\n                    width: \"98%\",\n                    height: \"90%\",\n                    flexDirection: \"row\",\n                }}\n            >\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to={\"/hcfadmin/doctor/alldoctors\"}>All Doctors</NavLink>\n                    <NavLink to={\"/hcfadmin/doctor/active\"}>Active</NavLink>\n                    <NavLink to={\"/hcfadmin/doctor/blocked\"}>Blocked</NavLink>\n                    <CustomButton\n                        buttonCss={{ position: \"absolute\", right: \"0\", borderRadius: \"6.25rem\" }}\n                        isTransaprent={true}\n                        label=\"Add Doctors\"\n                        handleClick={() => {\n                            navigate(\"/hcfadmin/doctor/adddoctor\");\n                        }}\n                    />\n                </nav>\n                <Box\n                    component={\"div\"}\n                    sx={{\n                        position: \"relative\",\n                        top: \"4em\",\n                        width: \"100%\",\n                        display: \"flex\",\n                        height: \"100%\",\n                    }}\n                >\n                    <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                        {/* Category component starts */}\n                        <Box>\n                            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                                <div onClick={handleScrollLeft}>\n                                    <ChevronLeftIcon />\n                                </div>\n                                <Box\n                                    sx={{ display: \"flex\", position: \"relative\" }}\n                                    className={\"horizontal-scroll-container NavBar-Container-one\"}\n                                >\n                                    <div\n                                        ref={scrollContainerRef}\n                                        style={{ overflowX: \"auto\", display: \"flex\" }}\n                                    >\n                                        {nav_specialization.map((specialization, index) => (\n                                            <CustomButton\n                                                key={index}\n                                                label={`${specialization?.department_name}`}\n                                                isTransaprent={\n                                                    specialization.department_name.toLowerCase() ===\n                                                    specializationDoc.toLowerCase()\n                                                        ? false\n                                                        : true\n                                                }\n                                                buttonCss={{\n                                                    borderRadius: \"50px\",\n                                                    padding: \"0.3% 6.5%\",\n                                                    marginRight: \"1%\",\n                                                    whiteSpace: \"normal\",\n                                                }}\n                                                handleClick={() => {\n                                                    setSpecializationDoc(\n                                                        specialization?.department_name,\n                                                    );\n                                                }}\n                                            />\n                                        ))}\n                                    </div>\n                                </Box>\n                                <div onClick={handleScrollRight}>\n                                    <ChevronRightIcon />\n                                </div>\n                            </Box>\n                        </Box>\n\n                        <TableContainer component={Paper} style={{ background: \"white\" }}>\n                            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Name & Details</TableCell>\n                                        <TableCell align=\"right\">Department</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                        <TableCell align=\"right\">Action</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {loading ? (\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={4} align=\"center\">\n                                                    <Skeleton\n                                                        variant=\"rectangular\"\n                                                        width=\"100%\"\n                                                        height={40}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : specializationData.length === 0 ? (\n                                        <NoAppointmentCard text_one={\"No Data Available\"} />\n                                    ) : (\n                                        specializationData\n                                            .slice(\n                                                page * rowsPerPage,\n                                                page * rowsPerPage + rowsPerPage,\n                                            )\n                                            .map((data) => (\n                                                <TableRow\n                                                    key={data.suid}\n                                                    sx={{\n                                                        \"&:last-child td, &:last-child th\": {\n                                                            border: 0,\n                                                        },\n                                                    }}\n                                                >\n                                                    <TableCell component=\"th\" scope=\"row\">\n                                                        <AllDoctorTable\n                                                            name={data?.name}\n                                                            user_id={data?.user_id}\n                                                            profile_picture={\n                                                                data?.profile_picture || profile\n                                                            }\n                                                        />\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {data?.department}\n                                                    </TableCell>\n                                                        <TableCell\n                                                            align=\"right\"\n                                                            sx={{\n                                                                color:\n                                                                    data?.status === \"Active\"\n                                                                        ? \"#E72B4A\"\n                                                                        : \"gray\",\n                                                            }}\n                                                        >\n                                                            {data?.status}\n                                                        </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        <CustomButton\n                                                            label={<img src={pen} />}\n                                                            isTransaprent\n                                                            handleClick={() =>\n                                                                toggleStatus(data?.user_id)\n                                                            } // Pass the `clinic_doctor_id` here\n                                                        />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))\n                                    )}\n                                </TableBody>\n                            </Table>\n                            {/* Add the TablePagination component */}\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25]}\n                                component=\"div\"\n                                count={specializationData.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={handleChangePage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                            />\n                        </TableContainer>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default HCFAllDoctors;\n"],"names":["HCFAllDoctors","navigate","useNavigate","data","setData","useState","nav_specialization","setNav_spelization","specializationDoc","setSpecializationDoc","specializationData","setSpecializationData","hcf_id","localStorage","getItem","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","useEffect","document","getElementById","style","display","fetchData","async","_response$data","response","axiosInstance","error","_resp$data","resp","err","navSpecialization","scrollContainerRef","useRef","_resp$data2","concat","departmentName","fetchSpecializationDetail","currentStatus","status","setStatus","React","Box","sx","width","height","flexDirection","className","NavLink","to","CustomButton","buttonCss","position","right","borderRadius","isTransaprent","label","handleClick","component","top","alignItems","onClick","handleScrollLeft","current","scrollLeft","ChevronLeftIcon","ref","overflowX","map","specialization","index","key","department_name","toLowerCase","padding","marginRight","whiteSpace","handleScrollRight","ChevronRightIcon","TableContainer","Paper","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","_","colSpan","Skeleton","variant","length","NoAppointmentCard","text_one","slice","suid","border","scope","AllDoctorTable","name","user_id","profile_picture","profile","department","color","src","pen","newStatus","post","clinic_doctor_id","String","prevData","doctor","_objectSpread","alert","toggleStatus","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}