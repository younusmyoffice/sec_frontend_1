{"version":3,"file":"959.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/DoctorModule/DoctorStatistics/DoctorOverview/DoctorOverview.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers-pro\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers-pro/AdapterDayjs\";\nimport { DateRangePicker } from \"@mui/x-date-pickers-pro/DateRangePicker\";\nimport {\n    Typography,\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TablePagination,\n    Paper,\n    Skeleton,\n} from \"@mui/material\";\nimport DoctorStatisticsNavbar from \"../../CustomDoctorComponent/DoctorStatisticsNavbar/DoctorStatisticsNavbar\";\nimport axiosInstance from \"../../../config/axiosInstance\";\nimport \"./doctorOverview.scss\";\nimport NoAppointmentCard from \"../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { formatDate, currencysign } from \"../../../constants/const\";\n\nconst OverView = () => {\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"statistics\");\n        localStorage.setItem(\"path\", \"doctorOverview\");\n    }, []);\n\n    const [earning, setEarning] = useState({\n        affiliateEarning: 0,\n        directEarning: 0,\n        totalEarning: 0,\n    });\n    const [doctorAllEarning, setDoctorAllEarning] = useState([]);\n    const [value, setValue] = useState([null, null]);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [loading, setLoading] = useState(true); // State to track loading\n\n    // Fetch earnings from APIs\n    const fetchEarnings = async () => {\n        setLoading(true); // Start loading\n        try {\n            const doctorId = localStorage.getItem(\"doctor_suid\");\n\n            const directResponse = await axiosInstance.post(\n                \"/sec/doctor/DocEarningCount\",\n                JSON.stringify({ doctor_id: doctorId }),\n            );\n            const affiliateResponse = await axiosInstance.post(\n                \"/sec/doctor/DocAffiliateEarningCount\",\n                JSON.stringify({ doctor_id: doctorId }),\n            );\n            const totalResponse = await axiosInstance.post(\n                \"/sec/doctor/DocTotalEarningCount\",\n                JSON.stringify({ doctor_id: doctorId }),\n            );\n\n            setEarning({\n                affiliateEarning: affiliateResponse?.data?.response[0]?.hcf_doctor_earning || 0,\n                directEarning: directResponse?.data?.response[0]?.doctor_earning || 0,\n                totalEarning: totalResponse?.data?.totalEarnings || 0,\n            });\n\n            const allEarningsResponse = await axiosInstance.post(\n                \"/sec/doctor/DocAllEarningList\",\n                JSON.stringify({ doctor_id: doctorId }),\n            );\n            setDoctorAllEarning(allEarningsResponse?.data || []);\n        } catch (error) {\n            console.log(\"Error fetching earnings: \", error);\n        } finally {\n            setLoading(false); // Stop loading once the data is fetched\n        }\n    };\n\n    useEffect(() => {\n        fetchEarnings();\n    }, []);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <>\n            <Box sx={{ display: \"flex\", width: \"98%\",}}>\n                <DoctorStatisticsNavbar />\n                <div className=\"main-container3\">\n                    <div className=\"Earning-container\">\n                        <Box\n                            sx={{ display: \"flex\", justifyContent: \"space-between\", width: \"100%\" }}\n                        >\n                            <div className=\"Earn1\">\n                                <Typography\n                                    sx={{ fontSize: \"58px\", fontWeight: \"600\", color: \"#E72B4A\" }}\n                                >\n                                    {loading ? (\n                                        <Skeleton variant=\"text\" width={150} height={58} />\n                                    ) : (\n                                        earning?.affiliateEarning\n                                    )}\n                                </Typography>\n                                <Typography\n                                    sx={{ fontSize: \"12px\", fontWeight: \"500\", color: \"#AEAAAE\" }}\n                                >\n                                    Affiliate Earning\n                                </Typography>\n                            </div>\n                            <div className=\"Earn1\">\n                                <Typography\n                                    sx={{ fontSize: \"58px\", fontWeight: \"600\", color: \"#E72B4A\" }}\n                                >\n                                    {loading ? (\n                                        <Skeleton variant=\"text\" width={150} height={58} />\n                                    ) : (\n                                        earning?.directEarning\n                                    )}\n                                </Typography>\n                                <Typography\n                                    sx={{ fontSize: \"12px\", fontWeight: \"500\", color: \"#AEAAAE\" }}\n                                >\n                                    Direct Earning\n                                </Typography>\n                            </div>\n                            <div className=\"Earn1\">\n                                <Typography\n                                    sx={{ fontSize: \"58px\", fontWeight: \"600\", color: \"#E72B4A\" }}\n                                >\n                                    {loading ? (\n                                        <Skeleton variant=\"text\" width={150} height={58} />\n                                    ) : (\n                                        earning?.totalEarning\n                                    )}\n                                </Typography>\n                                <Typography\n                                    sx={{ fontSize: \"12px\", fontWeight: \"500\", color: \"#AEAAAE\" }}\n                                >\n                                    Total Earning\n                                </Typography>\n                            </div>\n                        </Box>\n                    </div>\n\n                    <div className=\"Monthly-Earnings\">\n                        <Typography sx={{ fontSize: \"20px\", fontWeight: \"500\", color: \"#313033\" }}>\n                            Monthly Earnings\n                        </Typography>\n                    </div>\n\n                    <div className=\"Earning-Table\">\n                        <TableContainer component={Paper} style={{ background: \"white\" }}>\n                            <Table sx={{ minWidth: 650 }} size=\"large\">\n                                <TableHead\n                                    sx={{ fontSize: \"14px\", fontWeight: \"500\", color: \"#313033\" }}\n                                >\n                                    <TableRow>\n                                        <TableCell>Date & Time</TableCell>\n                                        <TableCell align=\"right\">Affiliate Earnings</TableCell>\n                                        <TableCell align=\"right\">Direct Earnings</TableCell>\n                                        <TableCell align=\"right\">Total Earnings</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {loading ? (\n                                        <TableRow>\n                                            <TableCell colSpan={4}>\n                                                <Skeleton\n                                                    variant=\"rectangular\"\n                                                    width=\"100%\"\n                                                    height={100}\n                                                />\n                                            </TableCell>\n                                        </TableRow>\n                                    ) : doctorAllEarning.length === 0 ? (\n                                        <TableRow>\n                                            <NoAppointmentCard text_one={\"No Data Found\"} />\n                                        </TableRow>\n                                    ) : (\n                                        doctorAllEarning\n                                            .slice(\n                                                page * rowsPerPage,\n                                                page * rowsPerPage + rowsPerPage,\n                                            )\n                                            .map((row, index) => (\n                                                <TableRow key={index}>\n                                                    <TableCell>\n                                                        {`${formatDate(row?.date) || \"NA\"}`}, \n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {`${currencysign}${\n                                                            row?.affiliateEarning || \"00\"\n                                                        }`}\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {`${currencysign}${\n                                                            row?.directEarning || \"00\"\n                                                        }`}\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {`${currencysign}${row?.total || \"00\"}`}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))\n                                    )}\n                                </TableBody>\n                            </Table>\n                            <TablePagination\n                                sx={{ display: \"flex\", justifyContent: \"right\" }}\n                                rowsPerPageOptions={[5, 10, 25]}\n                                component=\"div\"\n                                count={doctorAllEarning.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={handleChangePage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                            />\n                        </TableContainer>\n                    </div>\n                </div>\n            </Box>\n        </>\n    );\n};\n\nexport default OverView;\n"],"names":["OverView","useEffect","localStorage","setItem","earning","setEarning","useState","affiliateEarning","directEarning","totalEarning","doctorAllEarning","setDoctorAllEarning","value","setValue","page","setPage","rowsPerPage","setRowsPerPage","loading","setLoading","async","_affiliateResponse$da","_directResponse$data","_totalResponse$data","doctorId","getItem","directResponse","axiosInstance","post","JSON","stringify","doctor_id","affiliateResponse","totalResponse","data","response","hcf_doctor_earning","doctor_earning","totalEarnings","allEarningsResponse","error","fetchEarnings","React","Box","sx","display","width","DoctorStatisticsNavbar","className","justifyContent","Typography","fontSize","fontWeight","color","Skeleton","variant","height","TableContainer","component","Paper","style","background","Table","minWidth","size","TableHead","TableRow","TableCell","align","TableBody","colSpan","length","NoAppointmentCard","text_one","slice","map","row","index","key","concat","formatDate","date","currencysign","total","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target"],"sourceRoot":""}