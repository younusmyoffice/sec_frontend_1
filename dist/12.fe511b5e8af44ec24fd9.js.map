{"version":3,"file":"12.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/DoctorModule/DoctorMainDashboard/Notification.js/Notification.js","webpack://sec-frontend/./src/DoctorModule/CustomDoctorComponent/Cards/CardNotification/CardNotification.js"],"sourcesContent":["import { Box, Skeleton, Pagination } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport DoctorAppointmentCard from \"../../CustomDoctorComponent/CustomDoctorAppointment/DoctorAppointment\";\nimport CustomNotificationCard from \"../../CustomDoctorComponent/Cards/CardNotification/CardNotification\";\nimport { baseURL } from \"../../../constants/const\";\nimport NoAppointmentCard from \"../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport axiosInstance from \"../../../config/axiosInstance\";\nimport CustomButton from \"../../../components/CustomButton\";\n\nconst Notification = () => {\n    const [requestData, setRequestData] = useState([]);\n    const [upcomingData, setUpcomingData] = useState([]);\n    const [completedData, setCompletedData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [notificationData, setNotificationData] = useState([]);\n    const [viewAll, setViewAll] = useState(false);\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"dashboard\");\n        localStorage.setItem(\"path\", \"notification\");\n        document.getElementById(\"location-search-container\").style.display = \"none\";\n\n        fetchAllData();\n    }, []);\n\n    const fetchAllData = async () => {\n        setLoading(true);\n        try {\n            await Promise.all([fetchRequest(), fetchUpcoming(), fetchData(), fetchCompleted()]);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchRequest = async () => {\n        try {\n            const response = await axios.get(\n                `${baseURL}/sec/Doctor/DocDashoardApp/in_progress/${localStorage.getItem(\n                    \"doctor_suid\",\n                )}`,\n            );\n            setRequestData(response?.data?.response || []);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const fetchUpcoming = async () => {\n        try {\n            const response = await axios.get(\n                `${baseURL}/sec/Doctor/DocDashoardApp/booked/${localStorage.getItem(\n                    \"doctor_suid\",\n                )}`,\n            );\n            setUpcomingData(response?.data?.response || []);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const fetchCompleted = async () => {\n        try {\n            const response = await axios.get(\n                `${baseURL}/sec/Doctor/DocDashoardApp/completed/${localStorage.getItem(\n                    \"doctor_suid\",\n                )}`,\n            );\n            setCompletedData(response?.data?.response || []);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const fetchData = async () => {\n        try {\n            const response = await axiosInstance.get(\n                `/sec/Doctor/DoctorNotification/${localStorage.getItem(\"doctor_suid\")}`,\n            );\n            setNotificationData(response?.data?.response || []);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const renderSkeletons = (count) =>\n        Array.from({ length: count }).map((_, index) => (\n            <Skeleton key={index} variant=\"rectangular\" width=\"100%\" height={100} sx={{ mb: 2 }} />\n        ));\n\n    const isDataEmpty =\n        !loading && !requestData.length && !upcomingData.length && !completedData.length;\n\n    const toggleViewAll = () => {\n        setViewAll((prev) => !prev);\n    };\n\n    const displayedData = viewAll ? notificationData : notificationData.slice(0, 3);\n\n    return (\n        <Box sx={{ width: \"100%\", p: 3 }}>\n            <Box className=\"Appointment-card\" sx={{ display: \"flex\", gap: 2, mb: 3 }}>\n                {loading\n                    ? Array(3)\n                          .fill(null)\n                          .map((_, index) => (\n                              <Skeleton key={index} variant=\"text\" width={200} height={200} />\n                          ))\n                    : [\n                          <DoctorAppointmentCard\n                              key=\"request\"\n                              NumberOfAppointments={requestData.length}\n                              AppointmentType={\"Appointment Request\"}\n                          />,\n                          <DoctorAppointmentCard\n                              key=\"upcoming\"\n                              NumberOfAppointments={upcomingData.length}\n                              AppointmentType={\"Upcoming Appointments\"}\n                          />,\n                          <DoctorAppointmentCard\n                              key=\"completed\"\n                              NumberOfAppointments={completedData.length}\n                              AppointmentType={\"Completed\"}\n                          />,\n                      ]}\n            </Box>\n\n            <Box className=\"DocNavBar-Container\" sx={{ mb: 3, display: \"flex\", gap: 2 }}>\n                <NavLink to={\"/doctordashboard/request\"}>Requests</NavLink>\n                <NavLink to={\"/doctordashboard/notification\"}>Notifications</NavLink>\n            </Box>\n\n            <Box\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    border: \"1px solid #E6E1E5\",\n                    borderRadius: \"0.5rem\",\n                    padding: \"2%\",\n                    minHeight: \"55vh\",\n                    alignItems: \"center\",\n                    justifyContent: loading || isDataEmpty ? \"center\" : \"flex-start\",\n                }}\n            >\n                {loading ? (\n                    renderSkeletons(3)\n                ) : notificationData.length === 0 ? (\n                    <NoAppointmentCard text_one={\"No Notifications Found\"} />\n                ) : (\n                    displayedData.map((data, index) => (\n                        <CustomNotificationCard key={index} Data={data} />\n                    ))\n                )}\n\n                {!loading && notificationData.length > 3 && (\n                    <CustomButton\n                        label={viewAll ? \"Show Less\" : \"View All\"}\n                        handleClick={toggleViewAll}\n                        isTransaprent={true}\n                        sx={{ marginTop: \"1rem\" }}\n                    ></CustomButton>\n                )}\n            </Box>\n        </Box>\n    );\n};\n\nexport default Notification;\n","import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport \"./cardNotification.scss\";\nimport { formatDate, formatDateDay } from \"../../../../constants/const\";\n\nconst CustomNotificationCard = ({ Data, index }) => {\n    return (\n        <>\n            <Box\n                key={index}\n                sx={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    borderBottom: \"1px solid #C9C5CA\",\n                    height: \"8rem\",\n                    padding: \"1%\",\n                    marginBottom: \"1rem\", // Add some space between cards\n                }}\n            >\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"flex-start\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"1.25rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.875rem\",\n                        }}\n                    >\n                        {Data?.type || \"Notification\"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>\n                                Your appointment with {Data?.recipient || \"patient Name\"} is\n                                canceled\n                            </span>\n                        ) : (\n                            <span>\n                                You have an appointment with {Data?.recipient || \"patient Name\"}\n                            </span>\n                        )}{\" \"}\n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {Data?.type === \"Appointment canceled\" ? (\n                            <span>  </span>\n                        ) : (\n                            <span>\n                            {Data?.parameters?.appointment_date && Data?.parameters?.appointment_time ? (\n                              <>\n                                {formatDateDay(Data?.parameters?.appointment_date)} Time {Data?.parameters?.appointment_time}\n                              </>\n                            ) : (\n                              \"appointment time and date\"\n                            )}\n                          </span>\n                          \n                        )}{\" \"}\n                    </Typography>\n                </Box>\n\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            textAlign: \"right\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.75rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"1.125rem\",\n                            letterSpacing: \"0.006rem\",\n                        }}\n                    >\n                        {formatDate(Data?.notification_generated_time || Data?.created_at) ||\n                            \"Notification Generated Time\"}\n                    </Typography>\n                    {/* <CustomButton\n                        buttonCss={{\n                            display: \"flex\",\n                            width: \"10.625rem\",\n                            height: \"3rem\",\n                            padding: \"0.5rem 1rem\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            gap: \"0.5rem\",\n                            flexShrink: \"0\",\n                            borderRadius: \"6.25rem\",\n                        }}\n                        label=\"View\"\n                    /> */}\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default CustomNotificationCard;\n"],"names":["Notification","requestData","setRequestData","useState","upcomingData","setUpcomingData","completedData","setCompletedData","loading","setLoading","notificationData","setNotificationData","viewAll","setViewAll","useEffect","localStorage","setItem","document","getElementById","style","display","fetchAllData","async","Promise","all","fetchRequest","fetchUpcoming","fetchData","fetchCompleted","error","_response$data","response","axios","get","concat","baseURL","getItem","data","_response$data2","_response$data3","_response$data4","axiosInstance","isDataEmpty","length","displayedData","slice","React","Box","sx","width","p","className","gap","mb","Array","fill","map","_","index","Skeleton","key","variant","height","DoctorAppointmentCard","NumberOfAppointments","AppointmentType","NavLink","to","flexDirection","border","borderRadius","padding","minHeight","alignItems","justifyContent","count","from","NoAppointmentCard","text_one","CustomNotificationCard","Data","CustomButton","label","handleClick","toggleViewAll","prev","isTransaprent","marginTop","_ref","_Data$parameters","_Data$parameters2","_Data$parameters3","_Data$parameters4","borderBottom","marginBottom","Typography","color","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","type","letterSpacing","recipient","parameters","appointment_date","appointment_time","formatDateDay","textAlign","formatDate","notification_generated_time","created_at"],"sourceRoot":""}