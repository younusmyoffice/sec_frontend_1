{"version":3,"file":"257.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminDoctor/Active/Active.js"],"sourcesContent":["import {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Skeleton,\n    TablePagination\n} from \"@mui/material\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport { AllDoctorTable } from \"../AllDoctors/AllDoctorTable\";\nimport pen from \"../../../../static/images/DrImages/Pen.svg\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport profile from \"../../../../static/images/DrImages/Out Patient Department.png\";\n\nconst HCFDoctorActive = () => {\n    const [hcf_id] = useState(localStorage.getItem(\"hcfadmin_suid\"));\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [specializationDoc, setSpecializationDoc] = useState(\"CARDIOLOGIST\");\n    const [nav_specialization, setNav_spelization] = useState([]);\n\n    // Pagination state\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    const scrollContainerRef = useRef(null);\n\n    const fetchData = async (departmentName) => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/ActiveBlockedClinicDoctors/1/${hcf_id}/${departmentName}`);\n            setData(response?.data?.response || []);\n        } catch (error) {\n            console.log(error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData(specializationDoc);\n    }, [specializationDoc]);\n\n    const navSpecializtion = async () => {\n        try {\n            const resp = await axiosInstance(`/sec/patient/doctorDepartments`);\n            setNav_spelization(resp?.data?.response || []);\n        } catch (err) {\n            console.log(\"Nav specialization error : \", err);\n        }\n    };\n\n    useEffect(() => {\n        navSpecializtion();\n    }, []);\n\n    const handleScrollLeft = () => {\n        if (scrollContainerRef.current) {\n            scrollContainerRef.current.scrollLeft -= 100; // Adjust scroll distance as needed\n        }\n    };\n\n    const handleScrollRight = () => {\n        if (scrollContainerRef.current) {\n            scrollContainerRef.current.scrollLeft += 100; // Adjust scroll distance as needed\n        }\n    };\n\n    // Handle pagination change\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <>\n            <Box\n                sx={{\n                    display: \"flex\",\n                    width: \"98%\",\n                    height: \"100%\",\n                    flexDirection: \"row\",\n                }}\n            >\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to={\"/hcfadmin/doctor/alldoctors\"}>All Doctors</NavLink>\n                    <NavLink to={\"/hcfadmin/doctor/active\"}>Active</NavLink>\n                    <NavLink to={\"/hcfadmin/doctor/blocked\"}>Blocked</NavLink>\n                </nav>\n\n                <Box\n                    component={\"div\"}\n                    sx={{\n                        position: \"relative\",\n                        top: \"4em\",\n                        width: \"100%\",\n                        display: \"flex\",\n                        height: \"100%\",\n                    }}\n                >\n                    <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                        {/*--------------------- Category component starts ---------------------------------*/}\n                        <Box>\n                            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                                <div onClick={handleScrollLeft}>\n                                    <ChevronLeftIcon />\n                                </div>\n                                <Box\n                                    sx={{ display: \"flex\", position: \"relative\" }}\n                                    className={\"horizontal-scroll-container NavBar-Container-one\"}\n                                >\n                                    <div\n                                        ref={scrollContainerRef}\n                                        style={{ overflowX: \"auto\", display: \"flex\" }}\n                                    >\n                                        {nav_specialization.map((specialization, index) => (\n                                            <CustomButton\n                                                key={index}\n                                                label={`${specialization?.department_name}`}\n                                                isTransaprent={\n                                                    specialization.department_name.toLowerCase() ===\n                                                    specializationDoc.toLowerCase()\n                                                        ? false\n                                                        : true\n                                                }\n                                                buttonCss={{\n                                                    borderRadius: \"50px\",\n                                                    padding: \"0.3% 6.5%\",\n                                                    marginRight: \"1%\",\n                                                    whiteSpace: \"normal\",\n                                                }}\n                                                handleClick={() => {\n                                                    setSpecializationDoc(specialization?.department_name);\n                                                    console.log(\"specialization : \", specialization?.department_name)\n                                                }}\n                                            />\n                                        ))}\n                                    </div>\n                                </Box>\n                                <div onClick={handleScrollRight}>\n                                    <ChevronRightIcon />\n                                </div>\n                            </Box>\n                        </Box>\n\n                        <TableContainer component={Paper} style={{ background: \"white\" }}>\n                            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Name & Details</TableCell>\n                                        <TableCell align=\"right\">Department</TableCell>\n                                        <TableCell align=\"right\">Status</TableCell>\n                                        <TableCell align=\"right\">Action</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {loading ? (\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={4} align=\"center\">\n                                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : data.length === 0 ? (\n                                        <TableRow>\n                                            <TableCell colSpan={4} align=\"center\">\n                                                <NoAppointmentCard text_one={\"No Data Available\"} />\n                                            </TableCell>\n                                        </TableRow>\n                                    ) : (\n                                        data\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            .map((row) => (\n                                                <TableRow\n                                                    key={row.doctor_id} // Ensure uniqueness\n                                                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                                                >\n                                                    <TableCell component=\"th\" scope=\"row\">\n                                                        <AllDoctorTable name={row.first_name} user_id={row.suid} profile_picture={\n                                                                row?.profile_picture || profile\n                                                            }/>\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">{row.department_name}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        <CustomButton\n                                                            label={row.clinic_status === 1 ? \"Active\" : \"Inactive\"}\n                                                            isTransaprent\n                                                        />\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        <CustomButton label={<img src={pen} alt=\"Edit\" />} isTransaprent />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))\n                                    )}\n                                </TableBody>\n                            </Table>\n\n                            {/* Add the TablePagination component */}\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25]}\n                                component=\"div\"\n                                count={data.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={handleChangePage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                            />\n                        </TableContainer>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default HCFDoctorActive;\n"],"names":["HCFDoctorActive","hcf_id","useState","localStorage","getItem","data","setData","loading","setLoading","specializationDoc","setSpecializationDoc","nav_specialization","setNav_spelization","page","setPage","rowsPerPage","setRowsPerPage","scrollContainerRef","useRef","useEffect","async","_response$data","response","axiosInstance","get","concat","departmentName","error","fetchData","_resp$data","resp","err","navSpecializtion","React","Box","sx","display","width","height","flexDirection","className","NavLink","to","component","position","top","alignItems","onClick","handleScrollLeft","current","scrollLeft","ChevronLeftIcon","ref","style","overflowX","map","specialization","index","CustomButton","key","label","department_name","isTransaprent","toLowerCase","buttonCss","borderRadius","padding","marginRight","whiteSpace","handleClick","handleScrollRight","ChevronRightIcon","TableContainer","Paper","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","from","_","colSpan","Skeleton","variant","length","NoAppointmentCard","text_one","slice","row","doctor_id","border","scope","AllDoctorTable","name","first_name","user_id","suid","profile_picture","profile","clinic_status","src","pen","alt","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}