{"version":3,"file":"942.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/Clinic/ClinicDashboard/ClinicRequests/ClinicRequests.js"],"sourcesContent":["import { Box, Typography, Skeleton } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport DoctorAppointmentCard from \"../../../../DoctorModule/CustomDoctorComponent/CustomDoctorAppointment/DoctorAppointment\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport ClinicCardRequest from \"./ClinicCardRequest\";\nimport CustomButton from \"../../../../components/CustomButton/custom-button\";\nimport \"./clinicrequest.scss\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\n\nconst ClinicRequests = () => {\n    const [loading, setLoading] = useState(true); \n    const [upcomingCount, setUpcomingCount] = useState(0);\n    const [completeCount, setCompleteCount] = useState(0);\n    const [requestCount, setRequestCount] = useState(0);\n    const [clinicAppointmentRequests, setClinicAppointmentRequests] = useState([]);\n    const [accAndRejClicked, setaccAndRejClicked] = useState([]);\n\n    const doctor_id = localStorage.getItem(\"clinic_suid\");\n    const navigate = useNavigate();\n\n    const status_booked = \"booked\";\n    const status_complete = \"completed\";\n    const status_in_progress = \"in_progress\";\n\n    const fetchAppointmentCounts = async () => {\n        setLoading(true); \n        try {\n            const [upcoming, complete, request] = await Promise.all([\n                axiosInstance.get(`sec/hcf/${doctor_id}/${status_booked}/clinicDashboardAppointmentUpcomngCount`),\n                axiosInstance.get(`sec/hcf/${doctor_id}/${status_complete}/clinicDashboardAppointmentCompleteCount`),\n                axiosInstance.get(`sec/hcf/${doctor_id}/${status_in_progress}/clinicDashboardAppointmentRequestCount`)\n            ]);\n\n            setUpcomingCount(upcoming?.data?.response[0]?.keyword_count || 0);\n            setCompleteCount(complete?.data?.response[0]?.keyword_count || 0);\n            setRequestCount(request?.data?.response[0]?.keyword_count || 0);\n        } catch (error) {\n            console.error(\"Error fetching appointment counts:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchAppointmentRequests = async () => {\n        setLoading(true);\n        try {\n            const response = await axiosInstance.get(`sec/hcf/${doctor_id}/${status_in_progress}/clinicAppointmentRequests`);\n            setClinicAppointmentRequests(response?.data?.response || []);\n        } catch (error) {\n            console.error(\"Error fetching request data:\", error.response);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchAppointmentCounts();\n        fetchAppointmentRequests();\n    }, [doctor_id]);\n\n    const handleCardClick = (path) => {\n        navigate(path);\n    };\n\n    return (\n        <>\n            <Box sx={{ position: \"relative\", width: \"100%\" }}>\n                <div className=\"Appointment-card1\">\n                    {loading ? (\n                        <>\n                            <Skeleton variant=\"rectangular\" width={300} height={150} />\n                            <Skeleton variant=\"rectangular\" width={300} height={150} />\n                            <Skeleton variant=\"rectangular\" width={300} height={150} />\n                        </>\n                    ) : (\n                        <>\n                            <DoctorAppointmentCard\n                                NumberOfAppointments={upcomingCount}\n                                AppointmentType=\"Upcoming Appointment\"\n                                onClick={() => handleCardClick(\"/clinicDashboard/clinicmyappointment/clinicupcoming\")}\n                            />\n                            <DoctorAppointmentCard\n                                NumberOfAppointments={completeCount}\n                                AppointmentType=\"Completed\"\n                                onClick={() => handleCardClick(\"/clinicDashboard/clinicmyappointment/cliniccompleted\")}\n                            />\n                            <DoctorAppointmentCard\n                                NumberOfAppointments={requestCount}\n                                AppointmentType=\"Appointment Request\"\n                                onClick={() => handleCardClick(\"/clinicDashboard/clinicmyappointment/clinicrequest\")}\n                            />\n                        </>\n                    )}\n                </div>\n\n                <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\", marginTop: \"1rem\" }}>\n                    <nav className=\"NavBar-Container-Appoinement\">\n                        <NavLink to=\"/clinicDashboard/clinicbodydashboard/clinirequests\">Requests</NavLink>\n                        <NavLink to=\"/clinicDashboard/clinicbodydashboard/clinicnotification\">Notifications</NavLink>\n                    </nav>\n\n                    <Box sx={{ position: \"relative\", top: \"4em\", width: \"100%\", display: \"flex\", height: \"100%\" }}>\n                        <Box sx={{ position: \"relative\", width: \"100%\", border: \"1px solid #E6E1E5\", borderRadius: \"8px\", padding: \"1rem\" }}>\n                            <Box sx={{ width: \"100%\" }}>\n                                {loading ? (\n                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n                                ) : clinicAppointmentRequests.length === 0 ? (\n                                    <NoAppointmentCard text_one=\"No Appointment\" />\n                                ) : (\n                                    clinicAppointmentRequests.slice(0, 3).map((data) => (\n                                        <ClinicCardRequest\n                                            key={data.id}\n                                            AcceptOrRejectButtonClicked={setaccAndRejClicked}\n                                            accAndRejClicked={accAndRejClicked}\n                                            label=\"Accept\"\n                                            data={data}\n                                        />\n                                    ))\n                                )}\n                            </Box>\n                            <Box sx={{ width: \"100%\", marginTop: \"8rem\" }}>\n                                <CustomButton\n                                    handleClick={() => navigate(\"/clinicDashboard/clinicmyappointment/clinicrequest\")}\n                                    isTransaprent={true}\n                                    label=\"View all\"\n                                />\n                            </Box>\n                        </Box>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default ClinicRequests;\n"],"names":["ClinicRequests","loading","setLoading","useState","upcomingCount","setUpcomingCount","completeCount","setCompleteCount","requestCount","setRequestCount","clinicAppointmentRequests","setClinicAppointmentRequests","accAndRejClicked","setaccAndRejClicked","doctor_id","localStorage","getItem","navigate","useNavigate","status_in_progress","useEffect","async","_upcoming$data","_complete$data","_request$data","upcoming","complete","request","Promise","all","axiosInstance","get","concat","data","response","keyword_count","error","fetchAppointmentCounts","_response$data","fetchAppointmentRequests","handleCardClick","path","React","Box","sx","position","width","className","Skeleton","variant","height","DoctorAppointmentCard","NumberOfAppointments","AppointmentType","onClick","display","marginTop","NavLink","to","top","border","borderRadius","padding","length","NoAppointmentCard","text_one","slice","map","ClinicCardRequest","key","id","AcceptOrRejectButtonClicked","label","CustomButton","handleClick","isTransaprent"],"sourceRoot":""}