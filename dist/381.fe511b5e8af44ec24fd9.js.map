{"version":3,"file":"381.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/DoctorModule/DoctorListing/CreateNewListing/AddPlan/AddPlan.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Box, Typography, Skeleton, Tooltip } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport \"./addplan.scss\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport ListingModal from \"./ListingModal\";\nimport AddPlanCard from \"./AddPlanCard\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport CustomSnackBar from \"../../../../components/CustomSnackBar\";\nimport { useListingMode } from \"../../shared/useListingMode\";\nimport SectionCard from \"../../shared/SectionCard\";\nimport StepHeader from \"../../shared/StepHeader\";\n\nconst AddPlans = () => {\n    const { mode, listingId, doctorId, setUnifiedListingId } = useListingMode();\n\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"listing\");\n        localStorage.setItem(\"path\", \"addplans\");\n        \n        // Ensure listing_id is set consistently in edit mode\n        setUnifiedListingId();\n\n        // Step guard: require listing_id to proceed\n        if (!listingId) {\n            console.warn(\"No listing_id found. Redirecting to listing details.\");\n            navigate(\"/doctordashboard/doctorListing/listingdetails\", { replace: true });\n        }\n    }, []);\n\n    const [plandata, setPlandata] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [renderthedataAfterDelete, setRenderTheApiAfterDelete] = useState(false);\n    const [renderDataAfterAddPlan, setRenderDataAfterAddPlan] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const [snackmessage, setSnackmessage] = useState(\"\");\n    const [snackType, setSnackType] = useState(\"success\"); // NEW: snackbar type\n    const navigate = useNavigate();\n\n    const fetchAddPlans = async () => {\n        setIsOpen(false);\n        setLoading(true);\n        try {\n            const response = await axiosInstance.post(\"/sec/createUpdatedoctorlisting/planAll\", {\n                doctor_id: doctorId,\n                doctor_list_id: listingId,\n            });\n            setSnackmessage(response?.data?.response?.body || \"Plans fetched successfully.\");\n            setSnackType(\"success\");\n            setIsOpen(true);\n\n            if (response?.data?.response?.allPlan === undefined) {\n                setPlandata([]);\n            } else {\n                console.log(\"AddPlan - Full API response:\", response?.data);\n            console.log(\"AddPlan - API response structure:\", response?.data?.response);\n            console.log(\"AddPlan - API response allPlan:\", response?.data?.response?.allPlan);\n            if (response?.data?.response?.allPlan && response?.data?.response?.allPlan.length > 0) {\n                console.log(\"AddPlan - First plan item:\", response?.data?.response?.allPlan[0]);\n                console.log(\"AddPlan - First plan item keys:\", Object.keys(response?.data?.response?.allPlan[0] || {}));\n            }\n                setPlandata(response?.data?.response?.allPlan);\n            }\n        } catch (err) {\n            console.log(\"error\", err);\n            setSnackmessage(\"Something went wrong while fetching plans.\");\n            setSnackType(\"error\");\n            setIsOpen(true);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (renderthedataAfterDelete || renderDataAfterAddPlan) {\n            fetchAddPlans();\n        }\n    }, [renderthedataAfterDelete, renderDataAfterAddPlan]);\n\n    useEffect(() => {\n        fetchAddPlans();\n    }, []);\n\n    const RendenDataAfterDelete = (value) => {\n        setRenderTheApiAfterDelete(value);\n    };\n\n    const RenderDataAfterAddingPlan = (value) => {\n        setRenderDataAfterAddPlan(value);\n    };\n\n    const handlePlanUpdated = () => {\n        fetchAddPlans();\n    };\n\n    return (\n        <>\n            <CustomSnackBar type={snackType} isOpen={isOpen} message={snackmessage} />\n\n            <div className=\"main-container\" style={{ width: '100%', maxWidth: 960, margin: '0 auto' }}>\n                <StepHeader />\n                <SectionCard\n                  title=\"Add Plans\"\n                  subtitle=\"Create consultation plans (message or video) with price and duration\"\n                  actions={\n                    <ListingModal RenderDataAfterAddingPlan={RenderDataAfterAddingPlan} />\n                  }\n                >\n                  {/* Skeleton Loader or Plans */}\n                  {loading ? (\n                      Array.from({ length: 3 }).map((_, index) => (\n                          <Box key={index} sx={{ marginBottom: 2 }}>\n                              <Skeleton variant=\"rectangular\" width=\"100%\" height={80} />\n                          </Box>\n                      ))\n                  ) : plandata.length === 0 ? (\n                      <NoAppointmentCard text_one=\"No listing found\" />\n                  ) : (\n                      plandata.map((plan, index) => (\n                          <AddPlanCard\n                              key={index}\n                              planCardData={plan}\n                              index={index}\n                              RendenDataAfterDelete={RendenDataAfterDelete}\n                              onPlanUpdated={handlePlanUpdated}\n                          />\n                      ))\n                  )}\n                </SectionCard>\n\n                {/* Save and Next buttons */}\n                <Box sx={{ marginTop: \"1%\" }}>\n                    <CustomButton\n                        buttonCss={{ width: \"10.625rem\", borderRadius: \"6.25rem\", margin: \"0.5%\" }}\n                        label=\"Save As Draft\"\n                        isTransaprent={true}\n                    />\n                    <Tooltip title={plandata.length === 0 ? \"Add at least one plan to continue\" : \"\"} disableHoverListener={plandata.length !== 0}>\n                        <div style={{ display: 'inline-block' }}>\n                            <CustomButton\n                                buttonCss={{ width: \"10.625rem\", borderRadius: \"6.25rem\", margin: \"0.5%\" }}\n                                label=\"Next\"\n                                isDisabled={plandata.length === 0}\n                                handleClick={() =>\n                                    navigate(\"/doctordashboard/doctorListing/addquestioner\")\n                                }\n                            />\n                        </div>\n                    </Tooltip>\n                </Box>\n            </div>\n        </>\n    );\n};\n\nexport default AddPlans;\n"],"names":["AddPlans","mode","listingId","doctorId","setUnifiedListingId","useListingMode","useEffect","localStorage","setItem","navigate","replace","plandata","setPlandata","useState","loading","setLoading","renderthedataAfterDelete","setRenderTheApiAfterDelete","renderDataAfterAddPlan","setRenderDataAfterAddPlan","isOpen","setIsOpen","snackmessage","setSnackmessage","snackType","setSnackType","useNavigate","fetchAddPlans","async","_response$data","_response$data2","response","axiosInstance","post","doctor_id","doctor_list_id","data","body","undefined","allPlan","_response$data5","_response$data6","_response$data9","length","err","RendenDataAfterDelete","value","handlePlanUpdated","React","CustomSnackBar","type","message","className","style","width","maxWidth","margin","StepHeader","SectionCard","title","subtitle","actions","ListingModal","RenderDataAfterAddingPlan","Array","from","map","_","index","Box","key","sx","marginBottom","Skeleton","variant","height","NoAppointmentCard","text_one","plan","AddPlanCard","planCardData","onPlanUpdated","marginTop","CustomButton","buttonCss","borderRadius","label","isTransaprent","Tooltip","disableHoverListener","display","isDisabled","handleClick"],"sourceRoot":""}