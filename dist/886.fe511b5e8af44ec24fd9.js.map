{"version":3,"file":"886.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/DiagnosticCenter/DiagnosticCenterReports/DiagonisticCenterShared/DiagostCenterShared.js"],"sourcesContent":["import {\n    Box,\n    Stack,\n    Typography,\n    Skeleton,\n    TablePagination,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper\n} from \"@mui/material\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport DiagnostCenterTableCard from \"../DiagnosticCenterChat/DiagnostCenterTableCard\";\n\nconst DiagnosticPatientShared = () => {\n    const [cardData, setCardData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [staff_id] = useState(localStorage.getItem(\"diagnostic_suid\"));\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    const fetchData = async () => {\n        setLoading(true);\n        try {\n            const resp = await axiosInstance(`/sec/hcf/testExamined/${staff_id}`);\n            const data = resp?.data?.response;\n\n            // Check if response is an array, otherwise set to empty array\n            if (Array.isArray(data)) {\n                setCardData(data);\n            } else {\n                setCardData([]); // No data found\n            }\n        } catch (err) {\n            console.error(\"Error:\", err);\n            setCardData([]); // Set to empty array on error\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const memoizedCardData = useMemo(() => {\n        return cardData.map((data) => ({\n            id: data?.test_id,\n            name: `${data?.first_name} ${data?.middle_name }${data?.last_name}`,\n            bookDate: data?.book_date || \"N/A\",\n            testName: `${data?.test_name || \"N/A\"} | â‚¹${data?.test_price}`,\n            profile_picture: data?.profile_picture || \" \",\n\n        }));\n    }, [cardData]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <>\n            <Box sx={{ display: \"flex\", width: \"98%\", height: \"100%\" }}>\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to=\"/diagnostCenterDashboard/diagnosticCenterReports/request\">\n                        Request\n                    </NavLink>\n                    <NavLink to=\"/diagnostCenterDashboard/diagnosticCenterReports/examination\">\n                        Examination\n                    </NavLink>\n                    <NavLink to=\"/diagnostCenterDashboard/diagnosticCenterReports/report\">\n                        Report\n                    </NavLink>\n                    {/* <NavLink to=\"/diagnostCenterDashboard/diagnosticCenterReports/Chart\">\n                        Chart\n                    </NavLink> */}\n                </nav>\n                <Box sx={{ position: \"relative\", top: \"4em\", width: \"100%\" }}>\n                    <div className=\"search-date\">\n                        {/* <Box\n                            display={\"flex\"}\n                            margin={\"10px\"}\n                            flexWrap={\"wrap\"}\n                            border={1}\n                            borderColor=\"#AEAAAE\"\n                            borderRadius={\"25px\"}\n                            width={\"50em\"}\n                            height=\"38px\"\n                            backgroundColor=\"#E6E1E5\"\n                        >\n                            <Stack direction=\"row\" alignItems=\"center\" gap={1} padding={\"10px\"}>\n                                <SearchIcon sx={{ color: \"#AEAAAE\" }} />\n                                <Typography variant=\"body1\" sx={{ color: \"#AEAAAE\" }}>\n                                    Search Patient Name / ID\n                                </Typography>\n                            </Stack>\n                        </Box> */}\n                    </div>\n                    <Typography variant=\"h6\" sx={{ textAlign: \"left\", mt: 2 }}>\n                        Examination List\n                    </Typography>\n                    <TableContainer component={Paper} style={{ background: \"white\", marginTop: 2 }}>\n                        <Table sx={{ minWidth: 650 }} aria-label=\"examination table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name / Booking ID</TableCell>\n                                    <TableCell align=\"right\">Date & Time</TableCell>\n                                    <TableCell align=\"right\">Schedule</TableCell>\n                                    <TableCell align=\"right\">Test Name/Price</TableCell>\n                                    <TableCell align=\"right\">Details</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {loading ? (\n                                   Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell colSpan={6} align=\"center\">\n                                            <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                        </TableCell>\n                                    </TableRow>\n                                   ))\n                                ) : memoizedCardData.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={5} align=\"center\">\n                                            <NoAppointmentCard text_one=\"No Data Found\" />\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    memoizedCardData\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                        .map((data) => (\n                                            <TableRow key={data.id}>\n                                                <TableCell>\n                                                <DiagnostCenterTableCard id={data?.id} name={data?.name} profile={data?.profile_picture}/>\n                                                </TableCell>\n                                                <TableCell align=\"right\">{data.bookDate}</TableCell>\n                                                <TableCell align=\"right\">{data.bookDate}</TableCell>\n                                                <TableCell align=\"right\">{data.testName}</TableCell>\n                                                <TableCell align=\"right\">{data.status}</TableCell>\n                                            </TableRow>\n                                        ))\n                                )}\n                            </TableBody>\n                        </Table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]}\n                            component=\"div\"\n                            count={memoizedCardData.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                        />\n                    </TableContainer>\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default DiagnosticPatientShared;\n"],"names":["DiagnosticPatientShared","cardData","setCardData","useState","loading","setLoading","staff_id","localStorage","getItem","page","setPage","rowsPerPage","setRowsPerPage","useEffect","async","_resp$data","resp","axiosInstance","concat","data","response","Array","isArray","err","fetchData","memoizedCardData","useMemo","map","id","test_id","name","first_name","middle_name","last_name","bookDate","book_date","testName","test_name","test_price","profile_picture","React","Box","sx","display","width","height","className","NavLink","to","position","top","Typography","variant","textAlign","mt","TableContainer","component","Paper","style","background","marginTop","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","from","_","index","key","colSpan","Skeleton","length","NoAppointmentCard","text_one","slice","DiagnostCenterTableCard","profile","status","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}