{"version":3,"file":"406.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminManage/AdminManageSale/DoctorTable.js","webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminManage/AdminManageSale/DiagnosticTable.js","webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminManage/AdminManageSale/AdminManageSale.js","webpack://sec-frontend/./src/HCFModule/HCFAdmin/AdminManage/AdminManageSale/SaleActivityCard.js"],"sourcesContent":["import {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    Skeleton,\n    TableRow,\n    Typography,\n    TablePagination,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { baseURL } from \"../../../../constants/const\";\nimport { SaleActivityCard } from \"./SaleActivityCard\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { formatDate, currencysign } from \"../../../../constants/const\";\n\nconst DoctorTable = () => {\n    const [data1, setData1] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const hcf_id = localStorage.getItem(\"hcfadmin_suid\"); // Example value; replace with your logic to get hcf_id\n\n    const fetchData1 = async (hcf_id) => {\n        try {\n            const response = await axiosInstance(`/sec/hcf/manageSaleActivity/${hcf_id}`);\n            setData1(response?.data?.response || []);\n            console.log(\"Sales activities data:\", response.data.response);\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n            console.log(\"Error fetching data:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData1(hcf_id);\n    }, [hcf_id]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0); // Reset to first page\n    };\n\n    return (\n        <div>\n            <TableContainer component={Paper} style={{ background: \"white\" }}>\n                <Table sx={{ minWidth: 1 }} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow style={{ fontWeight: \"bold\" }}>\n                            <TableCell>Doctor Name/ID</TableCell>\n                            <TableCell align=\"right\">Status</TableCell>\n                            <TableCell align=\"right\">Date & Time</TableCell>\n                            <TableCell align=\"right\">Package</TableCell>\n                            <TableCell align=\"right\">Price</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {loading ? (\n                            Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                <TableRow key={index}>\n                                    <TableCell colSpan={5} align=\"center\">\n                                        <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                    </TableCell>\n                                </TableRow>\n                            ))\n                        ) : data1.length === 0 ? (\n                            <TableRow>\n                                <TableCell colSpan={5} align=\"center\">\n                                    <NoAppointmentCard text_one={\"No Data Found\"} />\n                                </TableCell>\n                            </TableRow>\n                        ) : (\n                            data1\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map(\n                                    ({\n                                        suid,\n                                        profile_picture,\n                                        first_name,\n                                        middle_name,\n                                        last_name,\n                                        status,\n                                        updated_at,\n                                        plan_name,\n                                        amount,\n                                    }) => (\n                                        <TableRow key={suid}>\n                                            <TableCell component=\"th\" scope=\"row\" align=\"right\">\n                                                <SaleActivityCard\n                                                    profile_picture={profile_picture}\n                                                    name={`${first_name} ${middle_name} ${last_name}`}\n                                                    user_id={suid}\n                                                />\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography\n                                                    sx={{\n                                                        color: \"#939094\",\n                                                        fontFamily: \"Poppins\",\n                                                        fontSize: \"0.875rem\",\n                                                        fontWeight: \"500\",\n                                                    }}\n                                                >\n                                                    {status}\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography\n                                                    sx={{\n                                                        color: \"#939094\",\n                                                        fontFamily: \"Poppins\",\n                                                        fontSize: \"0.875rem\",\n                                                        fontWeight: \"500\",\n                                                    }}\n                                                >\n                                                    {formatDate(updated_at)}\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography\n                                                    sx={{\n                                                        color: \"#939094\",\n                                                        fontFamily: \"Poppins\",\n                                                        fontSize: \"0.875rem\",\n                                                        fontWeight: \"500\",\n                                                    }}\n                                                >\n                                                    {plan_name}\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Typography\n                                                    sx={{\n                                                        color: \"#939094\",\n                                                        fontFamily: \"Poppins\",\n                                                        fontSize: \"0.875rem\",\n                                                        fontWeight: \"500\",\n                                                    }}\n                                                >\n                                                    {`${currencysign}${amount}`}\n                                                </Typography>\n                                            </TableCell>\n                                        </TableRow>\n                                    ),\n                                )\n                        )}\n                    </TableBody>\n                </Table>\n                <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={data1.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                labelRowsPerPage=\"Rows per page:\"\n            />\n            </TableContainer>\n           \n        </div>\n    );\n};\n\nexport default DoctorTable;\n","import {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Skeleton,\n    Typography,\n    TablePagination,\n} from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { SaleActivityCard } from \"./SaleActivityCard\";\nimport CustomButton from \"../../../../components/CustomButton\";\nimport axios from \"axios\";\nimport { baseURL } from \"../../../../constants/const\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport { formatDate, currencysign } from \"../../../../constants/const\";\n\nconst DoctorTable = () => {\n    const [data1, setData1] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const hcf_id = localStorage.getItem('hcfadmin_suid'); // Example value; replace with your logic to get hcf_id\n\n    const fetchData1 = async () => {\n        try {\n            const response = await axiosInstance.get(`/sec/hcf/manageSaleDaigActivity/${hcf_id}`);\n            setData1(response?.data?.response || []);\n            console.log(\"Sales activities data:\", response.data.response);\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n            console.log(\"Error fetching data:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData1(hcf_id);\n    }, [hcf_id]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0); // Reset to first page\n    };\n\n    return (\n        <div>\n            <TableContainer component={Paper} style={{ background: \"white\" }}>\n                <Table sx={{ minWidth: 1 }} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow style={{ fontWeight: \"bold\" }}>\n                            <TableCell>Name/ Booking ID</TableCell>\n                            <TableCell align=\"right\">Date & Time</TableCell>\n                            <TableCell align=\"right\">Status</TableCell>\n                            <TableCell align=\"right\">Department</TableCell>\n                            <TableCell align=\"right\">Test Name</TableCell>\n                            <TableCell align=\"right\">Price</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {loading ? (\n                                        Array.from(new Array(rowsPerPage)).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={6} align=\"center\">\n                                                    <Skeleton variant=\"rectangular\" width=\"100%\" height={40} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                        \n                        ) : data1.length === 0 ? (\n                            <TableRow>\n                                <TableCell colSpan={6} align=\"center\">\n                                <NoAppointmentCard text_one={\"No Data Found\"} />\n                                </TableCell>\n                            </TableRow>\n                        ) : (\n                            data1.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                <TableRow key={data.suid || index}>\n                                    <TableCell component=\"th\" scope=\"row\" align=\"right\">\n                                        <SaleActivityCard\n                                            profile_picture={data?.profile_picture}\n                                            name={`${data?.first_name} ${data?.last_name}`}\n                                            user_id={data?.suid}\n                                        />\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <Typography\n                                            sx={{\n                                                color: \"#939094\",\n                                                fontFamily: \"Poppins\",\n                                                fontSize: \"0.875rem\",\n                                                fontWeight: \"500\",\n                                            }}\n                                        >\n                                            {formatDate(data?.updated_at)}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <Typography\n                                            sx={{\n                                                color: \"#939094\",\n                                                fontFamily: \"Poppins\",\n                                                fontSize: \"0.875rem\",\n                                                fontWeight: \"500\",\n                                            }}\n                                        >\n                                            {data?.status}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <CustomButton\n                                            label={data?.department_name}\n                                            isTransaprent\n                                        />\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <Typography\n                                            sx={{\n                                                color: \"#939094\",\n                                                fontFamily: \"Poppins\",\n                                                fontSize: \"0.875rem\",\n                                                fontWeight: \"500\",\n                                            }}\n                                        >\n                                            {data?.test_name}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <Typography\n                                            sx={{\n                                                color: \"#939094\",\n                                                fontFamily: \"Poppins\",\n                                                fontSize: \"0.875rem\",\n                                                fontWeight: \"500\",\n                                            }}\n                                        >\n                                            {`${currencysign}${data?.test_price}`}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            ))\n                        )}\n                    </TableBody>\n                </Table>\n                <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={data1.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                labelRowsPerPage=\"Rows per page:\"\n            />\n            </TableContainer>\n           \n        </div>\n    );\n};\n\nexport default DoctorTable;\n","import {\n    Box,\n    Stack,\n    Typography,\n    FormControlLabel,\n    Checkbox,\n} from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport DoctorTable from \"./DoctorTable\";\nimport DiagnosticTable from \"./DiagnosticTable\";\n\nconst AdminManageSale = () => {\n    useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"manage\");\n        localStorage.setItem(\"path\", \"hcfadminsale\");\n        document.getElementById(\"location-search-container\").style.display = \"none\";\n    }, []);\n\n    const [doctorSelected, setDoctorSelected] = useState(true);\n    const [bgColorDoctor, setBgColorDoctor] = useState(\"#A9A9A9\");\n    const [bgColorDiagnostic, setBgColorDiagnostic] = useState(\"#E6E1E5\");\n\n    const navigate = useNavigate();\n\n    \n    const [doctor, setDoctor] = useState(true);\n\n    \n    return (\n        <>\n            <Box sx={{ display: \"flex\", width: \"98%\", height: \"90%\", flexDirection: \"row\" }}>\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminsale\"}>Sale Activities</NavLink>\n                    <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminoverview\"}>Overview</NavLink>\n                    <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminbooking\"}>Bookings</NavLink>\n                    <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminpayout\"}>Payout</NavLink>\n                    <NavLink to={\"/hcfadmin/hcfadminmanage/hcfadminauditlog\"}>Audit Logs</NavLink>\n                </nav>\n                <Box component={\"div\"} sx={{ position: \"relative\", top: \"4em\", width: \"100%\", height: \"100%\" }}>\n                    <div className=\"search-date\">\n                        {/* <Box\n                            display={\"flex\"}\n                            margin={\"10px\"}\n                            border={1}\n                            borderColor=\"#AEAAAE\"\n                            borderRadius={\"25px\"}\n                            width={\"56em\"}\n                            height=\"38px\"\n                            backgroundColor=\"#E6E1E5\"\n                        >\n                            <Stack direction=\"row\" alignItems=\"center\" gap={1} padding={\"10px\"}>\n                                <SearchIcon sx={{ margin: \"0\", color: \"#AEAAAE\" }} />\n                                <Typography variant=\"body1\" sx={{ textAlign: \"left\", color: \"#AEAAAE\" }}>\n                                    Search Patient Name / ID\n                                </Typography>\n                            </Stack>\n                        </Box> */}\n                        <div\n                            style={{\n                                display: \"flex\",\n                                margin: \"10px\",\n                                border: \"1px solid #AEAAAE\",\n                                borderRadius: \"25px\",\n                                height: \"38px\",\n                                backgroundColor: \"#E6E1E5\",\n                                position: \"relative\",\n                                overflow: \"hidden\", // Prevent border overflow on animation\n                                boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n                                width: \"200px\", // Adjust width for better alignment\n                            }}\n                        >\n                            <button\n                               style={{\n                                flex: 1,\n                                border: \"none\",\n                                borderRadius: \"25px\",\n                                height: \"100%\",\n                                color: doctor ? \"#F5F5F5\" : \"#28282B\",\n                                backgroundColor: doctor ? \"#28282B\" : \"transparent\",\n                                transition: \"background-color 0.3s ease, color 0.3s ease\",\n                                fontWeight: \"bold\",\n                                cursor: \"pointer\",\n                            }}\n                            onClick={() => setDoctor(true)}\n                            >\n                                Doctor \n                            </button>\n                            <button\n                                style={{\n                                    flex: 1,\n                                    border: \"none\",\n                                    borderRadius: \"25px\",\n                                    height: \"100%\",\n                                    color: doctor ? \"#28282B\" : \"#F5F5F5\",\n                                    backgroundColor: doctor ? \"transparent\" : \"#28282B\",\n                                    transition: \"background-color 0.3s ease, color 0.3s ease\",\n                                    fontWeight: \"bold\",\n                                    cursor: \"pointer\",\n                                }}\n                                onClick={() => setDoctor(false)}\n                            >\n                                Diagnostic \n                            </button>\n                        </div>\n                    </div>\n                    {/* <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                        <FormControlLabel control={<Checkbox defaultChecked />} label=\"All\" />\n                        <FormControlLabel control={<Checkbox />} label=\"Completed\" />\n                        <FormControlLabel control={<Checkbox />} label=\"Cancelled\" />\n                    </div> */}\n                    {doctor ? <DoctorTable /> : <DiagnosticTable />}\n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default AdminManageSale;\n","import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport img from \"../../../../static/images/DrImages/image10.png\";\n\nexport const SaleActivityCard = ({ name, user_id, profile_picture }) => {\n    return (\n        <>\n            <Box sx={{ display: \"flex\" }}>\n                <Box\n                    component={\"div\"}\n                    sx={{ height: \"3.44331rem\", width: \"3.44331rem\", borderRadius: \"0.5rem\" }}\n                >\n                    <img\n                        src={profile_picture || img}\n                        style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}\n                    />\n                </Box>\n                <Box\n                    sx={{\n                        marginLeft: \"2%\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <Typography\n                        sx={{\n                            color: \"#313033\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.875rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"500\",\n                            lineHeight: \"1.375rem\",\n                            letterSpacing: \"0.00438rem\",\n                        }}\n                    >\n                        {name || \"NA\"} \n                    </Typography>\n                    <Typography\n                        sx={{\n                            color: \"#939094\",\n                            fontFamily: \"Poppins\",\n                            fontSize: \"0.625rem\",\n                            fontStyle: \"normal\",\n                            fontWeight: \"400\",\n                            lineHeight: \"0.9375rem\",\n                            letterSpacing: \"0.005rem\",\n                        }}\n                    >\n                        User ID : {user_id || \"NA\"}\n                    </Typography>\n                </Box>\n            </Box>\n        </>\n    );\n};\n"],"names":["DoctorTable","data1","setData1","useState","loading","setLoading","error","setError","page","setPage","rowsPerPage","setRowsPerPage","hcf_id","localStorage","getItem","useEffect","async","_response$data","response","axiosInstance","concat","data","fetchData1","React","TableContainer","component","Paper","style","background","Table","sx","minWidth","TableHead","TableRow","fontWeight","TableCell","align","TableBody","Array","from","map","_","index","key","colSpan","Skeleton","variant","width","height","length","NoAppointmentCard","text_one","slice","_ref","suid","profile_picture","first_name","middle_name","last_name","status","updated_at","plan_name","amount","scope","SaleActivityCard","name","user_id","Typography","color","fontFamily","fontSize","formatDate","currencysign","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value","labelRowsPerPage","get","CustomButton","label","department_name","isTransaprent","test_name","test_price","AdminManageSale","setItem","document","getElementById","display","doctorSelected","setDoctorSelected","bgColorDoctor","setBgColorDoctor","bgColorDiagnostic","setBgColorDiagnostic","doctor","setDoctor","useNavigate","Box","flexDirection","className","NavLink","to","position","top","margin","border","borderRadius","backgroundColor","overflow","boxShadow","flex","transition","cursor","onClick","DiagnosticTable","src","img","marginLeft","justifyContent","fontStyle","lineHeight","letterSpacing"],"sourceRoot":""}