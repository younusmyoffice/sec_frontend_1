{"version":3,"file":"285.fe511b5e8af44ec24fd9.js","mappings":"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","sources":["webpack://sec-frontend/./src/HCFModule/Clinic/ClinicManage/ClinicAuditLog/ClinicAuditLog.js"],"sourcesContent":["import {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Typography,\n    TablePagination,\n    Skeleton,\n} from \"@mui/material\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { baseURL } from \"../../../../constants/const\";\nimport { AuditCards } from \"../../../DiagnosticCenter/DiagnosticManage/DiagnosticCenterAuditLog/AuditCards\";\nimport axiosInstance from \"../../../../config/axiosInstance\";\nimport NoAppointmentCard from \"../../../../PatientDashboard/PatientAppointment/NoAppointmentCard/NoAppointmentCard\";\nimport {formatDate} from \"../../../../constants/const\"\n\n\nconst getStatusLabel = (status) => {\n    return status === 1 ? \"Active\" : \"Inactive\";\n};\n\nconst ClinicAuditLog = () => {\n    React.useEffect(() => {\n        localStorage.setItem(\"activeComponent\", \"manage\");\n        localStorage.setItem(\"path\", \"hcfadminauditlog\");\n        document.getElementById(\"location-search-container\").style.display = \"none\";\n    }, []);\n\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const doctor_id = localStorage.getItem(\"clinic_suid\");\n\n    const fetchData = async (doctor_id) => {\n        try {\n            const response = await axiosInstance(`sec/hcf/clinicAuditlogs/${doctor_id}`);\n            setData(response?.data?.response || []);\n        } catch (error) {\n            setError(error.response ? error.response.data : \"An error occurred\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData(doctor_id);\n    }, [doctor_id]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0); // Reset to the first page when rows per page changes\n    };\n\n    const cellStyle = {\n        color: \"#939094\",\n        textAlign: \"right\",\n        fontFamily: \"Poppins\",\n        fontSize: \"1rem\",\n        fontStyle: \"normal\",\n        fontWeight: \"400\",\n        lineHeight: \"0.9375rem\",\n        letterSpacing: \"0.005rem\",\n    };\n    const actionidStyle = {\n        color: \"#E72B4A\",\n        textAlign: \"right\",\n        fontFamily: \"Poppins\",\n        fontSize: \"1rem\",\n        fontStyle: \"normal\",\n        fontWeight: \"400\",\n        lineHeight: \"0.9375rem\",\n        letterSpacing: \"0.005rem\",\n    };\n\n    return (\n        <>\n            <Box\n                sx={{\n                    display: \"flex\",\n                    width: \"98%\",\n                    flexDirection: \"row\",\n                }}\n            >\n                <nav className=\"NavBar-Container-Appoinement\">\n                    <NavLink to={\"/clinicDashboard/clinicmanage/clinicsalesactivities\"}>\n                        Sales Activities\n                    </NavLink>\n                    <NavLink to={\"/clinicDashboard/clinicmanage/clinicauditlog\"}>\n                        Audit Logs\n                    </NavLink>\n                </nav>\n\n                <Box\n                    component={\"div\"}\n                    sx={{ position: \"relative\", top: \"4em\", width: \"100%\", height: \"100%\" }}\n                >\n                    <TableContainer component={Paper} style={{ background: \"white\" }}>\n                        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name & Details</TableCell>\n                                    <TableCell align=\"right\">Status</TableCell>\n                                    <TableCell align=\"right\">Action ID</TableCell>\n                                    <TableCell align=\"right\">Action</TableCell>\n                                    <TableCell align=\"right\">Timestamp</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {loading ? (\n                                    <>\n                                        {[...Array(rowsPerPage)].map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell>\n                                                    <Skeleton\n                                                        variant=\"circular\"\n                                                        width={50}\n                                                        height={50}\n                                                    />\n                                                    <Skeleton variant=\"text\" width={100} />\n                                                    <Skeleton variant=\"text\" width={130} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={80} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={150} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={120} />\n                                                </TableCell>\n                                                <TableCell align=\"right\">\n                                                    <Skeleton variant=\"text\" width={100} />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </>\n                                ) : data.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={5} align=\"center\">\n                                            <NoAppointmentCard text_one={\"No Data Found\"} />\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    data\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                        .map((row) => (\n                                            <TableRow\n                                                key={row.name}\n                                                sx={{\n                                                    \"&:last-child td, &:last-child th\": {\n                                                        border: 0,\n                                                    },\n                                                }}\n                                            >\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    <AuditCards\n                                                        name={row.name || \"N/A\"}\n                                                        specialist={row.specialist || \"Unknown\"}\n                                                        Id={row.user_id || \"N/A\"}\n                                                    />{\" \"}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={cellStyle}>\n                                                    {getStatusLabel(row.status)}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={actionidStyle}>\n                                                    {row.action_id || \"N/A\"}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={cellStyle}>\n                                                    {row.action}\n                                                </TableCell>\n                                                <TableCell align=\"right\" sx={cellStyle}>\n                                                    {formatDate(row.time)}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                )}\n                            </TableBody>\n                        </Table>\n                        <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={data.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                    </TableContainer>\n                   \n                </Box>\n            </Box>\n        </>\n    );\n};\n\nexport default ClinicAuditLog;\n"],"names":["ClinicAuditLog","React","localStorage","setItem","document","getElementById","style","display","data","setData","useState","loading","setLoading","error","setError","page","setPage","rowsPerPage","setRowsPerPage","doctor_id","getItem","useEffect","async","_response$data","response","axiosInstance","concat","fetchData","cellStyle","color","textAlign","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","letterSpacing","actionidStyle","Box","sx","width","flexDirection","className","NavLink","to","component","position","top","height","TableContainer","Paper","background","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","Array","map","_","index","key","Skeleton","variant","length","colSpan","NoAppointmentCard","text_one","slice","row","name","border","scope","AuditCards","specialist","Id","user_id","status","action_id","action","formatDate","time","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value"],"sourceRoot":""}